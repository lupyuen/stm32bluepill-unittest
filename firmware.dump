
.pioenvs/bluepill_f103c8/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .text	00000000 .text
080071c4 l    d  .preinit_array	00000000 .preinit_array
080071c4 l    d  .init_array	00000000 .init_array
080071c4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 logger.cpp
08003eb0 l     F .text	00000054 _ZL12debug_appendPKcj
20000034 l     O .bss	00000001 _ZL10logEnabled
20000035 l     O .bss	00000201 _ZL11debugBuffer
20000238 l     O .bss	00000010 _ZL12output_funcs
20000248 l     O .bss	00000002 _ZL17debugBufferLength
00000000 l    df *ABS*	00000000 unity.c
08004052 l     F .text	000000e4 UnityFloatsWithin
08004136 l     F .text	0000011c UnityDoublesWithin
080042d0 l     F .text	0000004c UnityPrint.part.0
08004324 l     F .text	00000030 UnityTestResultsBegin
08004354 l     F .text	00000024 UnityTestResultsFailBegin
08004378 l     F .text	00000050 UnityAddMsgIfSpecified
08007159 l     O .text	00000018 UnityStrBreaker
08007171 l     O .text	0000000a UnityStrDetail1Name
0800717b l     O .text	0000000b UnityStrDetail2Name
08007186 l     O .text	0000000b UnityStrExpected
08007191 l     O .text	00000005 UnityStrFail
08007196 l     O .text	00000003 UnityStrOk
08007199 l     O .text	00000005 UnityStrPass
0800719e l     O .text	0000000b UnityStrResultsFailures
080071a9 l     O .text	0000000a UnityStrResultsIgnored
080071b3 l     O .text	00000008 UnityStrResultsTests
080071bb l     O .text	00000003 UnityStrSpacer
080071be l     O .text	00000006 UnityStrWas
00000000 l    df *ABS*	00000000 functions.c
2000024a l     O .bss	0000002e float_usage
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen-stub.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 qfplib.o
00000001 l       *ABS*	00000000 include_faster
00000001 l       *ABS*	00000000 include_conversions
00000001 l       *ABS*	00000000 include_scientific
080069cc l       .text	00000000 xchxy
080069d4 l       .text	00000000 unpackxy
080069e2 l       .text	00000000 unpackx
08006a10 l       .text	00000000 packx
08006a1e l       .text	00000000 packx0
08006a62 l       .text	00000000 unpackxyalign
08006aac l       .text	00000000 packret
08006ab2 l       .text	00000000 mul0
08006b02 l       .text	00000000 fmul0
08006b0a l       .text	00000000 fdiv_n
08006b42 l       .text	00000000 infret
08006b4c l       .text	00000000 fdiv_fast_n
08006bfc l       .text	00000000 rcpapp
08006b94 l       .text	00000000 div0
08006c04 l       .text	00000000 rsqrtapp
08006c5e l       .text	00000000 packretns
08006c74 l       .text	00000000 cordic_start
08006c7e l       .text	00000000 cordic_vstep
08006c84 l       .text	00000000 cordic_rstep
08006cb0 l       .text	00000000 cordic_rot
08006cd2 l       .text	00000000 cordic_exit
08006cd8 l       .text	00000000 cordic_vec
08006e24 l       .text	00000000 pi_q29
08006e24 l       .text	00000000 tab_cc
08006e58 l       .text	00000000 tab_ch
08006e94 l       .text	00000000 qfp_lib_end
08004b38 g     F .text	00000034 __wrap___aeabi_dcmpun
20000008 g     O .bss	00000004 rf
08006274 g     F .text	0000002c .hidden __aeabi_dcmpun
08006238 g     F .text	00000012 .hidden __aeabi_dcmple
080058b0 g     F .text	000000ba strcpy
0800497c g     F .text	00000030 __wrap___aeabi_ddiv
08006174 g     F .text	0000007a .hidden __cmpdf2
08006b4a g     F .text	00000000 qfp_fdiv_fast
08004c20 g     F .text	00000010 __wrap___subsf3
08004c6c g     F .text	0000001c log
08004b7c g     F .text	00000010 __wrap___aeabi_fadd
08004c50 g     F .text	0000001c sqrt
080025c8 g     F .text	00000160 test_cos
0800431c g     F .text	00000008 UnityPrint
08005114 g     F .text	000000a4 cosh
08005268 g     F .text	00000098 asinh
0800693c  w    F .text	00000090 reset_handler
08006174 g     F .text	0000007a .hidden __eqdf2
08005ce4 g     F .text	0000005a .hidden __floatdidf
08001b78 g     F .text	0000012c test_mulsf3
08006938  w    F .text	00000002 usart3_isr
08006938  w    F .text	00000002 rtc_isr
08006938  w    F .text	00000002 tim7_isr
08006938  w    F .text	00000002 adc1_2_isr
08006714 g     F .text	00000136 .hidden __divsf3
08004bac g     F .text	0000002c __wrap___aeabi_d2iz
08006938  w    F .text	00000002 tim1_trg_com_isr
20000018 g     O .bss	00000008 x
080043c8 g     F .text	0000003a UnityPrintNumberByStyle
08001680 g     F .text	0000012c test_aeabi_fmul
08006a9a g     F .text	00000000 qfp_fadd
080071c4 g       .fini_array	00000000 __exidx_end
080049ac g     F .text	00000030 __wrap___aeabi_dmul
08006938  w    F .text	00000002 usb_hp_can_tx_isr
08006164 g     F .text	0000008a .hidden __gtdf2
08000450 g     F .text	0000019c test_aeabi_dmul
08001530 g     F .text	0000014c test_aeabi_fsub
0800428a g     F .text	00000018 UnityPrintNumber
08006a94 g     F .text	00000000 qfp_fsub
0800556c g     F .text	00000080 ceil
08006938  w    F .text	00000002 tim6_isr
080054f0 g     F .text	0000007c floor
080071c4 g       .text	00000000 _etext
08006938  w    F .text	00000002 usb_wakeup_isr
08006938 g     F .text	00000002 blocking_handler
08006200 g     F .text	00000010 .hidden __aeabi_cdcmple
08001f70 g     F .text	00000128 test_exp
080018d8 g     F .text	0000014c test_addsf3
0800639c g     F .text	00000160 .hidden __aeabi_fadd
08006938  w    F .text	00000002 tim5_isr
08006398 g     F .text	00000164 .hidden __subsf3
08003ff4 g     F .text	0000001c debug_println
08004b8c g     F .text	00000010 __wrap___aeabi_fsub
08006938  w    F .text	00000002 otg_fs_isr
08006938  w    F .text	00000002 spi1_isr
08004c30 g     F .text	00000010 __wrap___mulsf3
08005730 g     F .text	000000ec memcpy
08006938  w    F .text	00000002 exti2_isr
08006938  w    F .text	00000002 dma1_channel6_isr
080061f0 g     F .text	00000020 .hidden __aeabi_cdrcmple
080012dc g     F .text	00000100 test_aeabi_fdiv
0800693a g     F .text	00000002 null_handler
08006924 g     F .text	00000012 .hidden __aeabi_fcmpgt
08005c6c g     F .text	00000022 .hidden __floatsidf
08001ea0 g     F .text	000000d0 test_log
0800616c g     F .text	00000082 .hidden __ltdf2
08006938  w    F .text	00000002 can_rx1_isr
080002b0 g     F .text	0000019c test_aeabi_ddiv
080071c4 g       .fini_array	00000000 __fini_array_end
08006938  w    F .text	00000002 dma1_channel5_isr
08000c40 g     F .text	000001a4 test_aeabi_dcmple
08006938  w    F .text	00000002 dma2_channel5_isr
08006504 g     F .text	0000001c .hidden __aeabi_i2f
08004d7c g     F .text	00000040 ldexp
08006854 g     F .text	00000066 .hidden __lesf2
08006938  w    F .text	00000002 usart1_isr
08002470 g     F .text	00000158 test_sin
08004c10 g     F .text	00000010 __wrap___addsf3
08005c4c g     F .text	0000001e .hidden __aeabi_ui2d
080059c8 g     F .text	00000000 .hidden __aeabi_drsub
20000020 g     O .bss	00000004 xf
08006938  w    F .text	00000002 usage_fault_handler
08006938  w    F .text	00000002 tim8_trg_com_isr
08000de8 g     F .text	000001a4 test_aeabi_dcmpge
08006938  w    F .text	00000002 can2_rx0_isr
08004010 g     F .text	00000042 debug_printhex
08004256 g     F .text	00000034 UnityPrintNumberUnsigned
08006938  w    F .text	00000002 tim1_brk_isr
08006224 g     F .text	00000012 .hidden __aeabi_dcmplt
08002288 g     F .text	00000118 test_pow
08006c3c g     F .text	00000000 qfp_float2ufix
08006b9a g     F .text	00000000 qfp_fsqrt_fast
08003fa0 g     F .text	00000006 debug_flush
08005c90 g     F .text	00000042 .hidden __extendsfdf2
08005f94 g     F .text	000001d0 .hidden __aeabi_ddiv
08004970 g     F .text	0000000c get_float_usage
080059d4 g     F .text	00000276 .hidden __adddf3
0800685c g     F .text	0000005e .hidden __nesf2
080071c4 g       .fini_array	00000000 __exidx_start
08006938  w    F .text	00000002 can2_rx1_isr
08005d40 g     F .text	00000254 .hidden __aeabi_dmul
20000010 g     O .bss	00000004 ru
08003258 g     F .text	000000c8 test_atanh
08006938  w    F .text	00000002 tim1_cc_isr
08003498 g     F .text	0000017c test_floor
08005c4c g     F .text	0000001e .hidden __floatunsidf
08006938  w    F .text	00000002 sdio_isr
080031c8 g     F .text	00000090 test_acosh
08006938  w    F .text	00000002 eth_isr
08006c64 g     F .text	00000000 qfp_ufix2float
20000030 g     O .bss	00000004 yf
08004a70 g     F .text	00000030 __wrap___aeabi_dcmplt
08006938  w    F .text	00000002 dma1_channel4_isr
08006938  w    F .text	00000002 tim8_brk_isr
08004b04 g     F .text	00000034 __wrap___aeabi_dcmpgt
08006938  w    F .text	00000002 dma2_channel4_5_isr
080062f0 g     F .text	0000009e .hidden __aeabi_d2f
08004b9c g     F .text	00000010 __wrap___aeabi_fmul
08006398 g     F .text	00000164 .hidden __aeabi_fsub
200002a0 g       .bss	00000000 _ebss
08006938  w    F .text	00000002 pvd_isr
08006910 g     F .text	00000012 .hidden __aeabi_fcmpge
080062a0 g     F .text	0000004e .hidden __fixdfsi
20000000 g     O .bss	00000008 r
08001a28 g     F .text	0000014c test_subsf3
08006530 g     F .text	0000007c .hidden __floatdisf
08000f90 g     F .text	000001a4 test_aeabi_dcmpgt
08006c3a g     F .text	00000000 qfp_float2uint
0800684c g     F .text	0000006e .hidden __gtsf2
080059d4 g     F .text	00000276 .hidden __aeabi_dadd
0800616c g     F .text	00000082 .hidden __ledf2
0800693a  w    F .text	00000002 sv_call_handler
080068fc g     F .text	00000012 .hidden __aeabi_fcmple
080021b0 g     F .text	000000d8 test_log10
08006938  w    F .text	00000002 rcc_isr
08004a0c g     F .text	00000030 __wrap___aeabi_dsub
08000000 g     O .text	00000150 vector_table
08005cd4 g     F .text	0000006a .hidden __aeabi_ul2d
08006d4e g     F .text	00000000 qfp_fexp
08002b68 g     F .text	000000a8 test_asin
20000278 g     O .bss	00000028 Unity
08006d3c g     F .text	00000000 qfp_fcos
08006938  w    F .text	00000002 flash_isr
080071c4 g       *ABS*	00000000 _data_loadaddr
200002a0 g       .bss	00000000 end
08006938  w    F .text	00000002 uart4_isr
08006938  w    F .text	00000002 rtc_alarm_isr
08006938  w    F .text	00000002 exti15_10_isr
080005f0 g     F .text	0000017c test_aeabi_dadd
08006260 g     F .text	00000012 .hidden __aeabi_dcmpgt
080055ec g     F .text	00000144 fmod
08004dd8 g     F .text	00000034 cos
080051b8 g     F .text	000000b0 tanh
08006938  w    F .text	00000002 hard_fault_handler
08006938  w    F .text	00000002 exti1_isr
08004ad4 g     F .text	00000030 __wrap___aeabi_dcmpge
0800624c g     F .text	00000012 .hidden __aeabi_dcmpge
08000770 g     F .text	0000017c test_aeabi_dsub
08006938  w    F .text	00000002 i2c1_ev_isr
08006af8 g     F .text	00000000 qfp_fmul
080059d0 g     F .text	0000027a .hidden __aeabi_dsub
08006938  w    F .text	00000002 dma2_channel1_isr
08006db8 g     F .text	00000000 qfp_fln
08003f04 g     F .text	0000000c enable_log
0800693a  w    F .text	00000002 pend_sv_handler
08004dbc g     F .text	0000001c sin
08005cd4 g     F .text	0000006a .hidden __floatundidf
08003970 g     F .text	00000510 test_nanofloat
08002d88 g     F .text	00000110 test_sinh
08006938  w    F .text	00000002 spi2_isr
08004e28 g     F .text	00000050 atan2
08006504 g     F .text	0000001c .hidden __floatsisf
080049dc g     F .text	00000030 __wrap___aeabi_dadd
08004a3c g     F .text	00000034 __wrap___aeabi_dcmpeq
08006c10 g     F .text	00000000 qfp_float2int
08006938  w    F .text	00000002 tim8_up_isr
08006ddc g     F .text	00000000 qfp_fatan2
08004cf4 g     F .text	00000088 pow
0800507c g     F .text	00000098 sinh
0800685c g     F .text	0000005e .hidden __eqsf2
080053b0 g     F .text	000000c0 atanh
08004ccc g     F .text	00000028 log10
080048b0 g     F .text	0000002c UnityDefaultTestRun
08000a98 g     F .text	000001a4 test_aeabi_dcmplt
08006714 g     F .text	00000136 .hidden __aeabi_fdiv
08005c6c g     F .text	00000022 .hidden __aeabi_i2d
08006938  w    F .text	00000002 dma2_channel2_isr
08006c58 g     F .text	00000000 qfp_fix2float
08002728 g     F .text	00000150 test_tan
08006520 g     F .text	0000008c .hidden __floatundisf
0800693a  w    F .text	00000002 debug_monitor_handler
08006938  w    F .text	00000002 exti3_isr
08006938  w    F .text	00000002 adc3_isr
08005f94 g     F .text	000001d0 .hidden __divdf3
080013e0 g     F .text	0000014c test_aeabi_fadd
08006938  w    F .text	00000002 tim3_isr
08006938  w    F .text	00000002 usart2_isr
08006d46 g     F .text	00000000 qfp_ftan
08004aa0 g     F .text	00000034 __wrap___aeabi_dcmple
080017b0 g     F .text	00000094 test_aeabi_d2iz
080064fc g     F .text	00000024 .hidden __aeabi_ui2f
08002878 g     F .text	00000220 test_atan2
08005d40 g     F .text	00000254 .hidden __muldf3
08003fda g     F .text	0000001a debug_print
08006938  w    F .text	00000002 usb_lp_can_rx0_isr
080071c4 g       .fini_array	00000000 __fini_array_start
08006938  w    F .text	00000002 i2c2_er_isr
080030b8 g     F .text	00000110 test_asinh
08001138 g     F .text	000001a4 test_aeabi_dcmpun
0800685c g     F .text	0000005e .hidden __cmpsf2
0800581c g     F .text	00000094 memset
08003e80 g     F .text	00000028 main
08006cfa g     F .text	00000000 qfp_fsin
08006938  w    F .text	00000002 i2c2_ev_isr
08006530 g     F .text	0000007c .hidden __aeabi_l2f
08006938  w    F .text	00000002 uart5_isr
08006854 g     F .text	00000066 .hidden __ltsf2
08003ea8 g     F .text	00000006 unity_output_char
0800693a  w    F .text	00000002 sys_tick_handler
080062f0 g     F .text	0000009e .hidden __truncdfsf2
080071c4 g       .init_array	00000000 __init_array_end
08006938  w    F .text	00000002 fsmc_isr
080048dc g     F .text	00000020 UnityBegin
08006938  w    F .text	00000002 dma1_channel1_isr
08006938  w    F .text	00000002 exti4_isr
20000028 g     O .bss	00000008 y
08006d7e g     F .text	00000000 qfp_fsqrt
08005ce4 g     F .text	0000005a .hidden __aeabi_l2d
08003fa8 g     F .text	0000001c debug_force_flush
08006520 g     F .text	0000008c .hidden __aeabi_ul2f
08004c88 g     F .text	0000001c exp
080068c4 g     F .text	00000010 .hidden __aeabi_cfcmple
080065ac g     F .text	00000168 .hidden __mulsf3
08006c56 g     F .text	00000000 qfp_int2float
08001dd8 g     F .text	000000c8 test_sqrt
08004e0c g     F .text	0000001c tan
08006938  w    F .text	00000002 mem_manage_handler
08004408 g     F .text	00000354 UnityPrintFloat
08006174 g     F .text	0000007a .hidden __nedf2
08006938  w    F .text	00000002 can2_tx_isr
08004e78 g     F .text	000000ac atan
0800684c g     F .text	0000006e .hidden __gesf2
08006938  w    F .text	00000002 exti9_5_isr
08004f24 g     F .text	0000008c asin
08006938  w    F .text	00000002 dma2_channel3_isr
08006c12 g     F .text	00000000 qfp_float2fix
08006390 g     F .text	0000016c .hidden __aeabi_frsub
080068d4 g     F .text	00000012 .hidden __aeabi_fcmpeq
08002a98 g     F .text	000000cc test_atan
080065ac g     F .text	00000168 .hidden __aeabi_fmul
08004b6c g     F .text	00000010 __wrap___aeabi_fdiv
080071c4 g       .preinit_array	00000000 __preinit_array_end
08006938  w    F .text	00000002 dma1_channel7_isr
08003fc4 g     F .text	00000016 debug_write
08001848 g     F .text	00000090 test_aeabi_d2uiz
080068bc g     F .text	00000018 .hidden __aeabi_cfrcmple
08003320 g     F .text	00000178 test_trunc
20000000 g       .data	00000000 _data
08006938  w    F .text	00000002 tim1_up_isr
08003618 g     F .text	0000017c test_ceil
08005300 g     F .text	000000b0 acosh
080047f8 g     F .text	00000058 UnityAssertFloatsWithin
2000000c g     O .bss	00000004 ri
08003798 g     F .text	000001d8 test_fmod
08004bd8 g     F .text	00000038 __wrap___aeabi_d2uiz
08006c62 g     F .text	00000000 qfp_uint2float
08000150 g     F .text	00000160 test_fabs
080068e8 g     F .text	00000012 .hidden __aeabi_fcmplt
08006938  w    F .text	00000002 can2_sce_isr
08006938  w    F .text	00000002 tim4_isr
08006210 g     F .text	00000012 .hidden __aeabi_dcmpeq
08004252  w    F .text	00000002 setUp
20000000 g       .data	00000000 _edata
08006938  w    F .text	00000002 dma1_channel2_isr
08006938  w    F .text	00000002 i2c1_er_isr
08006938  w    F .text	00000002 can_sce_isr
08006b08 g     F .text	00000000 qfp_fdiv
08002098 g     F .text	00000114 test_log2
08002c10 g     F .text	00000174 test_acos
0800693a  w    F .text	00000002 nmi_handler
08006adc g     F .text	00000000 qfp_fcmp
08003f10 g     F .text	00000090 _Z20debug_flush_internalb
08002fa8 g     F .text	00000110 test_tanh
08004ca4 g     F .text	00000028 log2
080064fc g     F .text	00000024 .hidden __floatunsisf
08006938  w    F .text	00000002 tim8_cc_isr
080062a0 g     F .text	0000004e .hidden __aeabi_d2iz
08001ca8 g     F .text	0000012c test_divsf3
080068c4 g     F .text	00000010 .hidden __aeabi_cfcmpeq
08006938  w    F .text	00000002 tamper_isr
08004c40 g     F .text	00000010 __wrap___divsf3
080071c4 g       .init_array	00000000 __init_array_start
08006274 g     F .text	0000002c .hidden __unorddf2
080047a0 g     F .text	00000058 UnityAssertEqualNumber
08004254  w    F .text	00000002 tearDown
08006938  w    F .text	00000002 eth_wkup_isr
08002e98 g     F .text	00000110 test_cosh
0800596c g     F .text	0000005c strlen
080042a2 g     F .text	0000002e UnityPrintNumberHex
08006200 g     F .text	00000010 .hidden __aeabi_cdcmpeq
080023a0 g     F .text	000000cc test_ldexp
08006164 g     F .text	0000008a .hidden __gedf2
20005000 g       .bss	00000000 _stack
080008f0 g     F .text	000001a4 test_aeabi_dcmpeq
0800475c g     F .text	00000044 UnityConcludeTest
08005c90 g     F .text	00000042 .hidden __aeabi_f2d
08006938  w    F .text	00000002 bus_fault_handler
08006938  w    F .text	00000002 wwdg_isr
08006938  w    F .text	00000002 dma1_channel3_isr
08004fb0 g     F .text	000000cc acos
080059d0 g     F .text	0000027a .hidden __subdf3
08004850 g     F .text	00000060 UnityAssertDoublesWithin
080071c4 g       .preinit_array	00000000 __preinit_array_start
08005470 g     F .text	00000080 trunc
080048fc g     F .text	00000074 UnityEnd
08006938  w    F .text	00000002 spi3_isr
0800639c g     F .text	00000160 .hidden __addsf3
08006938  w    F .text	00000002 tim2_isr
08006938  w    F .text	00000002 exti0_isr



Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 50 00 20 3d 69 00 08 3b 69 00 08 39 69 00 08     .P. =i..;i..9i..
 8000010:	39 69 00 08 39 69 00 08 39 69 00 08 00 00 00 00     9i..9i..9i......
	...
 800002c:	3b 69 00 08 3b 69 00 08 00 00 00 00 3b 69 00 08     ;i..;i......;i..
 800003c:	3b 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     ;i..9i..9i..9i..
 800004c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800005c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800006c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800007c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800008c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800009c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 80000ac:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 80000bc:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 80000cc:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 80000dc:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 80000ec:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 80000fc:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800010c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800011c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800012c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800013c:	39 69 00 08 39 69 00 08 39 69 00 08 39 69 00 08     9i..9i..9i..9i..
 800014c:	39 69 00 08                                         9i..

08000150 <test_fabs>:
test_fabs():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:420
x = -0.0;      y = 1.0;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
// x = +5.1;   y = Inf;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 5.1         , r );
// x = +5.1;   y = 0;    r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( nan         , r );
}

void test_fabs(void) {
 8000150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:421
x = +3;        r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 3.000000    , r );
 8000154:	f20f 1918 	addw	r9, pc, #280	; 0x118
 8000158:	e9d9 8900 	ldrd	r8, r9, [r9]
 800015c:	2600      	movs	r6, #0
 800015e:	4d50      	ldr	r5, [pc, #320]	; (80002a0 <test_fabs+0x150>)
 8000160:	4f50      	ldr	r7, [pc, #320]	; (80002a4 <test_fabs+0x154>)
 8000162:	f04f 0a00 	mov.w	sl, #0
 8000166:	e9c5 6700 	strd	r6, r7, [r5]
 800016a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800016e:	4602      	mov	r2, r0
 8000170:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000174:	f240 11a5 	movw	r1, #421	; 0x1a5
 8000178:	4c4b      	ldr	r4, [pc, #300]	; (80002a8 <test_fabs+0x158>)
 800017a:	e9cd a102 	strd	sl, r1, [sp, #8]
 800017e:	e9c4 2300 	strd	r2, r3, [r4]
 8000182:	4640      	mov	r0, r8
 8000184:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000188:	4649      	mov	r1, r9
 800018a:	e9cd 2300 	strd	r2, r3, [sp]
 800018e:	4632      	mov	r2, r6
 8000190:	463b      	mov	r3, r7
 8000192:	f004 fb5d 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:422
x = -3;        r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 3.000000    , r );
 8000196:	2200      	movs	r2, #0
 8000198:	4b44      	ldr	r3, [pc, #272]	; (80002ac <test_fabs+0x15c>)
 800019a:	e9c5 2300 	strd	r2, r3, [r5]
 800019e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80001a2:	4602      	mov	r2, r0
 80001a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80001a8:	e9c4 2300 	strd	r2, r3, [r4]
 80001ac:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80001b0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80001b4:	e9cd 2300 	strd	r2, r3, [sp]
 80001b8:	4632      	mov	r2, r6
 80001ba:	463b      	mov	r3, r7
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:423
x = -0;        r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 80001bc:	2600      	movs	r6, #0
 80001be:	2700      	movs	r7, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:422
x = -3;        r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 3.000000    , r );
 80001c0:	e9cd a102 	strd	sl, r1, [sp, #8]
 80001c4:	4640      	mov	r0, r8
 80001c6:	4649      	mov	r1, r9
 80001c8:	f004 fb42 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:423
x = -0;        r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 80001cc:	e9c5 6700 	strd	r6, r7, [r5]
 80001d0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80001d4:	4602      	mov	r2, r0
 80001d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80001da:	f240 11a7 	movw	r1, #423	; 0x1a7
 80001de:	e9c4 2300 	strd	r2, r3, [r4]
 80001e2:	e9cd a102 	strd	sl, r1, [sp, #8]
 80001e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80001ea:	4630      	mov	r0, r6
 80001ec:	e9cd 2300 	strd	r2, r3, [sp]
 80001f0:	4639      	mov	r1, r7
 80001f2:	4632      	mov	r2, r6
 80001f4:	463b      	mov	r3, r7
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:424
x = 2205.1969; r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 2205.1969   , r );
 80001f6:	a720      	add	r7, pc, #128	; (adr r7, 8000278 <test_fabs+0x128>)
 80001f8:	e9d7 6700 	ldrd	r6, r7, [r7]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:423
x = -0;        r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 80001fc:	f004 fb28 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:424
x = 2205.1969; r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 2205.1969   , r );
 8000200:	e9c5 6700 	strd	r6, r7, [r5]
 8000204:	e9d5 0100 	ldrd	r0, r1, [r5]
 8000208:	4602      	mov	r2, r0
 800020a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800020e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8000212:	e9c4 2300 	strd	r2, r3, [r4]
 8000216:	e9cd a102 	strd	sl, r1, [sp, #8]
 800021a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800021e:	a118      	add	r1, pc, #96	; (adr r1, 8000280 <test_fabs+0x130>)
 8000220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000224:	e9cd 2300 	strd	r2, r3, [sp]
 8000228:	4632      	mov	r2, r6
 800022a:	463b      	mov	r3, r7
 800022c:	f004 fb10 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:425
x = -270.8886; r = fabs(x);     TEST_ASSERT_EQUAL_DOUBLE( 270.8886    , r );
 8000230:	a315      	add	r3, pc, #84	; (adr r3, 8000288 <test_fabs+0x138>)
 8000232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000236:	e9c5 2300 	strd	r2, r3, [r5]
 800023a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800023e:	4602      	mov	r2, r0
 8000240:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000244:	f240 11a9 	movw	r1, #425	; 0x1a9
 8000248:	e9c4 2300 	strd	r2, r3, [r4]
 800024c:	e9cd a102 	strd	sl, r1, [sp, #8]
 8000250:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000254:	a10e      	add	r1, pc, #56	; (adr r1, 8000290 <test_fabs+0x140>)
 8000256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800025a:	e9cd 2300 	strd	r2, r3, [sp]
 800025e:	a30e      	add	r3, pc, #56	; (adr r3, 8000298 <test_fabs+0x148>)
 8000260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000264:	f004 faf4 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:426
}
 8000268:	b004      	add	sp, #16
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	bf00      	nop
 8000270:	7110e454 	.word	0x7110e454
 8000274:	3ec92a73 	.word	0x3ec92a73
 8000278:	d013a92a 	.word	0xd013a92a
 800027c:	40a13a64 	.word	0x40a13a64
 8000280:	1222bd25 	.word	0x1222bd25
 8000284:	3f6210a2 	.word	0x3f6210a2
 8000288:	b4a2339c 	.word	0xb4a2339c
 800028c:	c070ee37 	.word	0xc070ee37
 8000290:	ad882ea5 	.word	0xad882ea5
 8000294:	3f31c0c1 	.word	0x3f31c0c1
 8000298:	b4a2339c 	.word	0xb4a2339c
 800029c:	4070ee37 	.word	0x4070ee37
 80002a0:	20000018 	.word	0x20000018
 80002a4:	40080000 	.word	0x40080000
 80002a8:	20000000 	.word	0x20000000
 80002ac:	c0080000 	.word	0xc0080000

080002b0 <test_aeabi_ddiv>:
test_aeabi_ddiv():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:64
void test_aeabi_ddiv(void) {
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:66
x = 2205.1969;  y = 270.8886;   r = x / y;                       TEST_ASSERT_EQUAL_DOUBLE( 8.140604292687105, r );
 80002b4:	a752      	add	r7, pc, #328	; (adr r7, 8000400 <test_aeabi_ddiv+0x150>)
 80002b6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80002ba:	f20f 194c 	addw	r9, pc, #332	; 0x14c
 80002be:	e9d9 8900 	ldrd	r8, r9, [r9]
 80002c2:	f8df a184 	ldr.w	sl, [pc, #388]	; 8000448 <test_aeabi_ddiv+0x198>
 80002c6:	4d5e      	ldr	r5, [pc, #376]	; (8000440 <test_aeabi_ddiv+0x190>)
 80002c8:	e9ca 6700 	strd	r6, r7, [sl]
 80002cc:	e9c5 8900 	strd	r8, r9, [r5]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:64
void test_aeabi_ddiv(void) {
 80002d0:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:66
x = 2205.1969;  y = 270.8886;   r = x / y;                       TEST_ASSERT_EQUAL_DOUBLE( 8.140604292687105, r );
 80002d2:	e9da 0100 	ldrd	r0, r1, [sl]
 80002d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80002da:	f005 fe5b 	bl	8005f94 <__aeabi_ddiv>
 80002de:	4c59      	ldr	r4, [pc, #356]	; (8000444 <test_aeabi_ddiv+0x194>)
 80002e0:	f04f 0b00 	mov.w	fp, #0
 80002e4:	e9c4 0100 	strd	r0, r1, [r4]
 80002e8:	2142      	movs	r1, #66	; 0x42
 80002ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80002ee:	e9cd b102 	strd	fp, r1, [sp, #8]
 80002f2:	a147      	add	r1, pc, #284	; (adr r1, 8000410 <test_aeabi_ddiv+0x160>)
 80002f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80002f8:	e9cd 2300 	strd	r2, r3, [sp]
 80002fc:	a346      	add	r3, pc, #280	; (adr r3, 8000418 <test_aeabi_ddiv+0x168>)
 80002fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000302:	f004 faa5 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:67
x = 2205.1969;  y = 270.8886;   r = __wrap___aeabi_ddiv(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 8.140604292687105  , r );
 8000306:	e9ca 6700 	strd	r6, r7, [sl]
 800030a:	e9c5 8900 	strd	r8, r9, [r5]
 800030e:	e9da 0100 	ldrd	r0, r1, [sl]
 8000312:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000316:	f004 fb31 	bl	800497c <__wrap___aeabi_ddiv>
 800031a:	e9c4 0100 	strd	r0, r1, [r4]
 800031e:	2143      	movs	r1, #67	; 0x43
 8000320:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000324:	e9cd b102 	strd	fp, r1, [sp, #8]
 8000328:	a139      	add	r1, pc, #228	; (adr r1, 8000410 <test_aeabi_ddiv+0x160>)
 800032a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800032e:	e9cd 2300 	strd	r2, r3, [sp]
 8000332:	a339      	add	r3, pc, #228	; (adr r3, 8000418 <test_aeabi_ddiv+0x168>)
 8000334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000338:	f004 fa8a 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:68
x = -2205.1969; y = 270.8886;   r = __wrap___aeabi_ddiv(x, y);   TEST_ASSERT_EQUAL_DOUBLE( -8.140604292687105 , r );
 800033c:	a338      	add	r3, pc, #224	; (adr r3, 8000420 <test_aeabi_ddiv+0x170>)
 800033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000342:	e9ca 2300 	strd	r2, r3, [sl]
 8000346:	e9c5 8900 	strd	r8, r9, [r5]
 800034a:	f20f 09dc 	addw	r9, pc, #220	; 0xdc
 800034e:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000352:	e9da 0100 	ldrd	r0, r1, [sl]
 8000356:	e9d5 2300 	ldrd	r2, r3, [r5]
 800035a:	f004 fb0f 	bl	800497c <__wrap___aeabi_ddiv>
 800035e:	e9c4 0100 	strd	r0, r1, [r4]
 8000362:	2144      	movs	r1, #68	; 0x44
 8000364:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000368:	e9cd b102 	strd	fp, r1, [sp, #8]
 800036c:	a130      	add	r1, pc, #192	; (adr r1, 8000430 <test_aeabi_ddiv+0x180>)
 800036e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000372:	e9cd 2300 	strd	r2, r3, [sp]
 8000376:	4642      	mov	r2, r8
 8000378:	464b      	mov	r3, r9
 800037a:	f004 fa69 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:69
x = 2205.1969;  y = -270.8886;  r = __wrap___aeabi_ddiv(x, y);   TEST_ASSERT_EQUAL_DOUBLE( -8.140604292687105 , r );
 800037e:	e9ca 6700 	strd	r6, r7, [sl]
 8000382:	a72d      	add	r7, pc, #180	; (adr r7, 8000438 <test_aeabi_ddiv+0x188>)
 8000384:	e9d7 6700 	ldrd	r6, r7, [r7]
 8000388:	e9c5 6700 	strd	r6, r7, [r5]
 800038c:	e9da 0100 	ldrd	r0, r1, [sl]
 8000390:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000394:	f004 faf2 	bl	800497c <__wrap___aeabi_ddiv>
 8000398:	e9c4 0100 	strd	r0, r1, [r4]
 800039c:	2145      	movs	r1, #69	; 0x45
 800039e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80003a2:	e9cd b102 	strd	fp, r1, [sp, #8]
 80003a6:	a122      	add	r1, pc, #136	; (adr r1, 8000430 <test_aeabi_ddiv+0x180>)
 80003a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80003ac:	e9cd 2300 	strd	r2, r3, [sp]
 80003b0:	4642      	mov	r2, r8
 80003b2:	464b      	mov	r3, r9
 80003b4:	f004 fa4c 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:70
x = -2205.1969; y = -270.8886;  r = __wrap___aeabi_ddiv(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 8.140604292687105  , r );
 80003b8:	a319      	add	r3, pc, #100	; (adr r3, 8000420 <test_aeabi_ddiv+0x170>)
 80003ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003be:	e9ca 2300 	strd	r2, r3, [sl]
 80003c2:	e9c5 6700 	strd	r6, r7, [r5]
 80003c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80003ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80003ce:	f004 fad5 	bl	800497c <__wrap___aeabi_ddiv>
 80003d2:	e9c4 0100 	strd	r0, r1, [r4]
 80003d6:	2146      	movs	r1, #70	; 0x46
 80003d8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80003dc:	e9cd b102 	strd	fp, r1, [sp, #8]
 80003e0:	a10b      	add	r1, pc, #44	; (adr r1, 8000410 <test_aeabi_ddiv+0x160>)
 80003e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80003e6:	e9cd 2300 	strd	r2, r3, [sp]
 80003ea:	a30b      	add	r3, pc, #44	; (adr r3, 8000418 <test_aeabi_ddiv+0x168>)
 80003ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003f0:	f004 fa2e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:71
}
 80003f4:	b005      	add	sp, #20
 80003f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003fa:	bf00      	nop
 80003fc:	f3af 8000 	nop.w
 8000400:	d013a92a 	.word	0xd013a92a
 8000404:	40a13a64 	.word	0x40a13a64
 8000408:	b4a2339c 	.word	0xb4a2339c
 800040c:	4070ee37 	.word	0x4070ee37
 8000410:	22763b8c 	.word	0x22763b8c
 8000414:	3ee11274 	.word	0x3ee11274
 8000418:	492d8962 	.word	0x492d8962
 800041c:	402047fd 	.word	0x402047fd
 8000420:	d013a92a 	.word	0xd013a92a
 8000424:	c0a13a64 	.word	0xc0a13a64
 8000428:	492d8962 	.word	0x492d8962
 800042c:	c02047fd 	.word	0xc02047fd
 8000430:	22763b8c 	.word	0x22763b8c
 8000434:	bee11274 	.word	0xbee11274
 8000438:	b4a2339c 	.word	0xb4a2339c
 800043c:	c070ee37 	.word	0xc070ee37
 8000440:	20000028 	.word	0x20000028
 8000444:	20000000 	.word	0x20000000
 8000448:	20000018 	.word	0x20000018
 800044c:	00000000 	.word	0x00000000

08000450 <test_aeabi_dmul>:
test_aeabi_dmul():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:73
void test_aeabi_dmul(void) {
 8000450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:75
x = 2205.1969;  y = 270.8886;   r = x * y;                       TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534, r );
 8000454:	a752      	add	r7, pc, #328	; (adr r7, 80005a0 <test_aeabi_dmul+0x150>)
 8000456:	e9d7 6700 	ldrd	r6, r7, [r7]
 800045a:	f20f 194c 	addw	r9, pc, #332	; 0x14c
 800045e:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000462:	f8df a184 	ldr.w	sl, [pc, #388]	; 80005e8 <test_aeabi_dmul+0x198>
 8000466:	4d5e      	ldr	r5, [pc, #376]	; (80005e0 <test_aeabi_dmul+0x190>)
 8000468:	e9ca 6700 	strd	r6, r7, [sl]
 800046c:	e9c5 8900 	strd	r8, r9, [r5]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:73
void test_aeabi_dmul(void) {
 8000470:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:75
x = 2205.1969;  y = 270.8886;   r = x * y;                       TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534, r );
 8000472:	e9da 0100 	ldrd	r0, r1, [sl]
 8000476:	e9d5 2300 	ldrd	r2, r3, [r5]
 800047a:	f005 fc61 	bl	8005d40 <__aeabi_dmul>
 800047e:	4c59      	ldr	r4, [pc, #356]	; (80005e4 <test_aeabi_dmul+0x194>)
 8000480:	f04f 0b00 	mov.w	fp, #0
 8000484:	e9c4 0100 	strd	r0, r1, [r4]
 8000488:	214b      	movs	r1, #75	; 0x4b
 800048a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800048e:	e9cd b102 	strd	fp, r1, [sp, #8]
 8000492:	a147      	add	r1, pc, #284	; (adr r1, 80005b0 <test_aeabi_dmul+0x160>)
 8000494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000498:	e9cd 2300 	strd	r2, r3, [sp]
 800049c:	a346      	add	r3, pc, #280	; (adr r3, 80005b8 <test_aeabi_dmul+0x168>)
 800049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004a2:	f004 f9d5 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:76
x = 2205.1969;  y = 270.8886;   r = __wrap___aeabi_dmul(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , r );
 80004a6:	e9ca 6700 	strd	r6, r7, [sl]
 80004aa:	e9c5 8900 	strd	r8, r9, [r5]
 80004ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80004b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80004b6:	f004 fa79 	bl	80049ac <__wrap___aeabi_dmul>
 80004ba:	e9c4 0100 	strd	r0, r1, [r4]
 80004be:	214c      	movs	r1, #76	; 0x4c
 80004c0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80004c4:	e9cd b102 	strd	fp, r1, [sp, #8]
 80004c8:	a139      	add	r1, pc, #228	; (adr r1, 80005b0 <test_aeabi_dmul+0x160>)
 80004ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80004ce:	e9cd 2300 	strd	r2, r3, [sp]
 80004d2:	a339      	add	r3, pc, #228	; (adr r3, 80005b8 <test_aeabi_dmul+0x168>)
 80004d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004d8:	f004 f9ba 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:77
x = -2205.1969; y = 270.8886;   r = __wrap___aeabi_dmul(x, y);   TEST_ASSERT_EQUAL_DOUBLE( -597362.70096534   , r );
 80004dc:	a338      	add	r3, pc, #224	; (adr r3, 80005c0 <test_aeabi_dmul+0x170>)
 80004de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004e2:	e9ca 2300 	strd	r2, r3, [sl]
 80004e6:	e9c5 8900 	strd	r8, r9, [r5]
 80004ea:	f20f 09dc 	addw	r9, pc, #220	; 0xdc
 80004ee:	e9d9 8900 	ldrd	r8, r9, [r9]
 80004f2:	e9da 0100 	ldrd	r0, r1, [sl]
 80004f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80004fa:	f004 fa57 	bl	80049ac <__wrap___aeabi_dmul>
 80004fe:	e9c4 0100 	strd	r0, r1, [r4]
 8000502:	214d      	movs	r1, #77	; 0x4d
 8000504:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000508:	e9cd b102 	strd	fp, r1, [sp, #8]
 800050c:	a130      	add	r1, pc, #192	; (adr r1, 80005d0 <test_aeabi_dmul+0x180>)
 800050e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000512:	e9cd 2300 	strd	r2, r3, [sp]
 8000516:	4642      	mov	r2, r8
 8000518:	464b      	mov	r3, r9
 800051a:	f004 f999 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:78
x = 2205.1969;  y = -270.8886;  r = __wrap___aeabi_dmul(x, y);   TEST_ASSERT_EQUAL_DOUBLE( -597362.70096534   , r );
 800051e:	e9ca 6700 	strd	r6, r7, [sl]
 8000522:	a72d      	add	r7, pc, #180	; (adr r7, 80005d8 <test_aeabi_dmul+0x188>)
 8000524:	e9d7 6700 	ldrd	r6, r7, [r7]
 8000528:	e9c5 6700 	strd	r6, r7, [r5]
 800052c:	e9da 0100 	ldrd	r0, r1, [sl]
 8000530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000534:	f004 fa3a 	bl	80049ac <__wrap___aeabi_dmul>
 8000538:	e9c4 0100 	strd	r0, r1, [r4]
 800053c:	214e      	movs	r1, #78	; 0x4e
 800053e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000542:	e9cd b102 	strd	fp, r1, [sp, #8]
 8000546:	a122      	add	r1, pc, #136	; (adr r1, 80005d0 <test_aeabi_dmul+0x180>)
 8000548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800054c:	e9cd 2300 	strd	r2, r3, [sp]
 8000550:	4642      	mov	r2, r8
 8000552:	464b      	mov	r3, r9
 8000554:	f004 f97c 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:79
x = -2205.1969; y = -270.8886;  r = __wrap___aeabi_dmul(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , r );
 8000558:	a319      	add	r3, pc, #100	; (adr r3, 80005c0 <test_aeabi_dmul+0x170>)
 800055a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800055e:	e9ca 2300 	strd	r2, r3, [sl]
 8000562:	e9c5 6700 	strd	r6, r7, [r5]
 8000566:	e9da 0100 	ldrd	r0, r1, [sl]
 800056a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800056e:	f004 fa1d 	bl	80049ac <__wrap___aeabi_dmul>
 8000572:	e9c4 0100 	strd	r0, r1, [r4]
 8000576:	214f      	movs	r1, #79	; 0x4f
 8000578:	e9d4 2300 	ldrd	r2, r3, [r4]
 800057c:	e9cd b102 	strd	fp, r1, [sp, #8]
 8000580:	a10b      	add	r1, pc, #44	; (adr r1, 80005b0 <test_aeabi_dmul+0x160>)
 8000582:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000586:	e9cd 2300 	strd	r2, r3, [sp]
 800058a:	a30b      	add	r3, pc, #44	; (adr r3, 80005b8 <test_aeabi_dmul+0x168>)
 800058c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000590:	f004 f95e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:80
}
 8000594:	b005      	add	sp, #20
 8000596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800059a:	bf00      	nop
 800059c:	f3af 8000 	nop.w
 80005a0:	d013a92a 	.word	0xd013a92a
 80005a4:	40a13a64 	.word	0x40a13a64
 80005a8:	b4a2339c 	.word	0xb4a2339c
 80005ac:	4070ee37 	.word	0x4070ee37
 80005b0:	620fe234 	.word	0x620fe234
 80005b4:	3fe31d98 	.word	0x3fe31d98
 80005b8:	66e4edd6 	.word	0x66e4edd6
 80005bc:	41223ae5 	.word	0x41223ae5
 80005c0:	d013a92a 	.word	0xd013a92a
 80005c4:	c0a13a64 	.word	0xc0a13a64
 80005c8:	66e4edd6 	.word	0x66e4edd6
 80005cc:	c1223ae5 	.word	0xc1223ae5
 80005d0:	620fe234 	.word	0x620fe234
 80005d4:	bfe31d98 	.word	0xbfe31d98
 80005d8:	b4a2339c 	.word	0xb4a2339c
 80005dc:	c070ee37 	.word	0xc070ee37
 80005e0:	20000028 	.word	0x20000028
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000018 	.word	0x20000018
 80005ec:	00000000 	.word	0x00000000

080005f0 <test_aeabi_dadd>:
test_aeabi_dadd():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:82
void test_aeabi_dadd(void) {   
 80005f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:83
x = 2205.1969;  y = 270.8886;  r = __wrap___aeabi_dadd(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , r );
 80005f4:	a742      	add	r7, pc, #264	; (adr r7, 8000700 <test_aeabi_dadd+0x110>)
 80005f6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80005fa:	f20f 190c 	addw	r9, pc, #268	; 0x10c
 80005fe:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000602:	f8df a164 	ldr.w	sl, [pc, #356]	; 8000768 <test_aeabi_dadd+0x178>
 8000606:	4d56      	ldr	r5, [pc, #344]	; (8000760 <test_aeabi_dadd+0x170>)
 8000608:	e9ca 6700 	strd	r6, r7, [sl]
 800060c:	e9c5 8900 	strd	r8, r9, [r5]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:82
void test_aeabi_dadd(void) {   
 8000610:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:83
x = 2205.1969;  y = 270.8886;  r = __wrap___aeabi_dadd(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , r );
 8000612:	e9da 0100 	ldrd	r0, r1, [sl]
 8000616:	e9d5 2300 	ldrd	r2, r3, [r5]
 800061a:	f004 f9df 	bl	80049dc <__wrap___aeabi_dadd>
 800061e:	4c51      	ldr	r4, [pc, #324]	; (8000764 <test_aeabi_dadd+0x174>)
 8000620:	f04f 0b00 	mov.w	fp, #0
 8000624:	e9c4 0100 	strd	r0, r1, [r4]
 8000628:	2153      	movs	r1, #83	; 0x53
 800062a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800062e:	e9cd b102 	strd	fp, r1, [sp, #8]
 8000632:	a137      	add	r1, pc, #220	; (adr r1, 8000710 <test_aeabi_dadd+0x120>)
 8000634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000638:	e9cd 2300 	strd	r2, r3, [sp]
 800063c:	a336      	add	r3, pc, #216	; (adr r3, 8000718 <test_aeabi_dadd+0x128>)
 800063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000642:	f004 f905 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:84
x = -2205.1969; y = 270.8886;  r = __wrap___aeabi_dadd(x, y);   TEST_ASSERT_EQUAL_DOUBLE( -1934.3083         , r );
 8000646:	a336      	add	r3, pc, #216	; (adr r3, 8000720 <test_aeabi_dadd+0x130>)
 8000648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800064c:	e9ca 2300 	strd	r2, r3, [sl]
 8000650:	e9c5 8900 	strd	r8, r9, [r5]
 8000654:	e9da 0100 	ldrd	r0, r1, [sl]
 8000658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800065c:	f004 f9be 	bl	80049dc <__wrap___aeabi_dadd>
 8000660:	e9c4 0100 	strd	r0, r1, [r4]
 8000664:	2154      	movs	r1, #84	; 0x54
 8000666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800066a:	e9cd b102 	strd	fp, r1, [sp, #8]
 800066e:	a12e      	add	r1, pc, #184	; (adr r1, 8000728 <test_aeabi_dadd+0x138>)
 8000670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000674:	e9cd 2300 	strd	r2, r3, [sp]
 8000678:	a32d      	add	r3, pc, #180	; (adr r3, 8000730 <test_aeabi_dadd+0x140>)
 800067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800067e:	f004 f8e7 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:85
x = 2205.1969;  y = -270.8886; r = __wrap___aeabi_dadd(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , r );
 8000682:	e9ca 6700 	strd	r6, r7, [sl]
 8000686:	a72c      	add	r7, pc, #176	; (adr r7, 8000738 <test_aeabi_dadd+0x148>)
 8000688:	e9d7 6700 	ldrd	r6, r7, [r7]
 800068c:	e9c5 6700 	strd	r6, r7, [r5]
 8000690:	e9da 0100 	ldrd	r0, r1, [sl]
 8000694:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000698:	f004 f9a0 	bl	80049dc <__wrap___aeabi_dadd>
 800069c:	e9c4 0100 	strd	r0, r1, [r4]
 80006a0:	2155      	movs	r1, #85	; 0x55
 80006a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80006a6:	e9cd b102 	strd	fp, r1, [sp, #8]
 80006aa:	a125      	add	r1, pc, #148	; (adr r1, 8000740 <test_aeabi_dadd+0x150>)
 80006ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80006b0:	e9cd 2300 	strd	r2, r3, [sp]
 80006b4:	a324      	add	r3, pc, #144	; (adr r3, 8000748 <test_aeabi_dadd+0x158>)
 80006b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ba:	f004 f8c9 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:86
x = -2205.1969; y = -270.8886; r = __wrap___aeabi_dadd(x, y);   TEST_ASSERT_EQUAL_DOUBLE( -2476.0855         , r );
 80006be:	a318      	add	r3, pc, #96	; (adr r3, 8000720 <test_aeabi_dadd+0x130>)
 80006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c4:	e9ca 2300 	strd	r2, r3, [sl]
 80006c8:	e9c5 6700 	strd	r6, r7, [r5]
 80006cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80006d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80006d4:	f004 f982 	bl	80049dc <__wrap___aeabi_dadd>
 80006d8:	e9c4 0100 	strd	r0, r1, [r4]
 80006dc:	2156      	movs	r1, #86	; 0x56
 80006de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80006e2:	e9cd b102 	strd	fp, r1, [sp, #8]
 80006e6:	a11a      	add	r1, pc, #104	; (adr r1, 8000750 <test_aeabi_dadd+0x160>)
 80006e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80006ec:	e9cd 2300 	strd	r2, r3, [sp]
 80006f0:	a319      	add	r3, pc, #100	; (adr r3, 8000758 <test_aeabi_dadd+0x168>)
 80006f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f6:	f004 f8ab 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:87
}
 80006fa:	b005      	add	sp, #20
 80006fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000700:	d013a92a 	.word	0xd013a92a
 8000704:	40a13a64 	.word	0x40a13a64
 8000708:	b4a2339c 	.word	0xb4a2339c
 800070c:	4070ee37 	.word	0x4070ee37
 8000710:	47d3c2fa 	.word	0x47d3c2fa
 8000714:	3f6448ba 	.word	0x3f6448ba
 8000718:	c6a7ef9e 	.word	0xc6a7ef9e
 800071c:	40a3582b 	.word	0x40a3582b
 8000720:	d013a92a 	.word	0xd013a92a
 8000724:	c0a13a64 	.word	0xc0a13a64
 8000728:	b8e36ea1 	.word	0xb8e36ea1
 800072c:	bf5fb113 	.word	0xbf5fb113
 8000730:	b2fec56d 	.word	0xb2fec56d
 8000734:	c09e393b 	.word	0xc09e393b
 8000738:	b4a2339c 	.word	0xb4a2339c
 800073c:	c070ee37 	.word	0xc070ee37
 8000740:	b8e36ea1 	.word	0xb8e36ea1
 8000744:	3f5fb113 	.word	0x3f5fb113
 8000748:	b2fec56d 	.word	0xb2fec56d
 800074c:	409e393b 	.word	0x409e393b
 8000750:	47d3c2fa 	.word	0x47d3c2fa
 8000754:	bf6448ba 	.word	0xbf6448ba
 8000758:	c6a7ef9e 	.word	0xc6a7ef9e
 800075c:	c0a3582b 	.word	0xc0a3582b
 8000760:	20000028 	.word	0x20000028
 8000764:	20000000 	.word	0x20000000
 8000768:	20000018 	.word	0x20000018
 800076c:	00000000 	.word	0x00000000

08000770 <test_aeabi_dsub>:
test_aeabi_dsub():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:89
void test_aeabi_dsub(void) {    
 8000770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:90
x = 2205.1969;  y = 270.8886;  r = __wrap___aeabi_dsub(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , r );
 8000774:	a742      	add	r7, pc, #264	; (adr r7, 8000880 <test_aeabi_dsub+0x110>)
 8000776:	e9d7 6700 	ldrd	r6, r7, [r7]
 800077a:	f20f 190c 	addw	r9, pc, #268	; 0x10c
 800077e:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000782:	f8df a164 	ldr.w	sl, [pc, #356]	; 80008e8 <test_aeabi_dsub+0x178>
 8000786:	4d56      	ldr	r5, [pc, #344]	; (80008e0 <test_aeabi_dsub+0x170>)
 8000788:	e9ca 6700 	strd	r6, r7, [sl]
 800078c:	e9c5 8900 	strd	r8, r9, [r5]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:89
void test_aeabi_dsub(void) {    
 8000790:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:90
x = 2205.1969;  y = 270.8886;  r = __wrap___aeabi_dsub(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , r );
 8000792:	e9da 0100 	ldrd	r0, r1, [sl]
 8000796:	e9d5 2300 	ldrd	r2, r3, [r5]
 800079a:	f004 f937 	bl	8004a0c <__wrap___aeabi_dsub>
 800079e:	4c51      	ldr	r4, [pc, #324]	; (80008e4 <test_aeabi_dsub+0x174>)
 80007a0:	f04f 0b00 	mov.w	fp, #0
 80007a4:	e9c4 0100 	strd	r0, r1, [r4]
 80007a8:	215a      	movs	r1, #90	; 0x5a
 80007aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80007ae:	e9cd b102 	strd	fp, r1, [sp, #8]
 80007b2:	a137      	add	r1, pc, #220	; (adr r1, 8000890 <test_aeabi_dsub+0x120>)
 80007b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007b8:	e9cd 2300 	strd	r2, r3, [sp]
 80007bc:	a336      	add	r3, pc, #216	; (adr r3, 8000898 <test_aeabi_dsub+0x128>)
 80007be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c2:	f004 f845 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:91
x = -2205.1969; y = 270.8886;  r = __wrap___aeabi_dsub(x, y);   TEST_ASSERT_EQUAL_DOUBLE( -2476.0855         , r );
 80007c6:	a336      	add	r3, pc, #216	; (adr r3, 80008a0 <test_aeabi_dsub+0x130>)
 80007c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007cc:	e9ca 2300 	strd	r2, r3, [sl]
 80007d0:	e9c5 8900 	strd	r8, r9, [r5]
 80007d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80007d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80007dc:	f004 f916 	bl	8004a0c <__wrap___aeabi_dsub>
 80007e0:	e9c4 0100 	strd	r0, r1, [r4]
 80007e4:	215b      	movs	r1, #91	; 0x5b
 80007e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80007ea:	e9cd b102 	strd	fp, r1, [sp, #8]
 80007ee:	a12e      	add	r1, pc, #184	; (adr r1, 80008a8 <test_aeabi_dsub+0x138>)
 80007f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007f4:	e9cd 2300 	strd	r2, r3, [sp]
 80007f8:	a32d      	add	r3, pc, #180	; (adr r3, 80008b0 <test_aeabi_dsub+0x140>)
 80007fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007fe:	f004 f827 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:92
x = 2205.1969;  y = -270.8886; r = __wrap___aeabi_dsub(x, y);   TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , r );
 8000802:	e9ca 6700 	strd	r6, r7, [sl]
 8000806:	a72c      	add	r7, pc, #176	; (adr r7, 80008b8 <test_aeabi_dsub+0x148>)
 8000808:	e9d7 6700 	ldrd	r6, r7, [r7]
 800080c:	e9c5 6700 	strd	r6, r7, [r5]
 8000810:	e9da 0100 	ldrd	r0, r1, [sl]
 8000814:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000818:	f004 f8f8 	bl	8004a0c <__wrap___aeabi_dsub>
 800081c:	e9c4 0100 	strd	r0, r1, [r4]
 8000820:	215c      	movs	r1, #92	; 0x5c
 8000822:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000826:	e9cd b102 	strd	fp, r1, [sp, #8]
 800082a:	a125      	add	r1, pc, #148	; (adr r1, 80008c0 <test_aeabi_dsub+0x150>)
 800082c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000830:	e9cd 2300 	strd	r2, r3, [sp]
 8000834:	a324      	add	r3, pc, #144	; (adr r3, 80008c8 <test_aeabi_dsub+0x158>)
 8000836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800083a:	f004 f809 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:93
x = -2205.1969; y = -270.8886; r = __wrap___aeabi_dsub(x, y);   TEST_ASSERT_EQUAL_DOUBLE( -1934.3083         , r ); 
 800083e:	a318      	add	r3, pc, #96	; (adr r3, 80008a0 <test_aeabi_dsub+0x130>)
 8000840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000844:	e9ca 2300 	strd	r2, r3, [sl]
 8000848:	e9c5 6700 	strd	r6, r7, [r5]
 800084c:	e9da 0100 	ldrd	r0, r1, [sl]
 8000850:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000854:	f004 f8da 	bl	8004a0c <__wrap___aeabi_dsub>
 8000858:	e9c4 0100 	strd	r0, r1, [r4]
 800085c:	215d      	movs	r1, #93	; 0x5d
 800085e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000862:	e9cd b102 	strd	fp, r1, [sp, #8]
 8000866:	a11a      	add	r1, pc, #104	; (adr r1, 80008d0 <test_aeabi_dsub+0x160>)
 8000868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800086c:	e9cd 2300 	strd	r2, r3, [sp]
 8000870:	a319      	add	r3, pc, #100	; (adr r3, 80008d8 <test_aeabi_dsub+0x168>)
 8000872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000876:	f003 ffeb 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:94
}
 800087a:	b005      	add	sp, #20
 800087c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000880:	d013a92a 	.word	0xd013a92a
 8000884:	40a13a64 	.word	0x40a13a64
 8000888:	b4a2339c 	.word	0xb4a2339c
 800088c:	4070ee37 	.word	0x4070ee37
 8000890:	b8e36ea1 	.word	0xb8e36ea1
 8000894:	3f5fb113 	.word	0x3f5fb113
 8000898:	b2fec56d 	.word	0xb2fec56d
 800089c:	409e393b 	.word	0x409e393b
 80008a0:	d013a92a 	.word	0xd013a92a
 80008a4:	c0a13a64 	.word	0xc0a13a64
 80008a8:	47d3c2fa 	.word	0x47d3c2fa
 80008ac:	bf6448ba 	.word	0xbf6448ba
 80008b0:	c6a7ef9e 	.word	0xc6a7ef9e
 80008b4:	c0a3582b 	.word	0xc0a3582b
 80008b8:	b4a2339c 	.word	0xb4a2339c
 80008bc:	c070ee37 	.word	0xc070ee37
 80008c0:	47d3c2fa 	.word	0x47d3c2fa
 80008c4:	3f6448ba 	.word	0x3f6448ba
 80008c8:	c6a7ef9e 	.word	0xc6a7ef9e
 80008cc:	40a3582b 	.word	0x40a3582b
 80008d0:	b8e36ea1 	.word	0xb8e36ea1
 80008d4:	bf5fb113 	.word	0xbf5fb113
 80008d8:	b2fec56d 	.word	0xb2fec56d
 80008dc:	c09e393b 	.word	0xc09e393b
 80008e0:	20000028 	.word	0x20000028
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000018 	.word	0x20000018
 80008ec:	00000000 	.word	0x00000000

080008f0 <test_aeabi_dcmpeq>:
test_aeabi_dcmpeq():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:96
void test_aeabi_dcmpeq(void) {
 80008f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:97
x = 2205.196;  y = 2205.196;  ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 80008f4:	f20f 1960 	addw	r9, pc, #352	; 0x160
 80008f8:	e9d9 8900 	ldrd	r8, r9, [r9]
 80008fc:	4e62      	ldr	r6, [pc, #392]	; (8000a88 <test_aeabi_dcmpeq+0x198>)
 80008fe:	4d63      	ldr	r5, [pc, #396]	; (8000a8c <test_aeabi_dcmpeq+0x19c>)
 8000900:	e9c6 8900 	strd	r8, r9, [r6]
 8000904:	e9c5 8900 	strd	r8, r9, [r5]
 8000908:	e9d6 0100 	ldrd	r0, r1, [r6]
 800090c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000910:	f004 f894 	bl	8004a3c <__wrap___aeabi_dcmpeq>
 8000914:	2714      	movs	r7, #20
 8000916:	4c5e      	ldr	r4, [pc, #376]	; (8000a90 <test_aeabi_dcmpeq+0x1a0>)
 8000918:	9700      	str	r7, [sp, #0]
 800091a:	6020      	str	r0, [r4, #0]
 800091c:	6821      	ldr	r1, [r4, #0]
 800091e:	2361      	movs	r3, #97	; 0x61
 8000920:	2200      	movs	r2, #0
 8000922:	2001      	movs	r0, #1
 8000924:	f003 ff3c 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:98
x = 2205.196;  y = 2205.195;  ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000928:	a34d      	add	r3, pc, #308	; (adr r3, 8000a60 <test_aeabi_dcmpeq+0x170>)
 800092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800092e:	e9c6 8900 	strd	r8, r9, [r6]
 8000932:	e9c5 2300 	strd	r2, r3, [r5]
 8000936:	e9d6 0100 	ldrd	r0, r1, [r6]
 800093a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800093e:	f004 f87d 	bl	8004a3c <__wrap___aeabi_dcmpeq>
 8000942:	2200      	movs	r2, #0
 8000944:	6020      	str	r0, [r4, #0]
 8000946:	6821      	ldr	r1, [r4, #0]
 8000948:	4610      	mov	r0, r2
 800094a:	9700      	str	r7, [sp, #0]
 800094c:	2362      	movs	r3, #98	; 0x62
 800094e:	f003 ff27 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:99
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000952:	a345      	add	r3, pc, #276	; (adr r3, 8000a68 <test_aeabi_dcmpeq+0x178>)
 8000954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000958:	e9c6 8900 	strd	r8, r9, [r6]
 800095c:	e9c5 2300 	strd	r2, r3, [r5]
 8000960:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000964:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000968:	f004 f868 	bl	8004a3c <__wrap___aeabi_dcmpeq>
 800096c:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:100
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 800096e:	f04f 0a00 	mov.w	sl, #0
 8000972:	f04f 0b00 	mov.w	fp, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:99
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000976:	6020      	str	r0, [r4, #0]
 8000978:	6821      	ldr	r1, [r4, #0]
 800097a:	4610      	mov	r0, r2
 800097c:	9700      	str	r7, [sp, #0]
 800097e:	2363      	movs	r3, #99	; 0x63
 8000980:	f003 ff0e 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:100
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000984:	e9c6 8900 	strd	r8, r9, [r6]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:101
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000988:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 800098c:	e9d9 8900 	ldrd	r8, r9, [r9]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:100
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000990:	e9c5 ab00 	strd	sl, fp, [r5]
 8000994:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800099c:	f004 f84e 	bl	8004a3c <__wrap___aeabi_dcmpeq>
 80009a0:	2200      	movs	r2, #0
 80009a2:	6020      	str	r0, [r4, #0]
 80009a4:	6821      	ldr	r1, [r4, #0]
 80009a6:	4610      	mov	r0, r2
 80009a8:	9700      	str	r7, [sp, #0]
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	f003 fef8 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:101
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 80009b0:	e9c6 8900 	strd	r8, r9, [r6]
 80009b4:	e9c5 8900 	strd	r8, r9, [r5]
 80009b8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80009bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80009c0:	f004 f83c 	bl	8004a3c <__wrap___aeabi_dcmpeq>
 80009c4:	6020      	str	r0, [r4, #0]
 80009c6:	6821      	ldr	r1, [r4, #0]
 80009c8:	9700      	str	r7, [sp, #0]
 80009ca:	2365      	movs	r3, #101	; 0x65
 80009cc:	2200      	movs	r2, #0
 80009ce:	2001      	movs	r0, #1
 80009d0:	f003 fee6 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:102
x = -2205.196; y = -2205.195; ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 80009d4:	a328      	add	r3, pc, #160	; (adr r3, 8000a78 <test_aeabi_dcmpeq+0x188>)
 80009d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009da:	e9c6 8900 	strd	r8, r9, [r6]
 80009de:	e9c5 2300 	strd	r2, r3, [r5]
 80009e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80009e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80009ea:	f004 f827 	bl	8004a3c <__wrap___aeabi_dcmpeq>
 80009ee:	2200      	movs	r2, #0
 80009f0:	6020      	str	r0, [r4, #0]
 80009f2:	6821      	ldr	r1, [r4, #0]
 80009f4:	4610      	mov	r0, r2
 80009f6:	9700      	str	r7, [sp, #0]
 80009f8:	2366      	movs	r3, #102	; 0x66
 80009fa:	f003 fed1 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:103
x = -2205.196; y = -2205.197; ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 80009fe:	a320      	add	r3, pc, #128	; (adr r3, 8000a80 <test_aeabi_dcmpeq+0x190>)
 8000a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a04:	e9c6 8900 	strd	r8, r9, [r6]
 8000a08:	e9c5 2300 	strd	r2, r3, [r5]
 8000a0c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000a10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000a14:	f004 f812 	bl	8004a3c <__wrap___aeabi_dcmpeq>
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6020      	str	r0, [r4, #0]
 8000a1c:	6821      	ldr	r1, [r4, #0]
 8000a1e:	4610      	mov	r0, r2
 8000a20:	9700      	str	r7, [sp, #0]
 8000a22:	2367      	movs	r3, #103	; 0x67
 8000a24:	f003 febc 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:104
x = -2205.196; y = 0;         ri = __wrap___aeabi_dcmpeq(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000a28:	e9c6 8900 	strd	r8, r9, [r6]
 8000a2c:	e9c5 ab00 	strd	sl, fp, [r5]
 8000a30:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000a34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000a38:	f004 f800 	bl	8004a3c <__wrap___aeabi_dcmpeq>
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6020      	str	r0, [r4, #0]
 8000a40:	6821      	ldr	r1, [r4, #0]
 8000a42:	9700      	str	r7, [sp, #0]
 8000a44:	2368      	movs	r3, #104	; 0x68
 8000a46:	4610      	mov	r0, r2
 8000a48:	f003 feaa 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:105
}
 8000a4c:	b003      	add	sp, #12
 8000a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a52:	bf00      	nop
 8000a54:	f3af 8000 	nop.w
 8000a58:	5a1cac08 	.word	0x5a1cac08
 8000a5c:	40a13a64 	.word	0x40a13a64
 8000a60:	d70a3d71 	.word	0xd70a3d71
 8000a64:	40a13a63 	.word	0x40a13a63
 8000a68:	dd2f1aa0 	.word	0xdd2f1aa0
 8000a6c:	40a13a64 	.word	0x40a13a64
 8000a70:	5a1cac08 	.word	0x5a1cac08
 8000a74:	c0a13a64 	.word	0xc0a13a64
 8000a78:	d70a3d71 	.word	0xd70a3d71
 8000a7c:	c0a13a63 	.word	0xc0a13a63
 8000a80:	dd2f1aa0 	.word	0xdd2f1aa0
 8000a84:	c0a13a64 	.word	0xc0a13a64
 8000a88:	20000018 	.word	0x20000018
 8000a8c:	20000028 	.word	0x20000028
 8000a90:	2000000c 	.word	0x2000000c
 8000a94:	00000000 	.word	0x00000000

08000a98 <test_aeabi_dcmplt>:
test_aeabi_dcmplt():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:107
void test_aeabi_dcmplt(void) {
 8000a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:108
x = 2205.196;  y = 2205.196;  ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000a9c:	f20f 1960 	addw	r9, pc, #352	; 0x160
 8000aa0:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000aa4:	4e62      	ldr	r6, [pc, #392]	; (8000c30 <test_aeabi_dcmplt+0x198>)
 8000aa6:	4d63      	ldr	r5, [pc, #396]	; (8000c34 <test_aeabi_dcmplt+0x19c>)
 8000aa8:	e9c6 8900 	strd	r8, r9, [r6]
 8000aac:	e9c5 8900 	strd	r8, r9, [r5]
 8000ab0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000ab4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000ab8:	f003 ffda 	bl	8004a70 <__wrap___aeabi_dcmplt>
 8000abc:	2714      	movs	r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4c5d      	ldr	r4, [pc, #372]	; (8000c38 <test_aeabi_dcmplt+0x1a0>)
 8000ac2:	9700      	str	r7, [sp, #0]
 8000ac4:	6020      	str	r0, [r4, #0]
 8000ac6:	6821      	ldr	r1, [r4, #0]
 8000ac8:	4610      	mov	r0, r2
 8000aca:	236c      	movs	r3, #108	; 0x6c
 8000acc:	f003 fe68 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:109
x = 2205.196;  y = 2205.195;  ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000ad0:	a34d      	add	r3, pc, #308	; (adr r3, 8000c08 <test_aeabi_dcmplt+0x170>)
 8000ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad6:	e9c6 8900 	strd	r8, r9, [r6]
 8000ada:	e9c5 2300 	strd	r2, r3, [r5]
 8000ade:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000ae2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000ae6:	f003 ffc3 	bl	8004a70 <__wrap___aeabi_dcmplt>
 8000aea:	2200      	movs	r2, #0
 8000aec:	6020      	str	r0, [r4, #0]
 8000aee:	6821      	ldr	r1, [r4, #0]
 8000af0:	4610      	mov	r0, r2
 8000af2:	9700      	str	r7, [sp, #0]
 8000af4:	236d      	movs	r3, #109	; 0x6d
 8000af6:	f003 fe53 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:110
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000afa:	a345      	add	r3, pc, #276	; (adr r3, 8000c10 <test_aeabi_dcmplt+0x178>)
 8000afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b00:	e9c6 8900 	strd	r8, r9, [r6]
 8000b04:	e9c5 2300 	strd	r2, r3, [r5]
 8000b08:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000b0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000b10:	f003 ffae 	bl	8004a70 <__wrap___aeabi_dcmplt>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:111
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000b14:	f04f 0a00 	mov.w	sl, #0
 8000b18:	f04f 0b00 	mov.w	fp, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:110
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000b1c:	6020      	str	r0, [r4, #0]
 8000b1e:	6821      	ldr	r1, [r4, #0]
 8000b20:	9700      	str	r7, [sp, #0]
 8000b22:	236e      	movs	r3, #110	; 0x6e
 8000b24:	2200      	movs	r2, #0
 8000b26:	2001      	movs	r0, #1
 8000b28:	f003 fe3a 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:111
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000b2c:	e9c6 8900 	strd	r8, r9, [r6]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:112
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000b30:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 8000b34:	e9d9 8900 	ldrd	r8, r9, [r9]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:111
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000b38:	e9c5 ab00 	strd	sl, fp, [r5]
 8000b3c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000b44:	f003 ff94 	bl	8004a70 <__wrap___aeabi_dcmplt>
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6020      	str	r0, [r4, #0]
 8000b4c:	6821      	ldr	r1, [r4, #0]
 8000b4e:	4610      	mov	r0, r2
 8000b50:	9700      	str	r7, [sp, #0]
 8000b52:	236f      	movs	r3, #111	; 0x6f
 8000b54:	f003 fe24 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:112
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000b58:	e9c6 8900 	strd	r8, r9, [r6]
 8000b5c:	e9c5 8900 	strd	r8, r9, [r5]
 8000b60:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000b64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000b68:	f003 ff82 	bl	8004a70 <__wrap___aeabi_dcmplt>
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6020      	str	r0, [r4, #0]
 8000b70:	6821      	ldr	r1, [r4, #0]
 8000b72:	4610      	mov	r0, r2
 8000b74:	9700      	str	r7, [sp, #0]
 8000b76:	2370      	movs	r3, #112	; 0x70
 8000b78:	f003 fe12 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:113
x = -2205.196; y = -2205.195; ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000b7c:	a328      	add	r3, pc, #160	; (adr r3, 8000c20 <test_aeabi_dcmplt+0x188>)
 8000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b82:	e9c6 8900 	strd	r8, r9, [r6]
 8000b86:	e9c5 2300 	strd	r2, r3, [r5]
 8000b8a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000b8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000b92:	f003 ff6d 	bl	8004a70 <__wrap___aeabi_dcmplt>
 8000b96:	6020      	str	r0, [r4, #0]
 8000b98:	6821      	ldr	r1, [r4, #0]
 8000b9a:	9700      	str	r7, [sp, #0]
 8000b9c:	2371      	movs	r3, #113	; 0x71
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f003 fdfd 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:114
x = -2205.196; y = -2205.197; ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000ba6:	a320      	add	r3, pc, #128	; (adr r3, 8000c28 <test_aeabi_dcmplt+0x190>)
 8000ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bac:	e9c6 8900 	strd	r8, r9, [r6]
 8000bb0:	e9c5 2300 	strd	r2, r3, [r5]
 8000bb4:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000bb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000bbc:	f003 ff58 	bl	8004a70 <__wrap___aeabi_dcmplt>
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6020      	str	r0, [r4, #0]
 8000bc4:	6821      	ldr	r1, [r4, #0]
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	9700      	str	r7, [sp, #0]
 8000bca:	2372      	movs	r3, #114	; 0x72
 8000bcc:	f003 fde8 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:115
x = -2205.196; y = 0;         ri = __wrap___aeabi_dcmplt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000bd0:	e9c6 8900 	strd	r8, r9, [r6]
 8000bd4:	e9c5 ab00 	strd	sl, fp, [r5]
 8000bd8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000bdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000be0:	f003 ff46 	bl	8004a70 <__wrap___aeabi_dcmplt>
 8000be4:	6020      	str	r0, [r4, #0]
 8000be6:	6821      	ldr	r1, [r4, #0]
 8000be8:	9700      	str	r7, [sp, #0]
 8000bea:	2373      	movs	r3, #115	; 0x73
 8000bec:	2200      	movs	r2, #0
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f003 fdd6 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:116
}
 8000bf4:	b003      	add	sp, #12
 8000bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfa:	bf00      	nop
 8000bfc:	f3af 8000 	nop.w
 8000c00:	5a1cac08 	.word	0x5a1cac08
 8000c04:	40a13a64 	.word	0x40a13a64
 8000c08:	d70a3d71 	.word	0xd70a3d71
 8000c0c:	40a13a63 	.word	0x40a13a63
 8000c10:	dd2f1aa0 	.word	0xdd2f1aa0
 8000c14:	40a13a64 	.word	0x40a13a64
 8000c18:	5a1cac08 	.word	0x5a1cac08
 8000c1c:	c0a13a64 	.word	0xc0a13a64
 8000c20:	d70a3d71 	.word	0xd70a3d71
 8000c24:	c0a13a63 	.word	0xc0a13a63
 8000c28:	dd2f1aa0 	.word	0xdd2f1aa0
 8000c2c:	c0a13a64 	.word	0xc0a13a64
 8000c30:	20000018 	.word	0x20000018
 8000c34:	20000028 	.word	0x20000028
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	00000000 	.word	0x00000000

08000c40 <test_aeabi_dcmple>:
test_aeabi_dcmple():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:118
void test_aeabi_dcmple(void) {
 8000c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:119
x = 2205.196;  y = 2205.196;  ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000c44:	f20f 1960 	addw	r9, pc, #352	; 0x160
 8000c48:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000c4c:	4e62      	ldr	r6, [pc, #392]	; (8000dd8 <test_aeabi_dcmple+0x198>)
 8000c4e:	4d63      	ldr	r5, [pc, #396]	; (8000ddc <test_aeabi_dcmple+0x19c>)
 8000c50:	e9c6 8900 	strd	r8, r9, [r6]
 8000c54:	e9c5 8900 	strd	r8, r9, [r5]
 8000c58:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000c5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000c60:	f003 ff1e 	bl	8004aa0 <__wrap___aeabi_dcmple>
 8000c64:	2714      	movs	r7, #20
 8000c66:	4c5e      	ldr	r4, [pc, #376]	; (8000de0 <test_aeabi_dcmple+0x1a0>)
 8000c68:	9700      	str	r7, [sp, #0]
 8000c6a:	6020      	str	r0, [r4, #0]
 8000c6c:	6821      	ldr	r1, [r4, #0]
 8000c6e:	2377      	movs	r3, #119	; 0x77
 8000c70:	2200      	movs	r2, #0
 8000c72:	2001      	movs	r0, #1
 8000c74:	f003 fd94 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:120
x = 2205.196;  y = 2205.195;  ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000c78:	a34d      	add	r3, pc, #308	; (adr r3, 8000db0 <test_aeabi_dcmple+0x170>)
 8000c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7e:	e9c6 8900 	strd	r8, r9, [r6]
 8000c82:	e9c5 2300 	strd	r2, r3, [r5]
 8000c86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000c8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000c8e:	f003 ff07 	bl	8004aa0 <__wrap___aeabi_dcmple>
 8000c92:	2200      	movs	r2, #0
 8000c94:	6020      	str	r0, [r4, #0]
 8000c96:	6821      	ldr	r1, [r4, #0]
 8000c98:	4610      	mov	r0, r2
 8000c9a:	9700      	str	r7, [sp, #0]
 8000c9c:	2378      	movs	r3, #120	; 0x78
 8000c9e:	f003 fd7f 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:121
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000ca2:	a345      	add	r3, pc, #276	; (adr r3, 8000db8 <test_aeabi_dcmple+0x178>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	e9c6 8900 	strd	r8, r9, [r6]
 8000cac:	e9c5 2300 	strd	r2, r3, [r5]
 8000cb0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000cb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000cb8:	f003 fef2 	bl	8004aa0 <__wrap___aeabi_dcmple>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:122
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000cbc:	f04f 0a00 	mov.w	sl, #0
 8000cc0:	f04f 0b00 	mov.w	fp, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:121
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000cc4:	6020      	str	r0, [r4, #0]
 8000cc6:	6821      	ldr	r1, [r4, #0]
 8000cc8:	9700      	str	r7, [sp, #0]
 8000cca:	2379      	movs	r3, #121	; 0x79
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f003 fd66 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:122
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000cd4:	e9c6 8900 	strd	r8, r9, [r6]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:123
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000cd8:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 8000cdc:	e9d9 8900 	ldrd	r8, r9, [r9]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:122
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000ce0:	e9c5 ab00 	strd	sl, fp, [r5]
 8000ce4:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000ce8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000cec:	f003 fed8 	bl	8004aa0 <__wrap___aeabi_dcmple>
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6020      	str	r0, [r4, #0]
 8000cf4:	6821      	ldr	r1, [r4, #0]
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	9700      	str	r7, [sp, #0]
 8000cfa:	237a      	movs	r3, #122	; 0x7a
 8000cfc:	f003 fd50 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:123
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000d00:	e9c6 8900 	strd	r8, r9, [r6]
 8000d04:	e9c5 8900 	strd	r8, r9, [r5]
 8000d08:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000d0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000d10:	f003 fec6 	bl	8004aa0 <__wrap___aeabi_dcmple>
 8000d14:	6020      	str	r0, [r4, #0]
 8000d16:	6821      	ldr	r1, [r4, #0]
 8000d18:	9700      	str	r7, [sp, #0]
 8000d1a:	237b      	movs	r3, #123	; 0x7b
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f003 fd3e 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:124
x = -2205.196; y = -2205.195; ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000d24:	a328      	add	r3, pc, #160	; (adr r3, 8000dc8 <test_aeabi_dcmple+0x188>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	e9c6 8900 	strd	r8, r9, [r6]
 8000d2e:	e9c5 2300 	strd	r2, r3, [r5]
 8000d32:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000d36:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000d3a:	f003 feb1 	bl	8004aa0 <__wrap___aeabi_dcmple>
 8000d3e:	6020      	str	r0, [r4, #0]
 8000d40:	6821      	ldr	r1, [r4, #0]
 8000d42:	9700      	str	r7, [sp, #0]
 8000d44:	237c      	movs	r3, #124	; 0x7c
 8000d46:	2200      	movs	r2, #0
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f003 fd29 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:125
x = -2205.196; y = -2205.197; ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000d4e:	a320      	add	r3, pc, #128	; (adr r3, 8000dd0 <test_aeabi_dcmple+0x190>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	e9c6 8900 	strd	r8, r9, [r6]
 8000d58:	e9c5 2300 	strd	r2, r3, [r5]
 8000d5c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000d60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000d64:	f003 fe9c 	bl	8004aa0 <__wrap___aeabi_dcmple>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6020      	str	r0, [r4, #0]
 8000d6c:	6821      	ldr	r1, [r4, #0]
 8000d6e:	4610      	mov	r0, r2
 8000d70:	9700      	str	r7, [sp, #0]
 8000d72:	237d      	movs	r3, #125	; 0x7d
 8000d74:	f003 fd14 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:126
x = -2205.196; y = 0;         ri = __wrap___aeabi_dcmple(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000d78:	e9c6 8900 	strd	r8, r9, [r6]
 8000d7c:	e9c5 ab00 	strd	sl, fp, [r5]
 8000d80:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000d84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000d88:	f003 fe8a 	bl	8004aa0 <__wrap___aeabi_dcmple>
 8000d8c:	6020      	str	r0, [r4, #0]
 8000d8e:	6821      	ldr	r1, [r4, #0]
 8000d90:	9700      	str	r7, [sp, #0]
 8000d92:	237e      	movs	r3, #126	; 0x7e
 8000d94:	2200      	movs	r2, #0
 8000d96:	2001      	movs	r0, #1
 8000d98:	f003 fd02 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:127
}
 8000d9c:	b003      	add	sp, #12
 8000d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000da2:	bf00      	nop
 8000da4:	f3af 8000 	nop.w
 8000da8:	5a1cac08 	.word	0x5a1cac08
 8000dac:	40a13a64 	.word	0x40a13a64
 8000db0:	d70a3d71 	.word	0xd70a3d71
 8000db4:	40a13a63 	.word	0x40a13a63
 8000db8:	dd2f1aa0 	.word	0xdd2f1aa0
 8000dbc:	40a13a64 	.word	0x40a13a64
 8000dc0:	5a1cac08 	.word	0x5a1cac08
 8000dc4:	c0a13a64 	.word	0xc0a13a64
 8000dc8:	d70a3d71 	.word	0xd70a3d71
 8000dcc:	c0a13a63 	.word	0xc0a13a63
 8000dd0:	dd2f1aa0 	.word	0xdd2f1aa0
 8000dd4:	c0a13a64 	.word	0xc0a13a64
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	20000028 	.word	0x20000028
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	00000000 	.word	0x00000000

08000de8 <test_aeabi_dcmpge>:
test_aeabi_dcmpge():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:129
void test_aeabi_dcmpge(void) {
 8000de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:130
x = 2205.196;  y = 2205.196;  ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000dec:	f20f 1960 	addw	r9, pc, #352	; 0x160
 8000df0:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000df4:	4e62      	ldr	r6, [pc, #392]	; (8000f80 <test_aeabi_dcmpge+0x198>)
 8000df6:	4d63      	ldr	r5, [pc, #396]	; (8000f84 <test_aeabi_dcmpge+0x19c>)
 8000df8:	e9c6 8900 	strd	r8, r9, [r6]
 8000dfc:	e9c5 8900 	strd	r8, r9, [r5]
 8000e00:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000e04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000e08:	f003 fe64 	bl	8004ad4 <__wrap___aeabi_dcmpge>
 8000e0c:	2714      	movs	r7, #20
 8000e0e:	4c5e      	ldr	r4, [pc, #376]	; (8000f88 <test_aeabi_dcmpge+0x1a0>)
 8000e10:	9700      	str	r7, [sp, #0]
 8000e12:	6020      	str	r0, [r4, #0]
 8000e14:	6821      	ldr	r1, [r4, #0]
 8000e16:	2382      	movs	r3, #130	; 0x82
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f003 fcc0 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:131
x = 2205.196;  y = 2205.195;  ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000e20:	a34d      	add	r3, pc, #308	; (adr r3, 8000f58 <test_aeabi_dcmpge+0x170>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	e9c6 8900 	strd	r8, r9, [r6]
 8000e2a:	e9c5 2300 	strd	r2, r3, [r5]
 8000e2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000e32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000e36:	f003 fe4d 	bl	8004ad4 <__wrap___aeabi_dcmpge>
 8000e3a:	6020      	str	r0, [r4, #0]
 8000e3c:	6821      	ldr	r1, [r4, #0]
 8000e3e:	9700      	str	r7, [sp, #0]
 8000e40:	2383      	movs	r3, #131	; 0x83
 8000e42:	2200      	movs	r2, #0
 8000e44:	2001      	movs	r0, #1
 8000e46:	f003 fcab 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:132
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000e4a:	a345      	add	r3, pc, #276	; (adr r3, 8000f60 <test_aeabi_dcmpge+0x178>)
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	e9c6 8900 	strd	r8, r9, [r6]
 8000e54:	e9c5 2300 	strd	r2, r3, [r5]
 8000e58:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000e5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000e60:	f003 fe38 	bl	8004ad4 <__wrap___aeabi_dcmpge>
 8000e64:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:133
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000e66:	f04f 0a00 	mov.w	sl, #0
 8000e6a:	f04f 0b00 	mov.w	fp, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:132
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000e6e:	6020      	str	r0, [r4, #0]
 8000e70:	6821      	ldr	r1, [r4, #0]
 8000e72:	4610      	mov	r0, r2
 8000e74:	9700      	str	r7, [sp, #0]
 8000e76:	2384      	movs	r3, #132	; 0x84
 8000e78:	f003 fc92 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:133
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000e7c:	e9c6 8900 	strd	r8, r9, [r6]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:134
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000e80:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 8000e84:	e9d9 8900 	ldrd	r8, r9, [r9]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:133
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000e88:	e9c5 ab00 	strd	sl, fp, [r5]
 8000e8c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000e90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000e94:	f003 fe1e 	bl	8004ad4 <__wrap___aeabi_dcmpge>
 8000e98:	6020      	str	r0, [r4, #0]
 8000e9a:	6821      	ldr	r1, [r4, #0]
 8000e9c:	9700      	str	r7, [sp, #0]
 8000e9e:	2385      	movs	r3, #133	; 0x85
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f003 fc7c 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:134
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000ea8:	e9c6 8900 	strd	r8, r9, [r6]
 8000eac:	e9c5 8900 	strd	r8, r9, [r5]
 8000eb0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000eb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000eb8:	f003 fe0c 	bl	8004ad4 <__wrap___aeabi_dcmpge>
 8000ebc:	6020      	str	r0, [r4, #0]
 8000ebe:	6821      	ldr	r1, [r4, #0]
 8000ec0:	9700      	str	r7, [sp, #0]
 8000ec2:	2386      	movs	r3, #134	; 0x86
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f003 fc6a 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:135
x = -2205.196; y = -2205.195; ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000ecc:	a328      	add	r3, pc, #160	; (adr r3, 8000f70 <test_aeabi_dcmpge+0x188>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	e9c6 8900 	strd	r8, r9, [r6]
 8000ed6:	e9c5 2300 	strd	r2, r3, [r5]
 8000eda:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000ede:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000ee2:	f003 fdf7 	bl	8004ad4 <__wrap___aeabi_dcmpge>
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	6020      	str	r0, [r4, #0]
 8000eea:	6821      	ldr	r1, [r4, #0]
 8000eec:	4610      	mov	r0, r2
 8000eee:	9700      	str	r7, [sp, #0]
 8000ef0:	2387      	movs	r3, #135	; 0x87
 8000ef2:	f003 fc55 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:136
x = -2205.196; y = -2205.197; ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000ef6:	a320      	add	r3, pc, #128	; (adr r3, 8000f78 <test_aeabi_dcmpge+0x190>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	e9c6 8900 	strd	r8, r9, [r6]
 8000f00:	e9c5 2300 	strd	r2, r3, [r5]
 8000f04:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000f0c:	f003 fde2 	bl	8004ad4 <__wrap___aeabi_dcmpge>
 8000f10:	6020      	str	r0, [r4, #0]
 8000f12:	6821      	ldr	r1, [r4, #0]
 8000f14:	9700      	str	r7, [sp, #0]
 8000f16:	2388      	movs	r3, #136	; 0x88
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f003 fc40 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:137
x = -2205.196; y = 0;         ri = __wrap___aeabi_dcmpge(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000f20:	e9c6 8900 	strd	r8, r9, [r6]
 8000f24:	e9c5 ab00 	strd	sl, fp, [r5]
 8000f28:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000f2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000f30:	f003 fdd0 	bl	8004ad4 <__wrap___aeabi_dcmpge>
 8000f34:	2200      	movs	r2, #0
 8000f36:	6020      	str	r0, [r4, #0]
 8000f38:	6821      	ldr	r1, [r4, #0]
 8000f3a:	9700      	str	r7, [sp, #0]
 8000f3c:	2389      	movs	r3, #137	; 0x89
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f003 fc2e 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:138
}
 8000f44:	b003      	add	sp, #12
 8000f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f4a:	bf00      	nop
 8000f4c:	f3af 8000 	nop.w
 8000f50:	5a1cac08 	.word	0x5a1cac08
 8000f54:	40a13a64 	.word	0x40a13a64
 8000f58:	d70a3d71 	.word	0xd70a3d71
 8000f5c:	40a13a63 	.word	0x40a13a63
 8000f60:	dd2f1aa0 	.word	0xdd2f1aa0
 8000f64:	40a13a64 	.word	0x40a13a64
 8000f68:	5a1cac08 	.word	0x5a1cac08
 8000f6c:	c0a13a64 	.word	0xc0a13a64
 8000f70:	d70a3d71 	.word	0xd70a3d71
 8000f74:	c0a13a63 	.word	0xc0a13a63
 8000f78:	dd2f1aa0 	.word	0xdd2f1aa0
 8000f7c:	c0a13a64 	.word	0xc0a13a64
 8000f80:	20000018 	.word	0x20000018
 8000f84:	20000028 	.word	0x20000028
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	00000000 	.word	0x00000000

08000f90 <test_aeabi_dcmpgt>:
test_aeabi_dcmpgt():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:140
void test_aeabi_dcmpgt(void) {
 8000f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:141
x = 2205.196;  y = 2205.196;  ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000f94:	f20f 1960 	addw	r9, pc, #352	; 0x160
 8000f98:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000f9c:	4e62      	ldr	r6, [pc, #392]	; (8001128 <test_aeabi_dcmpgt+0x198>)
 8000f9e:	4d63      	ldr	r5, [pc, #396]	; (800112c <test_aeabi_dcmpgt+0x19c>)
 8000fa0:	e9c6 8900 	strd	r8, r9, [r6]
 8000fa4:	e9c5 8900 	strd	r8, r9, [r5]
 8000fa8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000fac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000fb0:	f003 fda8 	bl	8004b04 <__wrap___aeabi_dcmpgt>
 8000fb4:	2714      	movs	r7, #20
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4c5d      	ldr	r4, [pc, #372]	; (8001130 <test_aeabi_dcmpgt+0x1a0>)
 8000fba:	9700      	str	r7, [sp, #0]
 8000fbc:	6020      	str	r0, [r4, #0]
 8000fbe:	6821      	ldr	r1, [r4, #0]
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	238d      	movs	r3, #141	; 0x8d
 8000fc4:	f003 fbec 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:142
x = 2205.196;  y = 2205.195;  ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8000fc8:	a34d      	add	r3, pc, #308	; (adr r3, 8001100 <test_aeabi_dcmpgt+0x170>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	e9c6 8900 	strd	r8, r9, [r6]
 8000fd2:	e9c5 2300 	strd	r2, r3, [r5]
 8000fd6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000fda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000fde:	f003 fd91 	bl	8004b04 <__wrap___aeabi_dcmpgt>
 8000fe2:	6020      	str	r0, [r4, #0]
 8000fe4:	6821      	ldr	r1, [r4, #0]
 8000fe6:	9700      	str	r7, [sp, #0]
 8000fe8:	238e      	movs	r3, #142	; 0x8e
 8000fea:	2200      	movs	r2, #0
 8000fec:	2001      	movs	r0, #1
 8000fee:	f003 fbd7 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:143
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8000ff2:	a345      	add	r3, pc, #276	; (adr r3, 8001108 <test_aeabi_dcmpgt+0x178>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	e9c6 8900 	strd	r8, r9, [r6]
 8000ffc:	e9c5 2300 	strd	r2, r3, [r5]
 8001000:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001004:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001008:	f003 fd7c 	bl	8004b04 <__wrap___aeabi_dcmpgt>
 800100c:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:144
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 800100e:	f04f 0a00 	mov.w	sl, #0
 8001012:	f04f 0b00 	mov.w	fp, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:143
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8001016:	6020      	str	r0, [r4, #0]
 8001018:	6821      	ldr	r1, [r4, #0]
 800101a:	4610      	mov	r0, r2
 800101c:	9700      	str	r7, [sp, #0]
 800101e:	238f      	movs	r3, #143	; 0x8f
 8001020:	f003 fbbe 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:144
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8001024:	e9c6 8900 	strd	r8, r9, [r6]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:145
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8001028:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 800102c:	e9d9 8900 	ldrd	r8, r9, [r9]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:144
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8001030:	e9c5 ab00 	strd	sl, fp, [r5]
 8001034:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001038:	e9d5 2300 	ldrd	r2, r3, [r5]
 800103c:	f003 fd62 	bl	8004b04 <__wrap___aeabi_dcmpgt>
 8001040:	6020      	str	r0, [r4, #0]
 8001042:	6821      	ldr	r1, [r4, #0]
 8001044:	9700      	str	r7, [sp, #0]
 8001046:	2390      	movs	r3, #144	; 0x90
 8001048:	2200      	movs	r2, #0
 800104a:	2001      	movs	r0, #1
 800104c:	f003 fba8 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:145
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8001050:	e9c6 8900 	strd	r8, r9, [r6]
 8001054:	e9c5 8900 	strd	r8, r9, [r5]
 8001058:	e9d6 0100 	ldrd	r0, r1, [r6]
 800105c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001060:	f003 fd50 	bl	8004b04 <__wrap___aeabi_dcmpgt>
 8001064:	2200      	movs	r2, #0
 8001066:	6020      	str	r0, [r4, #0]
 8001068:	6821      	ldr	r1, [r4, #0]
 800106a:	4610      	mov	r0, r2
 800106c:	9700      	str	r7, [sp, #0]
 800106e:	2391      	movs	r3, #145	; 0x91
 8001070:	f003 fb96 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:146
x = -2205.196; y = -2205.195; ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 8001074:	a328      	add	r3, pc, #160	; (adr r3, 8001118 <test_aeabi_dcmpgt+0x188>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	e9c6 8900 	strd	r8, r9, [r6]
 800107e:	e9c5 2300 	strd	r2, r3, [r5]
 8001082:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001086:	e9d5 2300 	ldrd	r2, r3, [r5]
 800108a:	f003 fd3b 	bl	8004b04 <__wrap___aeabi_dcmpgt>
 800108e:	2200      	movs	r2, #0
 8001090:	6020      	str	r0, [r4, #0]
 8001092:	6821      	ldr	r1, [r4, #0]
 8001094:	4610      	mov	r0, r2
 8001096:	9700      	str	r7, [sp, #0]
 8001098:	2392      	movs	r3, #146	; 0x92
 800109a:	f003 fb81 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:147
x = -2205.196; y = -2205.197; ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 800109e:	a320      	add	r3, pc, #128	; (adr r3, 8001120 <test_aeabi_dcmpgt+0x190>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	e9c6 8900 	strd	r8, r9, [r6]
 80010a8:	e9c5 2300 	strd	r2, r3, [r5]
 80010ac:	e9d6 0100 	ldrd	r0, r1, [r6]
 80010b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80010b4:	f003 fd26 	bl	8004b04 <__wrap___aeabi_dcmpgt>
 80010b8:	6020      	str	r0, [r4, #0]
 80010ba:	6821      	ldr	r1, [r4, #0]
 80010bc:	9700      	str	r7, [sp, #0]
 80010be:	2393      	movs	r3, #147	; 0x93
 80010c0:	2200      	movs	r2, #0
 80010c2:	2001      	movs	r0, #1
 80010c4:	f003 fb6c 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:148
x = -2205.196; y = 0;         ri = __wrap___aeabi_dcmpgt(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 80010c8:	e9c6 8900 	strd	r8, r9, [r6]
 80010cc:	e9c5 ab00 	strd	sl, fp, [r5]
 80010d0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80010d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80010d8:	f003 fd14 	bl	8004b04 <__wrap___aeabi_dcmpgt>
 80010dc:	2200      	movs	r2, #0
 80010de:	6020      	str	r0, [r4, #0]
 80010e0:	6821      	ldr	r1, [r4, #0]
 80010e2:	9700      	str	r7, [sp, #0]
 80010e4:	2394      	movs	r3, #148	; 0x94
 80010e6:	4610      	mov	r0, r2
 80010e8:	f003 fb5a 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:149
}
 80010ec:	b003      	add	sp, #12
 80010ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010f2:	bf00      	nop
 80010f4:	f3af 8000 	nop.w
 80010f8:	5a1cac08 	.word	0x5a1cac08
 80010fc:	40a13a64 	.word	0x40a13a64
 8001100:	d70a3d71 	.word	0xd70a3d71
 8001104:	40a13a63 	.word	0x40a13a63
 8001108:	dd2f1aa0 	.word	0xdd2f1aa0
 800110c:	40a13a64 	.word	0x40a13a64
 8001110:	5a1cac08 	.word	0x5a1cac08
 8001114:	c0a13a64 	.word	0xc0a13a64
 8001118:	d70a3d71 	.word	0xd70a3d71
 800111c:	c0a13a63 	.word	0xc0a13a63
 8001120:	dd2f1aa0 	.word	0xdd2f1aa0
 8001124:	c0a13a64 	.word	0xc0a13a64
 8001128:	20000018 	.word	0x20000018
 800112c:	20000028 	.word	0x20000028
 8001130:	2000000c 	.word	0x2000000c
 8001134:	00000000 	.word	0x00000000

08001138 <test_aeabi_dcmpun>:
test_aeabi_dcmpun():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:151
void test_aeabi_dcmpun(void) {
 8001138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:152
x = 2205.196;  y = 2205.196;  ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 800113c:	f20f 1960 	addw	r9, pc, #352	; 0x160
 8001140:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001144:	4e62      	ldr	r6, [pc, #392]	; (80012d0 <test_aeabi_dcmpun+0x198>)
 8001146:	4d63      	ldr	r5, [pc, #396]	; (80012d4 <test_aeabi_dcmpun+0x19c>)
 8001148:	e9c6 8900 	strd	r8, r9, [r6]
 800114c:	e9c5 8900 	strd	r8, r9, [r5]
 8001150:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001154:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001158:	f003 fcee 	bl	8004b38 <__wrap___aeabi_dcmpun>
 800115c:	2714      	movs	r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	4c5d      	ldr	r4, [pc, #372]	; (80012d8 <test_aeabi_dcmpun+0x1a0>)
 8001162:	9700      	str	r7, [sp, #0]
 8001164:	6020      	str	r0, [r4, #0]
 8001166:	6821      	ldr	r1, [r4, #0]
 8001168:	4610      	mov	r0, r2
 800116a:	2398      	movs	r3, #152	; 0x98
 800116c:	f003 fb18 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:153
x = 2205.196;  y = 2205.195;  ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8001170:	a34d      	add	r3, pc, #308	; (adr r3, 80012a8 <test_aeabi_dcmpun+0x170>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	e9c6 8900 	strd	r8, r9, [r6]
 800117a:	e9c5 2300 	strd	r2, r3, [r5]
 800117e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001182:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001186:	f003 fcd7 	bl	8004b38 <__wrap___aeabi_dcmpun>
 800118a:	6020      	str	r0, [r4, #0]
 800118c:	6821      	ldr	r1, [r4, #0]
 800118e:	9700      	str	r7, [sp, #0]
 8001190:	2399      	movs	r3, #153	; 0x99
 8001192:	2200      	movs	r2, #0
 8001194:	2001      	movs	r0, #1
 8001196:	f003 fb03 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:154
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 800119a:	a345      	add	r3, pc, #276	; (adr r3, 80012b0 <test_aeabi_dcmpun+0x178>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	e9c6 8900 	strd	r8, r9, [r6]
 80011a4:	e9c5 2300 	strd	r2, r3, [r5]
 80011a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80011ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80011b0:	f003 fcc2 	bl	8004b38 <__wrap___aeabi_dcmpun>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:155
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 80011b4:	f04f 0a00 	mov.w	sl, #0
 80011b8:	f04f 0b00 	mov.w	fp, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:154
x = 2205.196;  y = 2205.197;  ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 80011bc:	6020      	str	r0, [r4, #0]
 80011be:	6821      	ldr	r1, [r4, #0]
 80011c0:	9700      	str	r7, [sp, #0]
 80011c2:	239a      	movs	r3, #154	; 0x9a
 80011c4:	2200      	movs	r2, #0
 80011c6:	2001      	movs	r0, #1
 80011c8:	f003 faea 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:155
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 80011cc:	e9c6 8900 	strd	r8, r9, [r6]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:156
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 80011d0:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 80011d4:	e9d9 8900 	ldrd	r8, r9, [r9]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:155
x = 2205.196;  y = 0;         ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 80011d8:	e9c5 ab00 	strd	sl, fp, [r5]
 80011dc:	e9d6 0100 	ldrd	r0, r1, [r6]
 80011e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80011e4:	f003 fca8 	bl	8004b38 <__wrap___aeabi_dcmpun>
 80011e8:	6020      	str	r0, [r4, #0]
 80011ea:	6821      	ldr	r1, [r4, #0]
 80011ec:	9700      	str	r7, [sp, #0]
 80011ee:	239b      	movs	r3, #155	; 0x9b
 80011f0:	2200      	movs	r2, #0
 80011f2:	2001      	movs	r0, #1
 80011f4:	f003 fad4 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:156
x = -2205.196; y = -2205.196; ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 0                  , ri );
 80011f8:	e9c6 8900 	strd	r8, r9, [r6]
 80011fc:	e9c5 8900 	strd	r8, r9, [r5]
 8001200:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001204:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001208:	f003 fc96 	bl	8004b38 <__wrap___aeabi_dcmpun>
 800120c:	2200      	movs	r2, #0
 800120e:	6020      	str	r0, [r4, #0]
 8001210:	6821      	ldr	r1, [r4, #0]
 8001212:	4610      	mov	r0, r2
 8001214:	9700      	str	r7, [sp, #0]
 8001216:	239c      	movs	r3, #156	; 0x9c
 8001218:	f003 fac2 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:157
x = -2205.196; y = -2205.195; ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 800121c:	a328      	add	r3, pc, #160	; (adr r3, 80012c0 <test_aeabi_dcmpun+0x188>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	e9c6 8900 	strd	r8, r9, [r6]
 8001226:	e9c5 2300 	strd	r2, r3, [r5]
 800122a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800122e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001232:	f003 fc81 	bl	8004b38 <__wrap___aeabi_dcmpun>
 8001236:	6020      	str	r0, [r4, #0]
 8001238:	6821      	ldr	r1, [r4, #0]
 800123a:	9700      	str	r7, [sp, #0]
 800123c:	239d      	movs	r3, #157	; 0x9d
 800123e:	2200      	movs	r2, #0
 8001240:	2001      	movs	r0, #1
 8001242:	f003 faad 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:158
x = -2205.196; y = -2205.197; ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8001246:	a320      	add	r3, pc, #128	; (adr r3, 80012c8 <test_aeabi_dcmpun+0x190>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	e9c6 8900 	strd	r8, r9, [r6]
 8001250:	e9c5 2300 	strd	r2, r3, [r5]
 8001254:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001258:	e9d5 2300 	ldrd	r2, r3, [r5]
 800125c:	f003 fc6c 	bl	8004b38 <__wrap___aeabi_dcmpun>
 8001260:	6020      	str	r0, [r4, #0]
 8001262:	6821      	ldr	r1, [r4, #0]
 8001264:	9700      	str	r7, [sp, #0]
 8001266:	239e      	movs	r3, #158	; 0x9e
 8001268:	2200      	movs	r2, #0
 800126a:	2001      	movs	r0, #1
 800126c:	f003 fa98 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:159
x = -2205.196; y = 0;         ri = __wrap___aeabi_dcmpun(x, y); TEST_ASSERT_EQUAL_INT( 1                  , ri );
 8001270:	e9c6 8900 	strd	r8, r9, [r6]
 8001274:	e9c5 ab00 	strd	sl, fp, [r5]
 8001278:	e9d6 0100 	ldrd	r0, r1, [r6]
 800127c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001280:	f003 fc5a 	bl	8004b38 <__wrap___aeabi_dcmpun>
 8001284:	6020      	str	r0, [r4, #0]
 8001286:	6821      	ldr	r1, [r4, #0]
 8001288:	9700      	str	r7, [sp, #0]
 800128a:	239f      	movs	r3, #159	; 0x9f
 800128c:	2200      	movs	r2, #0
 800128e:	2001      	movs	r0, #1
 8001290:	f003 fa86 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:160
}
 8001294:	b003      	add	sp, #12
 8001296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	5a1cac08 	.word	0x5a1cac08
 80012a4:	40a13a64 	.word	0x40a13a64
 80012a8:	d70a3d71 	.word	0xd70a3d71
 80012ac:	40a13a63 	.word	0x40a13a63
 80012b0:	dd2f1aa0 	.word	0xdd2f1aa0
 80012b4:	40a13a64 	.word	0x40a13a64
 80012b8:	5a1cac08 	.word	0x5a1cac08
 80012bc:	c0a13a64 	.word	0xc0a13a64
 80012c0:	d70a3d71 	.word	0xd70a3d71
 80012c4:	c0a13a63 	.word	0xc0a13a63
 80012c8:	dd2f1aa0 	.word	0xdd2f1aa0
 80012cc:	c0a13a64 	.word	0xc0a13a64
 80012d0:	20000018 	.word	0x20000018
 80012d4:	20000028 	.word	0x20000028
 80012d8:	2000000c 	.word	0x2000000c

080012dc <test_aeabi_fdiv>:
test_aeabi_fdiv():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:162
void test_aeabi_fdiv(void) {
 80012dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:164
xf = 2205.1969;  yf = 270.8886;   rf = xf / yf;                       TEST_ASSERT_EQUAL_FLOAT( 8.140604292687105, rf );
 80012e0:	4e33      	ldr	r6, [pc, #204]	; (80013b0 <test_aeabi_fdiv+0xd4>)
 80012e2:	4d34      	ldr	r5, [pc, #208]	; (80013b4 <test_aeabi_fdiv+0xd8>)
 80012e4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80013c4 <test_aeabi_fdiv+0xe8>
 80012e8:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80013c8 <test_aeabi_fdiv+0xec>
 80012ec:	f8c6 9000 	str.w	r9, [r6]
 80012f0:	f8c5 a000 	str.w	sl, [r5]
 80012f4:	6830      	ldr	r0, [r6, #0]
 80012f6:	6829      	ldr	r1, [r5, #0]
 80012f8:	f005 fa0c 	bl	8006714 <__aeabi_fdiv>
 80012fc:	23a4      	movs	r3, #164	; 0xa4
 80012fe:	4c2e      	ldr	r4, [pc, #184]	; (80013b8 <test_aeabi_fdiv+0xdc>)
 8001300:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80013cc <test_aeabi_fdiv+0xf0>
 8001304:	4f2d      	ldr	r7, [pc, #180]	; (80013bc <test_aeabi_fdiv+0xe0>)
 8001306:	6020      	str	r0, [r4, #0]
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4641      	mov	r1, r8
 800130e:	2300      	movs	r3, #0
 8001310:	4638      	mov	r0, r7
 8001312:	f003 fa71 	bl	80047f8 <UnityAssertFloatsWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:165
xf = 2205.1969;  yf = 270.8886;   rf = __wrap___aeabi_fdiv(xf, yf);   TEST_ASSERT_EQUAL_FLOAT( 8.140604292687105  , rf );
 8001316:	f8c6 9000 	str.w	r9, [r6]
 800131a:	f8c5 a000 	str.w	sl, [r5]
 800131e:	6830      	ldr	r0, [r6, #0]
 8001320:	6829      	ldr	r1, [r5, #0]
 8001322:	f003 fc23 	bl	8004b6c <__wrap___aeabi_fdiv>
 8001326:	23a5      	movs	r3, #165	; 0xa5
 8001328:	6020      	str	r0, [r4, #0]
 800132a:	6822      	ldr	r2, [r4, #0]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4641      	mov	r1, r8
 8001330:	4638      	mov	r0, r7
 8001332:	2300      	movs	r3, #0
 8001334:	f003 fa60 	bl	80047f8 <UnityAssertFloatsWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:166
xf = -2205.1969; yf = 270.8886;   rf = __wrap___aeabi_fdiv(xf, yf);   TEST_ASSERT_EQUAL_FLOAT( -8.140604292687105 , rf );
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <test_aeabi_fdiv+0xe4>)
 800133a:	f8df b094 	ldr.w	fp, [pc, #148]	; 80013d0 <test_aeabi_fdiv+0xf4>
 800133e:	6033      	str	r3, [r6, #0]
 8001340:	f8c5 a000 	str.w	sl, [r5]
 8001344:	6830      	ldr	r0, [r6, #0]
 8001346:	6829      	ldr	r1, [r5, #0]
 8001348:	f003 fc10 	bl	8004b6c <__wrap___aeabi_fdiv>
 800134c:	23a6      	movs	r3, #166	; 0xa6
 800134e:	f8df a084 	ldr.w	sl, [pc, #132]	; 80013d4 <test_aeabi_fdiv+0xf8>
 8001352:	6020      	str	r0, [r4, #0]
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4659      	mov	r1, fp
 800135a:	2300      	movs	r3, #0
 800135c:	4650      	mov	r0, sl
 800135e:	f003 fa4b 	bl	80047f8 <UnityAssertFloatsWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:167
xf = 2205.1969;  yf = -270.8886;  rf = __wrap___aeabi_fdiv(xf, yf);   TEST_ASSERT_EQUAL_FLOAT( -8.140604292687105 , rf );
 8001362:	f8c6 9000 	str.w	r9, [r6]
 8001366:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80013d8 <test_aeabi_fdiv+0xfc>
 800136a:	f8c5 9000 	str.w	r9, [r5]
 800136e:	6830      	ldr	r0, [r6, #0]
 8001370:	6829      	ldr	r1, [r5, #0]
 8001372:	f003 fbfb 	bl	8004b6c <__wrap___aeabi_fdiv>
 8001376:	23a7      	movs	r3, #167	; 0xa7
 8001378:	6020      	str	r0, [r4, #0]
 800137a:	6822      	ldr	r2, [r4, #0]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4659      	mov	r1, fp
 8001380:	4650      	mov	r0, sl
 8001382:	2300      	movs	r3, #0
 8001384:	f003 fa38 	bl	80047f8 <UnityAssertFloatsWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:168
xf = -2205.1969; yf = -270.8886;  rf = __wrap___aeabi_fdiv(xf, yf);   TEST_ASSERT_EQUAL_FLOAT( 8.140604292687105  , rf );
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <test_aeabi_fdiv+0xe4>)
 800138a:	6033      	str	r3, [r6, #0]
 800138c:	f8c5 9000 	str.w	r9, [r5]
 8001390:	6830      	ldr	r0, [r6, #0]
 8001392:	6829      	ldr	r1, [r5, #0]
 8001394:	f003 fbea 	bl	8004b6c <__wrap___aeabi_fdiv>
 8001398:	23a8      	movs	r3, #168	; 0xa8
 800139a:	6020      	str	r0, [r4, #0]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	6822      	ldr	r2, [r4, #0]
 80013a0:	2300      	movs	r3, #0
 80013a2:	4641      	mov	r1, r8
 80013a4:	4638      	mov	r0, r7
 80013a6:	f003 fa27 	bl	80047f8 <UnityAssertFloatsWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:169
}
 80013aa:	b003      	add	sp, #12
 80013ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013b0:	20000020 	.word	0x20000020
 80013b4:	20000030 	.word	0x20000030
 80013b8:	20000008 	.word	0x20000008
 80013bc:	370893a1 	.word	0x370893a1
 80013c0:	c509d327 	.word	0xc509d327
 80013c4:	4509d327 	.word	0x4509d327
 80013c8:	438771be 	.word	0x438771be
 80013cc:	41023fea 	.word	0x41023fea
 80013d0:	c1023fea 	.word	0xc1023fea
 80013d4:	b70893a1 	.word	0xb70893a1
 80013d8:	c38771be 	.word	0xc38771be
 80013dc:	00000000 	.word	0x00000000

080013e0 <test_aeabi_fadd>:
test_aeabi_fadd():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:171
void test_aeabi_fadd(void) {
 80013e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:172
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___aeabi_fadd(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , rf );
 80013e4:	4e4a      	ldr	r6, [pc, #296]	; (8001510 <test_aeabi_fadd+0x130>)
 80013e6:	4d4b      	ldr	r5, [pc, #300]	; (8001514 <test_aeabi_fadd+0x134>)
 80013e8:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800151c <test_aeabi_fadd+0x13c>
 80013ec:	f8df a130 	ldr.w	sl, [pc, #304]	; 8001520 <test_aeabi_fadd+0x140>
 80013f0:	f8c6 8000 	str.w	r8, [r6]
 80013f4:	f8c5 a000 	str.w	sl, [r5]
 80013f8:	6830      	ldr	r0, [r6, #0]
 80013fa:	6829      	ldr	r1, [r5, #0]
 80013fc:	f003 fbbe 	bl	8004b7c <__wrap___aeabi_fadd>
 8001400:	2700      	movs	r7, #0
 8001402:	23ac      	movs	r3, #172	; 0xac
 8001404:	4c44      	ldr	r4, [pc, #272]	; (8001518 <test_aeabi_fadd+0x138>)
 8001406:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800140a:	6020      	str	r0, [r4, #0]
 800140c:	6820      	ldr	r0, [r4, #0]
 800140e:	f004 fc3f 	bl	8005c90 <__aeabi_f2d>
 8001412:	a32f      	add	r3, pc, #188	; (adr r3, 80014d0 <test_aeabi_fadd+0xf0>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:173
xf = -2205.1969; yf = 270.8886;  rf = __wrap___aeabi_fadd(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -1934.3083         , rf );
 8001418:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001524 <test_aeabi_fadd+0x144>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:172
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___aeabi_fadd(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , rf );
 800141c:	e9cd 0100 	strd	r0, r1, [sp]
 8001420:	a12d      	add	r1, pc, #180	; (adr r1, 80014d8 <test_aeabi_fadd+0xf8>)
 8001422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001426:	f003 fa13 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:173
xf = -2205.1969; yf = 270.8886;  rf = __wrap___aeabi_fadd(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -1934.3083         , rf );
 800142a:	f8c6 9000 	str.w	r9, [r6]
 800142e:	f8c5 a000 	str.w	sl, [r5]
 8001432:	6830      	ldr	r0, [r6, #0]
 8001434:	6829      	ldr	r1, [r5, #0]
 8001436:	f003 fba1 	bl	8004b7c <__wrap___aeabi_fadd>
 800143a:	23ad      	movs	r3, #173	; 0xad
 800143c:	6020      	str	r0, [r4, #0]
 800143e:	6820      	ldr	r0, [r4, #0]
 8001440:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001444:	f004 fc24 	bl	8005c90 <__aeabi_f2d>
 8001448:	a325      	add	r3, pc, #148	; (adr r3, 80014e0 <test_aeabi_fadd+0x100>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	e9cd 0100 	strd	r0, r1, [sp]
 8001452:	a125      	add	r1, pc, #148	; (adr r1, 80014e8 <test_aeabi_fadd+0x108>)
 8001454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001458:	f003 f9fa 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:174
xf = 2205.1969;  yf = -270.8886; rf = __wrap___aeabi_fadd(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , rf );
 800145c:	f8c6 8000 	str.w	r8, [r6]
 8001460:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001528 <test_aeabi_fadd+0x148>
 8001464:	f8c5 8000 	str.w	r8, [r5]
 8001468:	6830      	ldr	r0, [r6, #0]
 800146a:	6829      	ldr	r1, [r5, #0]
 800146c:	f003 fb86 	bl	8004b7c <__wrap___aeabi_fadd>
 8001470:	23ae      	movs	r3, #174	; 0xae
 8001472:	6020      	str	r0, [r4, #0]
 8001474:	6820      	ldr	r0, [r4, #0]
 8001476:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800147a:	f004 fc09 	bl	8005c90 <__aeabi_f2d>
 800147e:	a31c      	add	r3, pc, #112	; (adr r3, 80014f0 <test_aeabi_fadd+0x110>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	e9cd 0100 	strd	r0, r1, [sp]
 8001488:	a11b      	add	r1, pc, #108	; (adr r1, 80014f8 <test_aeabi_fadd+0x118>)
 800148a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800148e:	f003 f9df 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:175
xf = -2205.1969; yf = -270.8886; rf = __wrap___aeabi_fadd(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -2476.0855         , rf );
 8001492:	f8c6 9000 	str.w	r9, [r6]
 8001496:	f8c5 8000 	str.w	r8, [r5]
 800149a:	6830      	ldr	r0, [r6, #0]
 800149c:	6829      	ldr	r1, [r5, #0]
 800149e:	f003 fb6d 	bl	8004b7c <__wrap___aeabi_fadd>
 80014a2:	23af      	movs	r3, #175	; 0xaf
 80014a4:	6020      	str	r0, [r4, #0]
 80014a6:	6820      	ldr	r0, [r4, #0]
 80014a8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80014ac:	f004 fbf0 	bl	8005c90 <__aeabi_f2d>
 80014b0:	a313      	add	r3, pc, #76	; (adr r3, 8001500 <test_aeabi_fadd+0x120>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	e9cd 0100 	strd	r0, r1, [sp]
 80014ba:	a113      	add	r1, pc, #76	; (adr r1, 8001508 <test_aeabi_fadd+0x128>)
 80014bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014c0:	f003 f9c6 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:176
}
 80014c4:	b004      	add	sp, #16
 80014c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ca:	bf00      	nop
 80014cc:	f3af 8000 	nop.w
 80014d0:	c6a7ef9e 	.word	0xc6a7ef9e
 80014d4:	40a3582b 	.word	0x40a3582b
 80014d8:	47d3c2fa 	.word	0x47d3c2fa
 80014dc:	3f6448ba 	.word	0x3f6448ba
 80014e0:	b2fec56d 	.word	0xb2fec56d
 80014e4:	c09e393b 	.word	0xc09e393b
 80014e8:	b8e36ea1 	.word	0xb8e36ea1
 80014ec:	bf5fb113 	.word	0xbf5fb113
 80014f0:	b2fec56d 	.word	0xb2fec56d
 80014f4:	409e393b 	.word	0x409e393b
 80014f8:	b8e36ea1 	.word	0xb8e36ea1
 80014fc:	3f5fb113 	.word	0x3f5fb113
 8001500:	c6a7ef9e 	.word	0xc6a7ef9e
 8001504:	c0a3582b 	.word	0xc0a3582b
 8001508:	47d3c2fa 	.word	0x47d3c2fa
 800150c:	bf6448ba 	.word	0xbf6448ba
 8001510:	20000020 	.word	0x20000020
 8001514:	20000030 	.word	0x20000030
 8001518:	20000008 	.word	0x20000008
 800151c:	4509d327 	.word	0x4509d327
 8001520:	438771be 	.word	0x438771be
 8001524:	c509d327 	.word	0xc509d327
 8001528:	c38771be 	.word	0xc38771be
 800152c:	00000000 	.word	0x00000000

08001530 <test_aeabi_fsub>:
test_aeabi_fsub():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:178
void test_aeabi_fsub(void) {
 8001530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:179
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___aeabi_fsub(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , rf );
 8001534:	4e4a      	ldr	r6, [pc, #296]	; (8001660 <test_aeabi_fsub+0x130>)
 8001536:	4d4b      	ldr	r5, [pc, #300]	; (8001664 <test_aeabi_fsub+0x134>)
 8001538:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800166c <test_aeabi_fsub+0x13c>
 800153c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8001670 <test_aeabi_fsub+0x140>
 8001540:	f8c6 8000 	str.w	r8, [r6]
 8001544:	f8c5 a000 	str.w	sl, [r5]
 8001548:	6830      	ldr	r0, [r6, #0]
 800154a:	6829      	ldr	r1, [r5, #0]
 800154c:	f003 fb1e 	bl	8004b8c <__wrap___aeabi_fsub>
 8001550:	2700      	movs	r7, #0
 8001552:	23b3      	movs	r3, #179	; 0xb3
 8001554:	4c44      	ldr	r4, [pc, #272]	; (8001668 <test_aeabi_fsub+0x138>)
 8001556:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800155a:	6020      	str	r0, [r4, #0]
 800155c:	6820      	ldr	r0, [r4, #0]
 800155e:	f004 fb97 	bl	8005c90 <__aeabi_f2d>
 8001562:	a32f      	add	r3, pc, #188	; (adr r3, 8001620 <test_aeabi_fsub+0xf0>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:180
xf = -2205.1969; yf = 270.8886;  rf = __wrap___aeabi_fsub(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -2476.0855         , rf );
 8001568:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001674 <test_aeabi_fsub+0x144>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:179
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___aeabi_fsub(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , rf );
 800156c:	e9cd 0100 	strd	r0, r1, [sp]
 8001570:	a12d      	add	r1, pc, #180	; (adr r1, 8001628 <test_aeabi_fsub+0xf8>)
 8001572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001576:	f003 f96b 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:180
xf = -2205.1969; yf = 270.8886;  rf = __wrap___aeabi_fsub(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -2476.0855         , rf );
 800157a:	f8c6 9000 	str.w	r9, [r6]
 800157e:	f8c5 a000 	str.w	sl, [r5]
 8001582:	6830      	ldr	r0, [r6, #0]
 8001584:	6829      	ldr	r1, [r5, #0]
 8001586:	f003 fb01 	bl	8004b8c <__wrap___aeabi_fsub>
 800158a:	23b4      	movs	r3, #180	; 0xb4
 800158c:	6020      	str	r0, [r4, #0]
 800158e:	6820      	ldr	r0, [r4, #0]
 8001590:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001594:	f004 fb7c 	bl	8005c90 <__aeabi_f2d>
 8001598:	a325      	add	r3, pc, #148	; (adr r3, 8001630 <test_aeabi_fsub+0x100>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	e9cd 0100 	strd	r0, r1, [sp]
 80015a2:	a125      	add	r1, pc, #148	; (adr r1, 8001638 <test_aeabi_fsub+0x108>)
 80015a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a8:	f003 f952 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:181
xf = 2205.1969;  yf = -270.8886; rf = __wrap___aeabi_fsub(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , rf );
 80015ac:	f8c6 8000 	str.w	r8, [r6]
 80015b0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001678 <test_aeabi_fsub+0x148>
 80015b4:	f8c5 8000 	str.w	r8, [r5]
 80015b8:	6830      	ldr	r0, [r6, #0]
 80015ba:	6829      	ldr	r1, [r5, #0]
 80015bc:	f003 fae6 	bl	8004b8c <__wrap___aeabi_fsub>
 80015c0:	23b5      	movs	r3, #181	; 0xb5
 80015c2:	6020      	str	r0, [r4, #0]
 80015c4:	6820      	ldr	r0, [r4, #0]
 80015c6:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80015ca:	f004 fb61 	bl	8005c90 <__aeabi_f2d>
 80015ce:	a31c      	add	r3, pc, #112	; (adr r3, 8001640 <test_aeabi_fsub+0x110>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	e9cd 0100 	strd	r0, r1, [sp]
 80015d8:	a11b      	add	r1, pc, #108	; (adr r1, 8001648 <test_aeabi_fsub+0x118>)
 80015da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015de:	f003 f937 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:182
xf = -2205.1969; yf = -270.8886; rf = __wrap___aeabi_fsub(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -1934.3083         , rf );
 80015e2:	f8c6 9000 	str.w	r9, [r6]
 80015e6:	f8c5 8000 	str.w	r8, [r5]
 80015ea:	6830      	ldr	r0, [r6, #0]
 80015ec:	6829      	ldr	r1, [r5, #0]
 80015ee:	f003 facd 	bl	8004b8c <__wrap___aeabi_fsub>
 80015f2:	23b6      	movs	r3, #182	; 0xb6
 80015f4:	6020      	str	r0, [r4, #0]
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80015fc:	f004 fb48 	bl	8005c90 <__aeabi_f2d>
 8001600:	a313      	add	r3, pc, #76	; (adr r3, 8001650 <test_aeabi_fsub+0x120>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	e9cd 0100 	strd	r0, r1, [sp]
 800160a:	a113      	add	r1, pc, #76	; (adr r1, 8001658 <test_aeabi_fsub+0x128>)
 800160c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001610:	f003 f91e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:183
}
 8001614:	b004      	add	sp, #16
 8001616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	b2fec56d 	.word	0xb2fec56d
 8001624:	409e393b 	.word	0x409e393b
 8001628:	b8e36ea1 	.word	0xb8e36ea1
 800162c:	3f5fb113 	.word	0x3f5fb113
 8001630:	c6a7ef9e 	.word	0xc6a7ef9e
 8001634:	c0a3582b 	.word	0xc0a3582b
 8001638:	47d3c2fa 	.word	0x47d3c2fa
 800163c:	bf6448ba 	.word	0xbf6448ba
 8001640:	c6a7ef9e 	.word	0xc6a7ef9e
 8001644:	40a3582b 	.word	0x40a3582b
 8001648:	47d3c2fa 	.word	0x47d3c2fa
 800164c:	3f6448ba 	.word	0x3f6448ba
 8001650:	b2fec56d 	.word	0xb2fec56d
 8001654:	c09e393b 	.word	0xc09e393b
 8001658:	b8e36ea1 	.word	0xb8e36ea1
 800165c:	bf5fb113 	.word	0xbf5fb113
 8001660:	20000020 	.word	0x20000020
 8001664:	20000030 	.word	0x20000030
 8001668:	20000008 	.word	0x20000008
 800166c:	4509d327 	.word	0x4509d327
 8001670:	438771be 	.word	0x438771be
 8001674:	c509d327 	.word	0xc509d327
 8001678:	c38771be 	.word	0xc38771be
 800167c:	00000000 	.word	0x00000000

08001680 <test_aeabi_fmul>:
test_aeabi_fmul():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:185
void test_aeabi_fmul(void) {
 8001680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:186
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___aeabi_fmul(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , rf );
 8001684:	4e42      	ldr	r6, [pc, #264]	; (8001790 <test_aeabi_fmul+0x110>)
 8001686:	4d43      	ldr	r5, [pc, #268]	; (8001794 <test_aeabi_fmul+0x114>)
 8001688:	f8df a110 	ldr.w	sl, [pc, #272]	; 800179c <test_aeabi_fmul+0x11c>
 800168c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80017a0 <test_aeabi_fmul+0x120>
 8001690:	f8c6 a000 	str.w	sl, [r6]
 8001694:	f8c5 8000 	str.w	r8, [r5]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:185
void test_aeabi_fmul(void) {
 8001698:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:186
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___aeabi_fmul(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , rf );
 800169a:	6830      	ldr	r0, [r6, #0]
 800169c:	6829      	ldr	r1, [r5, #0]
 800169e:	f003 fa7d 	bl	8004b9c <__wrap___aeabi_fmul>
 80016a2:	2700      	movs	r7, #0
 80016a4:	23ba      	movs	r3, #186	; 0xba
 80016a6:	4c3c      	ldr	r4, [pc, #240]	; (8001798 <test_aeabi_fmul+0x118>)
 80016a8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80016ac:	6020      	str	r0, [r4, #0]
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	f004 faee 	bl	8005c90 <__aeabi_f2d>
 80016b4:	a32e      	add	r3, pc, #184	; (adr r3, 8001770 <test_aeabi_fmul+0xf0>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:187
xf = -2205.1969; yf = 270.8886;  rf = __wrap___aeabi_fmul(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -597362.70096534   , rf );
 80016ba:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80017a4 <test_aeabi_fmul+0x124>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:186
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___aeabi_fmul(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , rf );
 80016be:	e9cd 0100 	strd	r0, r1, [sp]
 80016c2:	a12d      	add	r1, pc, #180	; (adr r1, 8001778 <test_aeabi_fmul+0xf8>)
 80016c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016c8:	f003 f8c2 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:187
xf = -2205.1969; yf = 270.8886;  rf = __wrap___aeabi_fmul(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -597362.70096534   , rf );
 80016cc:	f8c6 b000 	str.w	fp, [r6]
 80016d0:	f8c5 8000 	str.w	r8, [r5]
 80016d4:	6830      	ldr	r0, [r6, #0]
 80016d6:	6829      	ldr	r1, [r5, #0]
 80016d8:	f003 fa60 	bl	8004b9c <__wrap___aeabi_fmul>
 80016dc:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
 80016e0:	e9d9 8900 	ldrd	r8, r9, [r9]
 80016e4:	23bb      	movs	r3, #187	; 0xbb
 80016e6:	6020      	str	r0, [r4, #0]
 80016e8:	6820      	ldr	r0, [r4, #0]
 80016ea:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80016ee:	f004 facf 	bl	8005c90 <__aeabi_f2d>
 80016f2:	4642      	mov	r2, r8
 80016f4:	464b      	mov	r3, r9
 80016f6:	e9cd 0100 	strd	r0, r1, [sp]
 80016fa:	a123      	add	r1, pc, #140	; (adr r1, 8001788 <test_aeabi_fmul+0x108>)
 80016fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001700:	f003 f8a6 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:188
xf = 2205.1969;  yf = -270.8886; rf = __wrap___aeabi_fmul(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( -597362.70096534   , rf );
 8001704:	f8c6 a000 	str.w	sl, [r6]
 8001708:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80017a8 <test_aeabi_fmul+0x128>
 800170c:	f8c5 a000 	str.w	sl, [r5]
 8001710:	6830      	ldr	r0, [r6, #0]
 8001712:	6829      	ldr	r1, [r5, #0]
 8001714:	f003 fa42 	bl	8004b9c <__wrap___aeabi_fmul>
 8001718:	23bc      	movs	r3, #188	; 0xbc
 800171a:	6020      	str	r0, [r4, #0]
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001722:	f004 fab5 	bl	8005c90 <__aeabi_f2d>
 8001726:	4642      	mov	r2, r8
 8001728:	464b      	mov	r3, r9
 800172a:	e9cd 0100 	strd	r0, r1, [sp]
 800172e:	a116      	add	r1, pc, #88	; (adr r1, 8001788 <test_aeabi_fmul+0x108>)
 8001730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001734:	f003 f88c 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:189
xf = -2205.1969; yf = -270.8886; rf = __wrap___aeabi_fmul(xf, yf);   TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , rf );
 8001738:	f8c6 b000 	str.w	fp, [r6]
 800173c:	f8c5 a000 	str.w	sl, [r5]
 8001740:	6830      	ldr	r0, [r6, #0]
 8001742:	6829      	ldr	r1, [r5, #0]
 8001744:	f003 fa2a 	bl	8004b9c <__wrap___aeabi_fmul>
 8001748:	23bd      	movs	r3, #189	; 0xbd
 800174a:	6020      	str	r0, [r4, #0]
 800174c:	6820      	ldr	r0, [r4, #0]
 800174e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001752:	f004 fa9d 	bl	8005c90 <__aeabi_f2d>
 8001756:	a306      	add	r3, pc, #24	; (adr r3, 8001770 <test_aeabi_fmul+0xf0>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	e9cd 0100 	strd	r0, r1, [sp]
 8001760:	a105      	add	r1, pc, #20	; (adr r1, 8001778 <test_aeabi_fmul+0xf8>)
 8001762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001766:	f003 f873 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:190
}
 800176a:	b005      	add	sp, #20
 800176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001770:	66e4edd6 	.word	0x66e4edd6
 8001774:	41223ae5 	.word	0x41223ae5
 8001778:	620fe234 	.word	0x620fe234
 800177c:	3fe31d98 	.word	0x3fe31d98
 8001780:	66e4edd6 	.word	0x66e4edd6
 8001784:	c1223ae5 	.word	0xc1223ae5
 8001788:	620fe234 	.word	0x620fe234
 800178c:	bfe31d98 	.word	0xbfe31d98
 8001790:	20000020 	.word	0x20000020
 8001794:	20000030 	.word	0x20000030
 8001798:	20000008 	.word	0x20000008
 800179c:	4509d327 	.word	0x4509d327
 80017a0:	438771be 	.word	0x438771be
 80017a4:	c509d327 	.word	0xc509d327
 80017a8:	c38771be 	.word	0xc38771be
 80017ac:	00000000 	.word	0x00000000

080017b0 <test_aeabi_d2iz>:
test_aeabi_d2iz():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:193
x = 0;          ri = __wrap___aeabi_d2iz(x);   TEST_ASSERT_EQUAL_INT( 0                  , ri );
 80017b0:	2200      	movs	r2, #0
 80017b2:	2300      	movs	r3, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:192
void test_aeabi_d2iz(void) {
 80017b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:193
x = 0;          ri = __wrap___aeabi_d2iz(x);   TEST_ASSERT_EQUAL_INT( 0                  , ri );
 80017b6:	4d20      	ldr	r5, [pc, #128]	; (8001838 <test_aeabi_d2iz+0x88>)
 80017b8:	2614      	movs	r6, #20
 80017ba:	e9c5 2300 	strd	r2, r3, [r5]
 80017be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80017c2:	f003 f9f3 	bl	8004bac <__wrap___aeabi_d2iz>
 80017c6:	2200      	movs	r2, #0
 80017c8:	4c1c      	ldr	r4, [pc, #112]	; (800183c <test_aeabi_d2iz+0x8c>)
 80017ca:	9600      	str	r6, [sp, #0]
 80017cc:	6020      	str	r0, [r4, #0]
 80017ce:	6821      	ldr	r1, [r4, #0]
 80017d0:	4610      	mov	r0, r2
 80017d2:	23c1      	movs	r3, #193	; 0xc1
 80017d4:	f002 ffe4 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:194
x = 2205.1969;  ri = __wrap___aeabi_d2iz(x);   TEST_ASSERT_EQUAL_INT( 2205               , ri );
 80017d8:	a313      	add	r3, pc, #76	; (adr r3, 8001828 <test_aeabi_d2iz+0x78>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	e9c5 2300 	strd	r2, r3, [r5]
 80017e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80017e6:	f003 f9e1 	bl	8004bac <__wrap___aeabi_d2iz>
 80017ea:	6020      	str	r0, [r4, #0]
 80017ec:	6821      	ldr	r1, [r4, #0]
 80017ee:	9600      	str	r6, [sp, #0]
 80017f0:	23c2      	movs	r3, #194	; 0xc2
 80017f2:	2200      	movs	r2, #0
 80017f4:	f640 009d 	movw	r0, #2205	; 0x89d
 80017f8:	f002 ffd2 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:195
x = -2205.1969; ri = __wrap___aeabi_d2iz(x);   TEST_ASSERT_EQUAL_INT( -2205              , ri );
 80017fc:	a30c      	add	r3, pc, #48	; (adr r3, 8001830 <test_aeabi_d2iz+0x80>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	e9c5 2300 	strd	r2, r3, [r5]
 8001806:	e9d5 0100 	ldrd	r0, r1, [r5]
 800180a:	f003 f9cf 	bl	8004bac <__wrap___aeabi_d2iz>
 800180e:	6020      	str	r0, [r4, #0]
 8001810:	6821      	ldr	r1, [r4, #0]
 8001812:	9600      	str	r6, [sp, #0]
 8001814:	23c3      	movs	r3, #195	; 0xc3
 8001816:	2200      	movs	r2, #0
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <test_aeabi_d2iz+0x90>)
 800181a:	f002 ffc1 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:196
}
 800181e:	b002      	add	sp, #8
 8001820:	bd70      	pop	{r4, r5, r6, pc}
 8001822:	bf00      	nop
 8001824:	f3af 8000 	nop.w
 8001828:	d013a92a 	.word	0xd013a92a
 800182c:	40a13a64 	.word	0x40a13a64
 8001830:	d013a92a 	.word	0xd013a92a
 8001834:	c0a13a64 	.word	0xc0a13a64
 8001838:	20000018 	.word	0x20000018
 800183c:	2000000c 	.word	0x2000000c
 8001840:	fffff763 	.word	0xfffff763
 8001844:	00000000 	.word	0x00000000

08001848 <test_aeabi_d2uiz>:
test_aeabi_d2uiz():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:199
x = 0;          ru = __wrap___aeabi_d2uiz(x);  TEST_ASSERT_EQUAL_UINT( 0                  , ru );
 8001848:	2200      	movs	r2, #0
 800184a:	2300      	movs	r3, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:198
void test_aeabi_d2uiz(void) {
 800184c:	b573      	push	{r0, r1, r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:199
x = 0;          ru = __wrap___aeabi_d2uiz(x);  TEST_ASSERT_EQUAL_UINT( 0                  , ru );
 800184e:	4d20      	ldr	r5, [pc, #128]	; (80018d0 <test_aeabi_d2uiz+0x88>)
 8001850:	2624      	movs	r6, #36	; 0x24
 8001852:	e9c5 2300 	strd	r2, r3, [r5]
 8001856:	e9d5 0100 	ldrd	r0, r1, [r5]
 800185a:	f003 f9bd 	bl	8004bd8 <__wrap___aeabi_d2uiz>
 800185e:	2200      	movs	r2, #0
 8001860:	4c1c      	ldr	r4, [pc, #112]	; (80018d4 <test_aeabi_d2uiz+0x8c>)
 8001862:	9600      	str	r6, [sp, #0]
 8001864:	6020      	str	r0, [r4, #0]
 8001866:	6821      	ldr	r1, [r4, #0]
 8001868:	4610      	mov	r0, r2
 800186a:	23c7      	movs	r3, #199	; 0xc7
 800186c:	f002 ff98 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:200
x = 2205.1969;  ru = __wrap___aeabi_d2uiz(x);  TEST_ASSERT_EQUAL_UINT( 2205               , ru );
 8001870:	a313      	add	r3, pc, #76	; (adr r3, 80018c0 <test_aeabi_d2uiz+0x78>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	e9c5 2300 	strd	r2, r3, [r5]
 800187a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800187e:	f003 f9ab 	bl	8004bd8 <__wrap___aeabi_d2uiz>
 8001882:	6020      	str	r0, [r4, #0]
 8001884:	6821      	ldr	r1, [r4, #0]
 8001886:	9600      	str	r6, [sp, #0]
 8001888:	23c8      	movs	r3, #200	; 0xc8
 800188a:	2200      	movs	r2, #0
 800188c:	f640 009d 	movw	r0, #2205	; 0x89d
 8001890:	f002 ff86 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:201
x = -2205.1969; ru = __wrap___aeabi_d2uiz(x);  TEST_ASSERT_EQUAL_UINT( 0                  , ru );
 8001894:	a30c      	add	r3, pc, #48	; (adr r3, 80018c8 <test_aeabi_d2uiz+0x80>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	e9c5 2300 	strd	r2, r3, [r5]
 800189e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80018a2:	f003 f999 	bl	8004bd8 <__wrap___aeabi_d2uiz>
 80018a6:	2200      	movs	r2, #0
 80018a8:	6020      	str	r0, [r4, #0]
 80018aa:	6821      	ldr	r1, [r4, #0]
 80018ac:	9600      	str	r6, [sp, #0]
 80018ae:	23c9      	movs	r3, #201	; 0xc9
 80018b0:	4610      	mov	r0, r2
 80018b2:	f002 ff75 	bl	80047a0 <UnityAssertEqualNumber>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:202
}
 80018b6:	b002      	add	sp, #8
 80018b8:	bd70      	pop	{r4, r5, r6, pc}
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	d013a92a 	.word	0xd013a92a
 80018c4:	40a13a64 	.word	0x40a13a64
 80018c8:	d013a92a 	.word	0xd013a92a
 80018cc:	c0a13a64 	.word	0xc0a13a64
 80018d0:	20000018 	.word	0x20000018
 80018d4:	20000010 	.word	0x20000010

080018d8 <test_addsf3>:
test_addsf3():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:204
void test_addsf3(void) {
 80018d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:205
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___addsf3(xf, yf);       TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , rf );
 80018dc:	4e4a      	ldr	r6, [pc, #296]	; (8001a08 <test_addsf3+0x130>)
 80018de:	4d4b      	ldr	r5, [pc, #300]	; (8001a0c <test_addsf3+0x134>)
 80018e0:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8001a14 <test_addsf3+0x13c>
 80018e4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8001a18 <test_addsf3+0x140>
 80018e8:	f8c6 8000 	str.w	r8, [r6]
 80018ec:	f8c5 a000 	str.w	sl, [r5]
 80018f0:	6830      	ldr	r0, [r6, #0]
 80018f2:	6829      	ldr	r1, [r5, #0]
 80018f4:	f003 f98c 	bl	8004c10 <__wrap___addsf3>
 80018f8:	2700      	movs	r7, #0
 80018fa:	23cd      	movs	r3, #205	; 0xcd
 80018fc:	4c44      	ldr	r4, [pc, #272]	; (8001a10 <test_addsf3+0x138>)
 80018fe:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001902:	6020      	str	r0, [r4, #0]
 8001904:	6820      	ldr	r0, [r4, #0]
 8001906:	f004 f9c3 	bl	8005c90 <__aeabi_f2d>
 800190a:	a32f      	add	r3, pc, #188	; (adr r3, 80019c8 <test_addsf3+0xf0>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:206
xf = -2205.1969; yf = 270.8886;  rf = __wrap___addsf3(xf, yf);       TEST_ASSERT_EQUAL_DOUBLE( -1934.3083         , rf );
 8001910:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001a1c <test_addsf3+0x144>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:205
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___addsf3(xf, yf);       TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , rf );
 8001914:	e9cd 0100 	strd	r0, r1, [sp]
 8001918:	a12d      	add	r1, pc, #180	; (adr r1, 80019d0 <test_addsf3+0xf8>)
 800191a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800191e:	f002 ff97 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:206
xf = -2205.1969; yf = 270.8886;  rf = __wrap___addsf3(xf, yf);       TEST_ASSERT_EQUAL_DOUBLE( -1934.3083         , rf );
 8001922:	f8c6 9000 	str.w	r9, [r6]
 8001926:	f8c5 a000 	str.w	sl, [r5]
 800192a:	6830      	ldr	r0, [r6, #0]
 800192c:	6829      	ldr	r1, [r5, #0]
 800192e:	f003 f96f 	bl	8004c10 <__wrap___addsf3>
 8001932:	23ce      	movs	r3, #206	; 0xce
 8001934:	6020      	str	r0, [r4, #0]
 8001936:	6820      	ldr	r0, [r4, #0]
 8001938:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800193c:	f004 f9a8 	bl	8005c90 <__aeabi_f2d>
 8001940:	a325      	add	r3, pc, #148	; (adr r3, 80019d8 <test_addsf3+0x100>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	e9cd 0100 	strd	r0, r1, [sp]
 800194a:	a125      	add	r1, pc, #148	; (adr r1, 80019e0 <test_addsf3+0x108>)
 800194c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001950:	f002 ff7e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:207
xf = 2205.1969;  yf = -270.8886; rf = __wrap___addsf3(xf, yf);       TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , rf );
 8001954:	f8c6 8000 	str.w	r8, [r6]
 8001958:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001a20 <test_addsf3+0x148>
 800195c:	f8c5 8000 	str.w	r8, [r5]
 8001960:	6830      	ldr	r0, [r6, #0]
 8001962:	6829      	ldr	r1, [r5, #0]
 8001964:	f003 f954 	bl	8004c10 <__wrap___addsf3>
 8001968:	23cf      	movs	r3, #207	; 0xcf
 800196a:	6020      	str	r0, [r4, #0]
 800196c:	6820      	ldr	r0, [r4, #0]
 800196e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001972:	f004 f98d 	bl	8005c90 <__aeabi_f2d>
 8001976:	a31c      	add	r3, pc, #112	; (adr r3, 80019e8 <test_addsf3+0x110>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	e9cd 0100 	strd	r0, r1, [sp]
 8001980:	a11b      	add	r1, pc, #108	; (adr r1, 80019f0 <test_addsf3+0x118>)
 8001982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001986:	f002 ff63 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:208
xf = -2205.1969; yf = -270.8886; rf = __wrap___addsf3(xf, yf);       TEST_ASSERT_EQUAL_DOUBLE( -2476.0855         , rf );
 800198a:	f8c6 9000 	str.w	r9, [r6]
 800198e:	f8c5 8000 	str.w	r8, [r5]
 8001992:	6830      	ldr	r0, [r6, #0]
 8001994:	6829      	ldr	r1, [r5, #0]
 8001996:	f003 f93b 	bl	8004c10 <__wrap___addsf3>
 800199a:	23d0      	movs	r3, #208	; 0xd0
 800199c:	6020      	str	r0, [r4, #0]
 800199e:	6820      	ldr	r0, [r4, #0]
 80019a0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80019a4:	f004 f974 	bl	8005c90 <__aeabi_f2d>
 80019a8:	a313      	add	r3, pc, #76	; (adr r3, 80019f8 <test_addsf3+0x120>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	e9cd 0100 	strd	r0, r1, [sp]
 80019b2:	a113      	add	r1, pc, #76	; (adr r1, 8001a00 <test_addsf3+0x128>)
 80019b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019b8:	f002 ff4a 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:209
}
 80019bc:	b004      	add	sp, #16
 80019be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c2:	bf00      	nop
 80019c4:	f3af 8000 	nop.w
 80019c8:	c6a7ef9e 	.word	0xc6a7ef9e
 80019cc:	40a3582b 	.word	0x40a3582b
 80019d0:	47d3c2fa 	.word	0x47d3c2fa
 80019d4:	3f6448ba 	.word	0x3f6448ba
 80019d8:	b2fec56d 	.word	0xb2fec56d
 80019dc:	c09e393b 	.word	0xc09e393b
 80019e0:	b8e36ea1 	.word	0xb8e36ea1
 80019e4:	bf5fb113 	.word	0xbf5fb113
 80019e8:	b2fec56d 	.word	0xb2fec56d
 80019ec:	409e393b 	.word	0x409e393b
 80019f0:	b8e36ea1 	.word	0xb8e36ea1
 80019f4:	3f5fb113 	.word	0x3f5fb113
 80019f8:	c6a7ef9e 	.word	0xc6a7ef9e
 80019fc:	c0a3582b 	.word	0xc0a3582b
 8001a00:	47d3c2fa 	.word	0x47d3c2fa
 8001a04:	bf6448ba 	.word	0xbf6448ba
 8001a08:	20000020 	.word	0x20000020
 8001a0c:	20000030 	.word	0x20000030
 8001a10:	20000008 	.word	0x20000008
 8001a14:	4509d327 	.word	0x4509d327
 8001a18:	438771be 	.word	0x438771be
 8001a1c:	c509d327 	.word	0xc509d327
 8001a20:	c38771be 	.word	0xc38771be
 8001a24:	00000000 	.word	0x00000000

08001a28 <test_subsf3>:
test_subsf3():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:211
void test_subsf3(void) {
 8001a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:212
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___subsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , rf );
 8001a2c:	4e4a      	ldr	r6, [pc, #296]	; (8001b58 <test_subsf3+0x130>)
 8001a2e:	4d4b      	ldr	r5, [pc, #300]	; (8001b5c <test_subsf3+0x134>)
 8001a30:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8001b64 <test_subsf3+0x13c>
 8001a34:	f8df a130 	ldr.w	sl, [pc, #304]	; 8001b68 <test_subsf3+0x140>
 8001a38:	f8c6 8000 	str.w	r8, [r6]
 8001a3c:	f8c5 a000 	str.w	sl, [r5]
 8001a40:	6830      	ldr	r0, [r6, #0]
 8001a42:	6829      	ldr	r1, [r5, #0]
 8001a44:	f003 f8ec 	bl	8004c20 <__wrap___subsf3>
 8001a48:	2700      	movs	r7, #0
 8001a4a:	23d4      	movs	r3, #212	; 0xd4
 8001a4c:	4c44      	ldr	r4, [pc, #272]	; (8001b60 <test_subsf3+0x138>)
 8001a4e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001a52:	6020      	str	r0, [r4, #0]
 8001a54:	6820      	ldr	r0, [r4, #0]
 8001a56:	f004 f91b 	bl	8005c90 <__aeabi_f2d>
 8001a5a:	a32f      	add	r3, pc, #188	; (adr r3, 8001b18 <test_subsf3+0xf0>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:213
xf = -2205.1969; yf = 270.8886;  rf = __wrap___subsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -2476.0855         , rf );
 8001a60:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001b6c <test_subsf3+0x144>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:212
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___subsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 1934.3083          , rf );
 8001a64:	e9cd 0100 	strd	r0, r1, [sp]
 8001a68:	a12d      	add	r1, pc, #180	; (adr r1, 8001b20 <test_subsf3+0xf8>)
 8001a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a6e:	f002 feef 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:213
xf = -2205.1969; yf = 270.8886;  rf = __wrap___subsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -2476.0855         , rf );
 8001a72:	f8c6 9000 	str.w	r9, [r6]
 8001a76:	f8c5 a000 	str.w	sl, [r5]
 8001a7a:	6830      	ldr	r0, [r6, #0]
 8001a7c:	6829      	ldr	r1, [r5, #0]
 8001a7e:	f003 f8cf 	bl	8004c20 <__wrap___subsf3>
 8001a82:	23d5      	movs	r3, #213	; 0xd5
 8001a84:	6020      	str	r0, [r4, #0]
 8001a86:	6820      	ldr	r0, [r4, #0]
 8001a88:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001a8c:	f004 f900 	bl	8005c90 <__aeabi_f2d>
 8001a90:	a325      	add	r3, pc, #148	; (adr r3, 8001b28 <test_subsf3+0x100>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	e9cd 0100 	strd	r0, r1, [sp]
 8001a9a:	a125      	add	r1, pc, #148	; (adr r1, 8001b30 <test_subsf3+0x108>)
 8001a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa0:	f002 fed6 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:214
xf = 2205.1969;  yf = -270.8886; rf = __wrap___subsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 2476.0855          , rf );
 8001aa4:	f8c6 8000 	str.w	r8, [r6]
 8001aa8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001b70 <test_subsf3+0x148>
 8001aac:	f8c5 8000 	str.w	r8, [r5]
 8001ab0:	6830      	ldr	r0, [r6, #0]
 8001ab2:	6829      	ldr	r1, [r5, #0]
 8001ab4:	f003 f8b4 	bl	8004c20 <__wrap___subsf3>
 8001ab8:	23d6      	movs	r3, #214	; 0xd6
 8001aba:	6020      	str	r0, [r4, #0]
 8001abc:	6820      	ldr	r0, [r4, #0]
 8001abe:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001ac2:	f004 f8e5 	bl	8005c90 <__aeabi_f2d>
 8001ac6:	a31c      	add	r3, pc, #112	; (adr r3, 8001b38 <test_subsf3+0x110>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	e9cd 0100 	strd	r0, r1, [sp]
 8001ad0:	a11b      	add	r1, pc, #108	; (adr r1, 8001b40 <test_subsf3+0x118>)
 8001ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ad6:	f002 febb 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:215
xf = -2205.1969; yf = -270.8886; rf = __wrap___subsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -1934.3083         , rf );
 8001ada:	f8c6 9000 	str.w	r9, [r6]
 8001ade:	f8c5 8000 	str.w	r8, [r5]
 8001ae2:	6830      	ldr	r0, [r6, #0]
 8001ae4:	6829      	ldr	r1, [r5, #0]
 8001ae6:	f003 f89b 	bl	8004c20 <__wrap___subsf3>
 8001aea:	23d7      	movs	r3, #215	; 0xd7
 8001aec:	6020      	str	r0, [r4, #0]
 8001aee:	6820      	ldr	r0, [r4, #0]
 8001af0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001af4:	f004 f8cc 	bl	8005c90 <__aeabi_f2d>
 8001af8:	a313      	add	r3, pc, #76	; (adr r3, 8001b48 <test_subsf3+0x120>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	e9cd 0100 	strd	r0, r1, [sp]
 8001b02:	a113      	add	r1, pc, #76	; (adr r1, 8001b50 <test_subsf3+0x128>)
 8001b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b08:	f002 fea2 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:216
}
 8001b0c:	b004      	add	sp, #16
 8001b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	b2fec56d 	.word	0xb2fec56d
 8001b1c:	409e393b 	.word	0x409e393b
 8001b20:	b8e36ea1 	.word	0xb8e36ea1
 8001b24:	3f5fb113 	.word	0x3f5fb113
 8001b28:	c6a7ef9e 	.word	0xc6a7ef9e
 8001b2c:	c0a3582b 	.word	0xc0a3582b
 8001b30:	47d3c2fa 	.word	0x47d3c2fa
 8001b34:	bf6448ba 	.word	0xbf6448ba
 8001b38:	c6a7ef9e 	.word	0xc6a7ef9e
 8001b3c:	40a3582b 	.word	0x40a3582b
 8001b40:	47d3c2fa 	.word	0x47d3c2fa
 8001b44:	3f6448ba 	.word	0x3f6448ba
 8001b48:	b2fec56d 	.word	0xb2fec56d
 8001b4c:	c09e393b 	.word	0xc09e393b
 8001b50:	b8e36ea1 	.word	0xb8e36ea1
 8001b54:	bf5fb113 	.word	0xbf5fb113
 8001b58:	20000020 	.word	0x20000020
 8001b5c:	20000030 	.word	0x20000030
 8001b60:	20000008 	.word	0x20000008
 8001b64:	4509d327 	.word	0x4509d327
 8001b68:	438771be 	.word	0x438771be
 8001b6c:	c509d327 	.word	0xc509d327
 8001b70:	c38771be 	.word	0xc38771be
 8001b74:	00000000 	.word	0x00000000

08001b78 <test_mulsf3>:
test_mulsf3():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:218
void test_mulsf3(void) {
 8001b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:219
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___mulsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , rf );
 8001b7c:	4e42      	ldr	r6, [pc, #264]	; (8001c88 <test_mulsf3+0x110>)
 8001b7e:	4d43      	ldr	r5, [pc, #268]	; (8001c8c <test_mulsf3+0x114>)
 8001b80:	f8df a110 	ldr.w	sl, [pc, #272]	; 8001c94 <test_mulsf3+0x11c>
 8001b84:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001c98 <test_mulsf3+0x120>
 8001b88:	f8c6 a000 	str.w	sl, [r6]
 8001b8c:	f8c5 8000 	str.w	r8, [r5]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:218
void test_mulsf3(void) {
 8001b90:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:219
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___mulsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , rf );
 8001b92:	6830      	ldr	r0, [r6, #0]
 8001b94:	6829      	ldr	r1, [r5, #0]
 8001b96:	f003 f84b 	bl	8004c30 <__wrap___mulsf3>
 8001b9a:	2700      	movs	r7, #0
 8001b9c:	23db      	movs	r3, #219	; 0xdb
 8001b9e:	4c3c      	ldr	r4, [pc, #240]	; (8001c90 <test_mulsf3+0x118>)
 8001ba0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001ba4:	6020      	str	r0, [r4, #0]
 8001ba6:	6820      	ldr	r0, [r4, #0]
 8001ba8:	f004 f872 	bl	8005c90 <__aeabi_f2d>
 8001bac:	a32e      	add	r3, pc, #184	; (adr r3, 8001c68 <test_mulsf3+0xf0>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:220
xf = -2205.1969; yf = 270.8886;  rf = __wrap___mulsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -597362.70096534   , rf );
 8001bb2:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8001c9c <test_mulsf3+0x124>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:219
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___mulsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , rf );
 8001bb6:	e9cd 0100 	strd	r0, r1, [sp]
 8001bba:	a12d      	add	r1, pc, #180	; (adr r1, 8001c70 <test_mulsf3+0xf8>)
 8001bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bc0:	f002 fe46 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:220
xf = -2205.1969; yf = 270.8886;  rf = __wrap___mulsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -597362.70096534   , rf );
 8001bc4:	f8c6 b000 	str.w	fp, [r6]
 8001bc8:	f8c5 8000 	str.w	r8, [r5]
 8001bcc:	6830      	ldr	r0, [r6, #0]
 8001bce:	6829      	ldr	r1, [r5, #0]
 8001bd0:	f003 f82e 	bl	8004c30 <__wrap___mulsf3>
 8001bd4:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
 8001bd8:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001bdc:	23dc      	movs	r3, #220	; 0xdc
 8001bde:	6020      	str	r0, [r4, #0]
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001be6:	f004 f853 	bl	8005c90 <__aeabi_f2d>
 8001bea:	4642      	mov	r2, r8
 8001bec:	464b      	mov	r3, r9
 8001bee:	e9cd 0100 	strd	r0, r1, [sp]
 8001bf2:	a123      	add	r1, pc, #140	; (adr r1, 8001c80 <test_mulsf3+0x108>)
 8001bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bf8:	f002 fe2a 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:221
xf = 2205.1969;  yf = -270.8886; rf = __wrap___mulsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -597362.70096534   , rf );
 8001bfc:	f8c6 a000 	str.w	sl, [r6]
 8001c00:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8001ca0 <test_mulsf3+0x128>
 8001c04:	f8c5 a000 	str.w	sl, [r5]
 8001c08:	6830      	ldr	r0, [r6, #0]
 8001c0a:	6829      	ldr	r1, [r5, #0]
 8001c0c:	f003 f810 	bl	8004c30 <__wrap___mulsf3>
 8001c10:	23dd      	movs	r3, #221	; 0xdd
 8001c12:	6020      	str	r0, [r4, #0]
 8001c14:	6820      	ldr	r0, [r4, #0]
 8001c16:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001c1a:	f004 f839 	bl	8005c90 <__aeabi_f2d>
 8001c1e:	4642      	mov	r2, r8
 8001c20:	464b      	mov	r3, r9
 8001c22:	e9cd 0100 	strd	r0, r1, [sp]
 8001c26:	a116      	add	r1, pc, #88	; (adr r1, 8001c80 <test_mulsf3+0x108>)
 8001c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c2c:	f002 fe10 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:222
xf = -2205.1969; yf = -270.8886; rf = __wrap___mulsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 597362.70096534    , rf );
 8001c30:	f8c6 b000 	str.w	fp, [r6]
 8001c34:	f8c5 a000 	str.w	sl, [r5]
 8001c38:	6830      	ldr	r0, [r6, #0]
 8001c3a:	6829      	ldr	r1, [r5, #0]
 8001c3c:	f002 fff8 	bl	8004c30 <__wrap___mulsf3>
 8001c40:	23de      	movs	r3, #222	; 0xde
 8001c42:	6020      	str	r0, [r4, #0]
 8001c44:	6820      	ldr	r0, [r4, #0]
 8001c46:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001c4a:	f004 f821 	bl	8005c90 <__aeabi_f2d>
 8001c4e:	a306      	add	r3, pc, #24	; (adr r3, 8001c68 <test_mulsf3+0xf0>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	e9cd 0100 	strd	r0, r1, [sp]
 8001c58:	a105      	add	r1, pc, #20	; (adr r1, 8001c70 <test_mulsf3+0xf8>)
 8001c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c5e:	f002 fdf7 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:223
}
 8001c62:	b005      	add	sp, #20
 8001c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c68:	66e4edd6 	.word	0x66e4edd6
 8001c6c:	41223ae5 	.word	0x41223ae5
 8001c70:	620fe234 	.word	0x620fe234
 8001c74:	3fe31d98 	.word	0x3fe31d98
 8001c78:	66e4edd6 	.word	0x66e4edd6
 8001c7c:	c1223ae5 	.word	0xc1223ae5
 8001c80:	620fe234 	.word	0x620fe234
 8001c84:	bfe31d98 	.word	0xbfe31d98
 8001c88:	20000020 	.word	0x20000020
 8001c8c:	20000030 	.word	0x20000030
 8001c90:	20000008 	.word	0x20000008
 8001c94:	4509d327 	.word	0x4509d327
 8001c98:	438771be 	.word	0x438771be
 8001c9c:	c509d327 	.word	0xc509d327
 8001ca0:	c38771be 	.word	0xc38771be
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <test_divsf3>:
test_divsf3():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:225
void test_divsf3(void) {
 8001ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:226
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___divsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 8.140604292687105  , rf );
 8001cac:	4e42      	ldr	r6, [pc, #264]	; (8001db8 <test_divsf3+0x110>)
 8001cae:	4d43      	ldr	r5, [pc, #268]	; (8001dbc <test_divsf3+0x114>)
 8001cb0:	f8df a110 	ldr.w	sl, [pc, #272]	; 8001dc4 <test_divsf3+0x11c>
 8001cb4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001dc8 <test_divsf3+0x120>
 8001cb8:	f8c6 a000 	str.w	sl, [r6]
 8001cbc:	f8c5 8000 	str.w	r8, [r5]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:225
void test_divsf3(void) {
 8001cc0:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:226
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___divsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 8.140604292687105  , rf );
 8001cc2:	6830      	ldr	r0, [r6, #0]
 8001cc4:	6829      	ldr	r1, [r5, #0]
 8001cc6:	f002 ffbb 	bl	8004c40 <__wrap___divsf3>
 8001cca:	2700      	movs	r7, #0
 8001ccc:	23e2      	movs	r3, #226	; 0xe2
 8001cce:	4c3c      	ldr	r4, [pc, #240]	; (8001dc0 <test_divsf3+0x118>)
 8001cd0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001cd4:	6020      	str	r0, [r4, #0]
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	f003 ffda 	bl	8005c90 <__aeabi_f2d>
 8001cdc:	a32e      	add	r3, pc, #184	; (adr r3, 8001d98 <test_divsf3+0xf0>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:227
xf = -2205.1969; yf = 270.8886;  rf = __wrap___divsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -8.140604292687105 , rf );
 8001ce2:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8001dcc <test_divsf3+0x124>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:226
xf = 2205.1969;  yf = 270.8886;  rf = __wrap___divsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 8.140604292687105  , rf );
 8001ce6:	e9cd 0100 	strd	r0, r1, [sp]
 8001cea:	a12d      	add	r1, pc, #180	; (adr r1, 8001da0 <test_divsf3+0xf8>)
 8001cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cf0:	f002 fdae 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:227
xf = -2205.1969; yf = 270.8886;  rf = __wrap___divsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -8.140604292687105 , rf );
 8001cf4:	f8c6 b000 	str.w	fp, [r6]
 8001cf8:	f8c5 8000 	str.w	r8, [r5]
 8001cfc:	6830      	ldr	r0, [r6, #0]
 8001cfe:	6829      	ldr	r1, [r5, #0]
 8001d00:	f002 ff9e 	bl	8004c40 <__wrap___divsf3>
 8001d04:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
 8001d08:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001d0c:	23e3      	movs	r3, #227	; 0xe3
 8001d0e:	6020      	str	r0, [r4, #0]
 8001d10:	6820      	ldr	r0, [r4, #0]
 8001d12:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001d16:	f003 ffbb 	bl	8005c90 <__aeabi_f2d>
 8001d1a:	4642      	mov	r2, r8
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	e9cd 0100 	strd	r0, r1, [sp]
 8001d22:	a123      	add	r1, pc, #140	; (adr r1, 8001db0 <test_divsf3+0x108>)
 8001d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d28:	f002 fd92 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:228
xf = 2205.1969;  yf = -270.8886; rf = __wrap___divsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( -8.140604292687105 , rf );
 8001d2c:	f8c6 a000 	str.w	sl, [r6]
 8001d30:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8001dd0 <test_divsf3+0x128>
 8001d34:	f8c5 a000 	str.w	sl, [r5]
 8001d38:	6830      	ldr	r0, [r6, #0]
 8001d3a:	6829      	ldr	r1, [r5, #0]
 8001d3c:	f002 ff80 	bl	8004c40 <__wrap___divsf3>
 8001d40:	23e4      	movs	r3, #228	; 0xe4
 8001d42:	6020      	str	r0, [r4, #0]
 8001d44:	6820      	ldr	r0, [r4, #0]
 8001d46:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001d4a:	f003 ffa1 	bl	8005c90 <__aeabi_f2d>
 8001d4e:	4642      	mov	r2, r8
 8001d50:	464b      	mov	r3, r9
 8001d52:	e9cd 0100 	strd	r0, r1, [sp]
 8001d56:	a116      	add	r1, pc, #88	; (adr r1, 8001db0 <test_divsf3+0x108>)
 8001d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d5c:	f002 fd78 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:229
xf = -2205.1969; yf = -270.8886; rf = __wrap___divsf3(xf, yf);         TEST_ASSERT_EQUAL_DOUBLE( 8.140604292687105  , rf );
 8001d60:	f8c6 b000 	str.w	fp, [r6]
 8001d64:	f8c5 a000 	str.w	sl, [r5]
 8001d68:	6830      	ldr	r0, [r6, #0]
 8001d6a:	6829      	ldr	r1, [r5, #0]
 8001d6c:	f002 ff68 	bl	8004c40 <__wrap___divsf3>
 8001d70:	23e5      	movs	r3, #229	; 0xe5
 8001d72:	6020      	str	r0, [r4, #0]
 8001d74:	6820      	ldr	r0, [r4, #0]
 8001d76:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001d7a:	f003 ff89 	bl	8005c90 <__aeabi_f2d>
 8001d7e:	a306      	add	r3, pc, #24	; (adr r3, 8001d98 <test_divsf3+0xf0>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	e9cd 0100 	strd	r0, r1, [sp]
 8001d88:	a105      	add	r1, pc, #20	; (adr r1, 8001da0 <test_divsf3+0xf8>)
 8001d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d8e:	f002 fd5f 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:230
}
 8001d92:	b005      	add	sp, #20
 8001d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d98:	492d8962 	.word	0x492d8962
 8001d9c:	402047fd 	.word	0x402047fd
 8001da0:	22763b8c 	.word	0x22763b8c
 8001da4:	3ee11274 	.word	0x3ee11274
 8001da8:	492d8962 	.word	0x492d8962
 8001dac:	c02047fd 	.word	0xc02047fd
 8001db0:	22763b8c 	.word	0x22763b8c
 8001db4:	bee11274 	.word	0xbee11274
 8001db8:	20000020 	.word	0x20000020
 8001dbc:	20000030 	.word	0x20000030
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	4509d327 	.word	0x4509d327
 8001dc8:	438771be 	.word	0x438771be
 8001dcc:	c509d327 	.word	0xc509d327
 8001dd0:	c38771be 	.word	0xc38771be
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <test_sqrt>:
test_sqrt():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:232
void test_sqrt(void) {
 8001dd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:233
x = 100;       r = sqrt(x);     TEST_ASSERT_EQUAL_DOUBLE( 10.000000   , r );
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4d2c      	ldr	r5, [pc, #176]	; (8001e90 <test_sqrt+0xb8>)
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <test_sqrt+0xbc>)
 8001de0:	4c2d      	ldr	r4, [pc, #180]	; (8001e98 <test_sqrt+0xc0>)
 8001de2:	e9c5 2300 	strd	r2, r3, [r5]
 8001de6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001dea:	f002 ff31 	bl	8004c50 <sqrt>
 8001dee:	2600      	movs	r6, #0
 8001df0:	e9c4 0100 	strd	r0, r1, [r4]
 8001df4:	21e9      	movs	r1, #233	; 0xe9
 8001df6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001dfa:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001dfe:	a11e      	add	r1, pc, #120	; (adr r1, 8001e78 <test_sqrt+0xa0>)
 8001e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e04:	e9cd 2300 	strd	r2, r3, [sp]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <test_sqrt+0xc4>)
 8001e0c:	f002 fd20 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:234
x = 2;         r = sqrt(x);     TEST_ASSERT_EQUAL_DOUBLE( 1.414214    , r );
 8001e10:	2200      	movs	r2, #0
 8001e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e16:	e9c5 2300 	strd	r2, r3, [r5]
 8001e1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001e1e:	f002 ff17 	bl	8004c50 <sqrt>
 8001e22:	e9c4 0100 	strd	r0, r1, [r4]
 8001e26:	21ea      	movs	r1, #234	; 0xea
 8001e28:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001e2c:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001e30:	a113      	add	r1, pc, #76	; (adr r1, 8001e80 <test_sqrt+0xa8>)
 8001e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e36:	e9cd 2300 	strd	r2, r3, [sp]
 8001e3a:	a313      	add	r3, pc, #76	; (adr r3, 8001e88 <test_sqrt+0xb0>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f002 fd06 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:235
x = -0;        r = sqrt(x);     TEST_ASSERT_EQUAL_DOUBLE( -0.000000   , r );
 8001e44:	2200      	movs	r2, #0
 8001e46:	2300      	movs	r3, #0
 8001e48:	e9c5 2300 	strd	r2, r3, [r5]
 8001e4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001e50:	f002 fefe 	bl	8004c50 <sqrt>
 8001e54:	e9c4 0100 	strd	r0, r1, [r4]
 8001e58:	21eb      	movs	r1, #235	; 0xeb
 8001e5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001e5e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e68:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f002 fcee 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:237
}
 8001e74:	b004      	add	sp, #16
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
 8001e78:	88e368f0 	.word	0x88e368f0
 8001e7c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001e80:	bcb6c115 	.word	0xbcb6c115
 8001e84:	3eb7ba00 	.word	0x3eb7ba00
 8001e88:	dbf8b9bb 	.word	0xdbf8b9bb
 8001e8c:	3ff6a09e 	.word	0x3ff6a09e
 8001e90:	20000018 	.word	0x20000018
 8001e94:	40590000 	.word	0x40590000
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	40240000 	.word	0x40240000

08001ea0 <test_log>:
test_log():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:239
void test_log(void) {
 8001ea0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:240
x = 1;         r = log(x);      TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4d2e      	ldr	r5, [pc, #184]	; (8001f60 <test_log+0xc0>)
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <test_log+0xc4>)
 8001ea8:	4c2f      	ldr	r4, [pc, #188]	; (8001f68 <test_log+0xc8>)
 8001eaa:	e9c5 2300 	strd	r2, r3, [r5]
 8001eae:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001eb2:	f002 fedb 	bl	8004c6c <log>
 8001eb6:	e9c4 0100 	strd	r0, r1, [r4]
 8001eba:	2600      	movs	r6, #0
 8001ebc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001ec0:	21f0      	movs	r1, #240	; 0xf0
 8001ec2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f002 fcbd 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:241
x = 2;         r = log(x);      TEST_ASSERT_EQUAL_DOUBLE( _M_LN2      , r );
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001edc:	e9c5 2300 	strd	r2, r3, [r5]
 8001ee0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001ee4:	f002 fec2 	bl	8004c6c <log>
 8001ee8:	e9c4 0100 	strd	r0, r1, [r4]
 8001eec:	21f1      	movs	r1, #241	; 0xf1
 8001eee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001ef2:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001ef6:	a112      	add	r1, pc, #72	; (adr r1, 8001f40 <test_log+0xa0>)
 8001ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001efc:	e9cd 2300 	strd	r2, r3, [sp]
 8001f00:	a311      	add	r3, pc, #68	; (adr r3, 8001f48 <test_log+0xa8>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f002 fca3 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:242
x = 10;        r = log(x);      TEST_ASSERT_EQUAL_DOUBLE( M_LN10      , r );
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <test_log+0xcc>)
 8001f0e:	e9c5 2300 	strd	r2, r3, [r5]
 8001f12:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001f16:	f002 fea9 	bl	8004c6c <log>
 8001f1a:	e9c4 0100 	strd	r0, r1, [r4]
 8001f1e:	21f2      	movs	r1, #242	; 0xf2
 8001f20:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001f24:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001f28:	a109      	add	r1, pc, #36	; (adr r1, 8001f50 <test_log+0xb0>)
 8001f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8001f32:	a309      	add	r3, pc, #36	; (adr r3, 8001f58 <test_log+0xb8>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f002 fc8a 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:245
}
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}
 8001f40:	c502a54f 	.word	0xc502a54f
 8001f44:	3ea74216 	.word	0x3ea74216
 8001f48:	fefa39ef 	.word	0xfefa39ef
 8001f4c:	3fe62e42 	.word	0x3fe62e42
 8001f50:	8ab65ff0 	.word	0x8ab65ff0
 8001f54:	3ec350c3 	.word	0x3ec350c3
 8001f58:	bbb55516 	.word	0xbbb55516
 8001f5c:	40026bb1 	.word	0x40026bb1
 8001f60:	20000018 	.word	0x20000018
 8001f64:	3ff00000 	.word	0x3ff00000
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	40240000 	.word	0x40240000

08001f70 <test_exp>:
test_exp():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:247
void test_exp(void) {
 8001f70:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:248
x = 1;         r = exp(x);      TEST_ASSERT_EQUAL_DOUBLE( 2.718282    , r );
 8001f74:	f04f 0800 	mov.w	r8, #0
 8001f78:	4d43      	ldr	r5, [pc, #268]	; (8002088 <test_exp+0x118>)
 8001f7a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002094 <test_exp+0x124>
 8001f7e:	4c43      	ldr	r4, [pc, #268]	; (800208c <test_exp+0x11c>)
 8001f80:	e9c5 8900 	strd	r8, r9, [r5]
 8001f84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001f88:	f002 fe7e 	bl	8004c88 <exp>
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	e9c4 0100 	strd	r0, r1, [r4]
 8001f92:	21f8      	movs	r1, #248	; 0xf8
 8001f94:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001f98:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001f9c:	a12c      	add	r1, pc, #176	; (adr r1, 8002050 <test_exp+0xe0>)
 8001f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fa2:	e9cd 2300 	strd	r2, r3, [sp]
 8001fa6:	a32c      	add	r3, pc, #176	; (adr r3, 8002058 <test_exp+0xe8>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f002 fc50 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:249
x = _M_LN2;    r = exp(x);      TEST_ASSERT_EQUAL_DOUBLE( 2           , r );
 8001fb0:	a32b      	add	r3, pc, #172	; (adr r3, 8002060 <test_exp+0xf0>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	e9c5 2300 	strd	r2, r3, [r5]
 8001fba:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001fbe:	f002 fe63 	bl	8004c88 <exp>
 8001fc2:	e9c4 0100 	strd	r0, r1, [r4]
 8001fc6:	21f9      	movs	r1, #249	; 0xf9
 8001fc8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001fcc:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001fd0:	a125      	add	r1, pc, #148	; (adr r1, 8002068 <test_exp+0xf8>)
 8001fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe0:	f002 fc36 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:250
x = M_LN10;    r = exp(x);      TEST_ASSERT_EQUAL_DOUBLE( 10          , r );
 8001fe4:	a322      	add	r3, pc, #136	; (adr r3, 8002070 <test_exp+0x100>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	e9c5 2300 	strd	r2, r3, [r5]
 8001fee:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001ff2:	f002 fe49 	bl	8004c88 <exp>
 8001ff6:	e9c4 0100 	strd	r0, r1, [r4]
 8001ffa:	21fa      	movs	r1, #250	; 0xfa
 8001ffc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002000:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002004:	a11c      	add	r1, pc, #112	; (adr r1, 8002078 <test_exp+0x108>)
 8002006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800200a:	e9cd 2300 	strd	r2, r3, [sp]
 800200e:	2200      	movs	r2, #0
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <test_exp+0x120>)
 8002012:	f002 fc1d 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:251
x = -0;        r = exp(x);      TEST_ASSERT_EQUAL_DOUBLE( 1.000000    , r );
 8002016:	2200      	movs	r2, #0
 8002018:	2300      	movs	r3, #0
 800201a:	e9c5 2300 	strd	r2, r3, [r5]
 800201e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002022:	f002 fe31 	bl	8004c88 <exp>
 8002026:	e9c4 0100 	strd	r0, r1, [r4]
 800202a:	21fb      	movs	r1, #251	; 0xfb
 800202c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002030:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002034:	a112      	add	r1, pc, #72	; (adr r1, 8002080 <test_exp+0x110>)
 8002036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800203a:	e9cd 2300 	strd	r2, r3, [sp]
 800203e:	4642      	mov	r2, r8
 8002040:	464b      	mov	r3, r9
 8002042:	f002 fc05 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:253
}
 8002046:	b004      	add	sp, #16
 8002048:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800204c:	f3af 8000 	nop.w
 8002050:	55524dac 	.word	0x55524dac
 8002054:	3ec6cd77 	.word	0x3ec6cd77
 8002058:	a21a719b 	.word	0xa21a719b
 800205c:	4005bf0a 	.word	0x4005bf0a
 8002060:	fefa39ef 	.word	0xfefa39ef
 8002064:	3fe62e42 	.word	0x3fe62e42
 8002068:	a0b5ed8d 	.word	0xa0b5ed8d
 800206c:	3ec0c6f7 	.word	0x3ec0c6f7
 8002070:	bbb55516 	.word	0xbbb55516
 8002074:	40026bb1 	.word	0x40026bb1
 8002078:	88e368f0 	.word	0x88e368f0
 800207c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002080:	a0b5ed8d 	.word	0xa0b5ed8d
 8002084:	3eb0c6f7 	.word	0x3eb0c6f7
 8002088:	20000018 	.word	0x20000018
 800208c:	20000000 	.word	0x20000000
 8002090:	40240000 	.word	0x40240000
 8002094:	3ff00000 	.word	0x3ff00000

08002098 <test_log2>:
test_log2():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:255
void test_log2(void) {
 8002098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:256
x = 65536;      r = log2(x);                  TEST_ASSERT_EQUAL_DOUBLE( 16.000000          , r );
 800209a:	2200      	movs	r2, #0
 800209c:	4d3c      	ldr	r5, [pc, #240]	; (8002190 <test_log2+0xf8>)
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <test_log2+0xfc>)
 80020a0:	4c3d      	ldr	r4, [pc, #244]	; (8002198 <test_log2+0x100>)
 80020a2:	e9c5 2300 	strd	r2, r3, [r5]
 80020a6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80020aa:	f002 fdfb 	bl	8004ca4 <log2>
 80020ae:	2600      	movs	r6, #0
 80020b0:	e9c4 0100 	strd	r0, r1, [r4]
 80020b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80020bc:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80020c0:	a12b      	add	r1, pc, #172	; (adr r1, 8002170 <test_log2+0xd8>)
 80020c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020c6:	e9cd 2300 	strd	r2, r3, [sp]
 80020ca:	2200      	movs	r2, #0
 80020cc:	4b33      	ldr	r3, [pc, #204]	; (800219c <test_log2+0x104>)
 80020ce:	f002 fbbf 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:257
x = 0.125;      r = log2(x);                  TEST_ASSERT_EQUAL_DOUBLE( -3.000000          , r );
 80020d2:	2200      	movs	r2, #0
 80020d4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80020d8:	e9c5 2300 	strd	r2, r3, [r5]
 80020dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80020e0:	f002 fde0 	bl	8004ca4 <log2>
 80020e4:	e9c4 0100 	strd	r0, r1, [r4]
 80020e8:	f240 1101 	movw	r1, #257	; 0x101
 80020ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80020f0:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80020f4:	a120      	add	r1, pc, #128	; (adr r1, 8002178 <test_log2+0xe0>)
 80020f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020fa:	e9cd 2300 	strd	r2, r3, [sp]
 80020fe:	2200      	movs	r2, #0
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <test_log2+0x108>)
 8002102:	f002 fba5 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:258
x = 527;        r = log2(x);                  TEST_ASSERT_EQUAL_DOUBLE( 9.041659           , r );
 8002106:	2200      	movs	r2, #0
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <test_log2+0x10c>)
 800210a:	e9c5 2300 	strd	r2, r3, [r5]
 800210e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002112:	f002 fdc7 	bl	8004ca4 <log2>
 8002116:	e9c4 0100 	strd	r0, r1, [r4]
 800211a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800211e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002122:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002126:	a116      	add	r1, pc, #88	; (adr r1, 8002180 <test_log2+0xe8>)
 8002128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800212c:	e9cd 2300 	strd	r2, r3, [sp]
 8002130:	a315      	add	r3, pc, #84	; (adr r3, 8002188 <test_log2+0xf0>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f002 fb8b 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:259
x = 1;          r = log2(x);                  TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 800213a:	2200      	movs	r2, #0
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <test_log2+0x110>)
 800213e:	e9c5 2300 	strd	r2, r3, [r5]
 8002142:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002146:	f002 fdad 	bl	8004ca4 <log2>
 800214a:	e9c4 0100 	strd	r0, r1, [r4]
 800214e:	f240 1103 	movw	r1, #259	; 0x103
 8002152:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002156:	e9cd 2300 	strd	r2, r3, [sp]
 800215a:	2200      	movs	r2, #0
 800215c:	2300      	movs	r3, #0
 800215e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f002 fb73 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:260
}
 800216a:	b004      	add	sp, #16
 800216c:	bd70      	pop	{r4, r5, r6, pc}
 800216e:	bf00      	nop
 8002170:	a0b5ed8d 	.word	0xa0b5ed8d
 8002174:	3ef0c6f7 	.word	0x3ef0c6f7
 8002178:	7110e454 	.word	0x7110e454
 800217c:	bec92a73 	.word	0xbec92a73
 8002180:	268e6c13 	.word	0x268e6c13
 8002184:	3ee2f634 	.word	0x3ee2f634
 8002188:	54152b0a 	.word	0x54152b0a
 800218c:	40221554 	.word	0x40221554
 8002190:	20000018 	.word	0x20000018
 8002194:	40f00000 	.word	0x40f00000
 8002198:	20000000 	.word	0x20000000
 800219c:	40300000 	.word	0x40300000
 80021a0:	c0080000 	.word	0xc0080000
 80021a4:	40807800 	.word	0x40807800
 80021a8:	3ff00000 	.word	0x3ff00000
 80021ac:	00000000 	.word	0x00000000

080021b0 <test_log10>:
test_log10():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:262
void test_log10(void) {
 80021b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:263
x = 1000;      r = log10(x);    TEST_ASSERT_EQUAL_DOUBLE( 3.000000    , r );
 80021b2:	2200      	movs	r2, #0
 80021b4:	4d2e      	ldr	r5, [pc, #184]	; (8002270 <test_log10+0xc0>)
 80021b6:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <test_log10+0xc4>)
 80021b8:	4c2f      	ldr	r4, [pc, #188]	; (8002278 <test_log10+0xc8>)
 80021ba:	e9c5 2300 	strd	r2, r3, [r5]
 80021be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80021c2:	f002 fd83 	bl	8004ccc <log10>
 80021c6:	2600      	movs	r6, #0
 80021c8:	e9c4 0100 	strd	r0, r1, [r4]
 80021cc:	f240 1107 	movw	r1, #263	; 0x107
 80021d0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80021d4:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80021d8:	a11f      	add	r1, pc, #124	; (adr r1, 8002258 <test_log10+0xa8>)
 80021da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021de:	e9cd 2300 	strd	r2, r3, [sp]
 80021e2:	2200      	movs	r2, #0
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <test_log10+0xcc>)
 80021e6:	f002 fb33 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:264
x = 0.001;     r = log10(x);    TEST_ASSERT_EQUAL_DOUBLE( -3.000000   , r );
 80021ea:	a31d      	add	r3, pc, #116	; (adr r3, 8002260 <test_log10+0xb0>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	e9c5 2300 	strd	r2, r3, [r5]
 80021f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80021f8:	f002 fd68 	bl	8004ccc <log10>
 80021fc:	e9c4 0100 	strd	r0, r1, [r4]
 8002200:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002204:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002208:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800220c:	a116      	add	r1, pc, #88	; (adr r1, 8002268 <test_log10+0xb8>)
 800220e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002212:	e9cd 2300 	strd	r2, r3, [sp]
 8002216:	2200      	movs	r2, #0
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <test_log10+0xd0>)
 800221a:	f002 fb19 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:265
x = 1;         r = log10(x);    TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 800221e:	2200      	movs	r2, #0
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <test_log10+0xd4>)
 8002222:	e9c5 2300 	strd	r2, r3, [r5]
 8002226:	e9d5 0100 	ldrd	r0, r1, [r5]
 800222a:	f002 fd4f 	bl	8004ccc <log10>
 800222e:	e9c4 0100 	strd	r0, r1, [r4]
 8002232:	f240 1109 	movw	r1, #265	; 0x109
 8002236:	e9d4 2300 	ldrd	r2, r3, [r4]
 800223a:	e9cd 2300 	strd	r2, r3, [sp]
 800223e:	2200      	movs	r2, #0
 8002240:	2300      	movs	r3, #0
 8002242:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f002 fb01 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:268
}
 800224e:	b004      	add	sp, #16
 8002250:	bd70      	pop	{r4, r5, r6, pc}
 8002252:	bf00      	nop
 8002254:	f3af 8000 	nop.w
 8002258:	7110e454 	.word	0x7110e454
 800225c:	3ec92a73 	.word	0x3ec92a73
 8002260:	d2f1a9fc 	.word	0xd2f1a9fc
 8002264:	3f50624d 	.word	0x3f50624d
 8002268:	7110e454 	.word	0x7110e454
 800226c:	bec92a73 	.word	0xbec92a73
 8002270:	20000018 	.word	0x20000018
 8002274:	408f4000 	.word	0x408f4000
 8002278:	20000000 	.word	0x20000000
 800227c:	40080000 	.word	0x40080000
 8002280:	c0080000 	.word	0xc0080000
 8002284:	3ff00000 	.word	0x3ff00000

08002288 <test_pow>:
test_pow():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:270
void test_pow(void) {
 8002288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:271
x = 2;         y = 10;   r = pow(x, y);      TEST_ASSERT_EQUAL_DOUBLE( 1024.000000 , r );
 800228c:	2200      	movs	r2, #0
 800228e:	f04f 0800 	mov.w	r8, #0
 8002292:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8002296:	4e3a      	ldr	r6, [pc, #232]	; (8002380 <test_pow+0xf8>)
 8002298:	4d3a      	ldr	r5, [pc, #232]	; (8002384 <test_pow+0xfc>)
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <test_pow+0x100>)
 800229c:	e9c6 8900 	strd	r8, r9, [r6]
 80022a0:	e9c5 2300 	strd	r2, r3, [r5]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:270
void test_pow(void) {
 80022a4:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:271
x = 2;         y = 10;   r = pow(x, y);      TEST_ASSERT_EQUAL_DOUBLE( 1024.000000 , r );
 80022a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80022aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80022ae:	f002 fd21 	bl	8004cf4 <pow>
 80022b2:	4c36      	ldr	r4, [pc, #216]	; (800238c <test_pow+0x104>)
 80022b4:	2700      	movs	r7, #0
 80022b6:	e9c4 0100 	strd	r0, r1, [r4]
 80022ba:	f240 110f 	movw	r1, #271	; 0x10f
 80022be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80022c2:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80022c6:	a126      	add	r1, pc, #152	; (adr r1, 8002360 <test_pow+0xd8>)
 80022c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022cc:	e9cd 2300 	strd	r2, r3, [sp]
 80022d0:	2200      	movs	r2, #0
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <test_pow+0x108>)
 80022d4:	f002 fabc 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:272
x = 2;         y = 0.5;  r = pow(x, y);      TEST_ASSERT_EQUAL_DOUBLE( 1.414214    , r );
 80022d8:	2200      	movs	r2, #0
 80022da:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <test_pow+0x10c>)
 80022dc:	e9c6 8900 	strd	r8, r9, [r6]
 80022e0:	e9c5 2300 	strd	r2, r3, [r5]
 80022e4:	e9d6 0100 	ldrd	r0, r1, [r6]
 80022e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80022ec:	f002 fd02 	bl	8004cf4 <pow>
 80022f0:	e9c4 0100 	strd	r0, r1, [r4]
 80022f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80022f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80022fc:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8002300:	a119      	add	r1, pc, #100	; (adr r1, 8002368 <test_pow+0xe0>)
 8002302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002306:	e9cd 2300 	strd	r2, r3, [sp]
 800230a:	a319      	add	r3, pc, #100	; (adr r3, 8002370 <test_pow+0xe8>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f002 fa9e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:273
x = -2;        y = -3;   r = pow(x, y);      TEST_ASSERT_EQUAL_DOUBLE( -0.125000   , r );
 8002314:	2200      	movs	r2, #0
 8002316:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800231a:	e9c6 2300 	strd	r2, r3, [r6]
 800231e:	2200      	movs	r2, #0
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <test_pow+0x110>)
 8002322:	e9c5 2300 	strd	r2, r3, [r5]
 8002326:	e9d6 0100 	ldrd	r0, r1, [r6]
 800232a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800232e:	f002 fce1 	bl	8004cf4 <pow>
 8002332:	e9c4 0100 	strd	r0, r1, [r4]
 8002336:	f240 1111 	movw	r1, #273	; 0x111
 800233a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800233e:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8002342:	a10d      	add	r1, pc, #52	; (adr r1, 8002378 <test_pow+0xf0>)
 8002344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002348:	e9cd 2300 	strd	r2, r3, [sp]
 800234c:	2200      	movs	r2, #0
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <test_pow+0x114>)
 8002350:	f002 fa7e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:279
}
 8002354:	b005      	add	sp, #20
 8002356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
 8002360:	a0b5ed8d 	.word	0xa0b5ed8d
 8002364:	3f50c6f7 	.word	0x3f50c6f7
 8002368:	bcb6c115 	.word	0xbcb6c115
 800236c:	3eb7ba00 	.word	0x3eb7ba00
 8002370:	dbf8b9bb 	.word	0xdbf8b9bb
 8002374:	3ff6a09e 	.word	0x3ff6a09e
 8002378:	a0b5ed8d 	.word	0xa0b5ed8d
 800237c:	be80c6f7 	.word	0xbe80c6f7
 8002380:	20000018 	.word	0x20000018
 8002384:	20000028 	.word	0x20000028
 8002388:	40240000 	.word	0x40240000
 800238c:	20000000 	.word	0x20000000
 8002390:	40900000 	.word	0x40900000
 8002394:	3fe00000 	.word	0x3fe00000
 8002398:	c0080000 	.word	0xc0080000
 800239c:	bfc00000 	.word	0xbfc00000

080023a0 <test_ldexp>:
test_ldexp():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:282
x = 7;         y = -4;   r = ldexp(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 0.437500    , r );
 80023a0:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:281
void test_ldexp(void) {
 80023a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:282
x = 7;         y = -4;   r = ldexp(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 0.437500    , r );
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <test_ldexp+0xb0>)
 80023a8:	4e2a      	ldr	r6, [pc, #168]	; (8002454 <test_ldexp+0xb4>)
 80023aa:	4d2b      	ldr	r5, [pc, #172]	; (8002458 <test_ldexp+0xb8>)
 80023ac:	e9c6 2300 	strd	r2, r3, [r6]
 80023b0:	2200      	movs	r2, #0
 80023b2:	4b2a      	ldr	r3, [pc, #168]	; (800245c <test_ldexp+0xbc>)
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:281
void test_ldexp(void) {
 80023b4:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:282
x = 7;         y = -4;   r = ldexp(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 0.437500    , r );
 80023b6:	e9c5 2300 	strd	r2, r3, [r5]
 80023ba:	e9d6 8900 	ldrd	r8, r9, [r6]
 80023be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80023c2:	f003 ff6d 	bl	80062a0 <__aeabi_d2iz>
 80023c6:	4649      	mov	r1, r9
 80023c8:	4602      	mov	r2, r0
 80023ca:	4640      	mov	r0, r8
 80023cc:	f002 fcd6 	bl	8004d7c <ldexp>
 80023d0:	4c23      	ldr	r4, [pc, #140]	; (8002460 <test_ldexp+0xc0>)
 80023d2:	2700      	movs	r7, #0
 80023d4:	e9c4 0100 	strd	r0, r1, [r4]
 80023d8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80023dc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80023e0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80023e4:	a118      	add	r1, pc, #96	; (adr r1, 8002448 <test_ldexp+0xa8>)
 80023e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023ea:	e9cd 2300 	strd	r2, r3, [sp]
 80023ee:	2200      	movs	r2, #0
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <test_ldexp+0xc4>)
 80023f2:	f002 fa2d 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:283
x = -0;        y = 10;   r = ldexp(x, y);    TEST_ASSERT_EQUAL_DOUBLE( -0.000000   , r );
 80023f6:	2200      	movs	r2, #0
 80023f8:	2300      	movs	r3, #0
 80023fa:	e9c6 2300 	strd	r2, r3, [r6]
 80023fe:	2200      	movs	r2, #0
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <test_ldexp+0xc8>)
 8002402:	e9c5 2300 	strd	r2, r3, [r5]
 8002406:	e9d6 8900 	ldrd	r8, r9, [r6]
 800240a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800240e:	f003 ff47 	bl	80062a0 <__aeabi_d2iz>
 8002412:	4649      	mov	r1, r9
 8002414:	4602      	mov	r2, r0
 8002416:	4640      	mov	r0, r8
 8002418:	f002 fcb0 	bl	8004d7c <ldexp>
 800241c:	e9c4 0100 	strd	r0, r1, [r4]
 8002420:	f240 111b 	movw	r1, #283	; 0x11b
 8002424:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002428:	e9cd 2300 	strd	r2, r3, [sp]
 800242c:	2200      	movs	r2, #0
 800242e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002432:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f002 fa09 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:286
}
 800243e:	b005      	add	sp, #20
 8002440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002444:	f3af 8000 	nop.w
 8002448:	593e5fb7 	.word	0x593e5fb7
 800244c:	3e9d5c31 	.word	0x3e9d5c31
 8002450:	401c0000 	.word	0x401c0000
 8002454:	20000018 	.word	0x20000018
 8002458:	20000028 	.word	0x20000028
 800245c:	c0100000 	.word	0xc0100000
 8002460:	20000000 	.word	0x20000000
 8002464:	3fdc0000 	.word	0x3fdc0000
 8002468:	40240000 	.word	0x40240000
 800246c:	00000000 	.word	0x00000000

08002470 <test_sin>:
test_sin():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:288
void test_sin(void) {
 8002470:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:289
x = pi/6;      r = sin(x);      TEST_ASSERT_EQUAL_DOUBLE( 0.500000    , r );
 8002474:	a342      	add	r3, pc, #264	; (adr r3, 8002580 <test_sin+0x110>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	4d4f      	ldr	r5, [pc, #316]	; (80025b8 <test_sin+0x148>)
 800247c:	4c4f      	ldr	r4, [pc, #316]	; (80025bc <test_sin+0x14c>)
 800247e:	e9c5 2300 	strd	r2, r3, [r5]
 8002482:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002486:	f002 fc99 	bl	8004dbc <sin>
 800248a:	2600      	movs	r6, #0
 800248c:	e9c4 0100 	strd	r0, r1, [r4]
 8002490:	f240 1121 	movw	r1, #289	; 0x121
 8002494:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002498:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800249c:	a13a      	add	r1, pc, #232	; (adr r1, 8002588 <test_sin+0x118>)
 800249e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024a2:	e9cd 2300 	strd	r2, r3, [sp]
 80024a6:	2200      	movs	r2, #0
 80024a8:	4b45      	ldr	r3, [pc, #276]	; (80025c0 <test_sin+0x150>)
 80024aa:	f002 f9d1 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:290
x = pi/2;      r = sin(x);      TEST_ASSERT_EQUAL_DOUBLE( 1.000000    , r );
 80024ae:	a338      	add	r3, pc, #224	; (adr r3, 8002590 <test_sin+0x120>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	e9c5 2300 	strd	r2, r3, [r5]
 80024b8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80024bc:	f002 fc7e 	bl	8004dbc <sin>
 80024c0:	e9c4 0100 	strd	r0, r1, [r4]
 80024c4:	f44f 7191 	mov.w	r1, #290	; 0x122
 80024c8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80024cc:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80024d0:	a131      	add	r1, pc, #196	; (adr r1, 8002598 <test_sin+0x128>)
 80024d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024d6:	e9cd 2300 	strd	r2, r3, [sp]
 80024da:	2200      	movs	r2, #0
 80024dc:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <test_sin+0x154>)
 80024de:	f002 f9b7 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:291
x = -3*pi/4;   r = sin(x);      TEST_ASSERT_EQUAL_DOUBLE( -0.707107   , r );
 80024e2:	a32f      	add	r3, pc, #188	; (adr r3, 80025a0 <test_sin+0x130>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	e9c5 2300 	strd	r2, r3, [r5]
 80024ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80024f0:	f002 fc64 	bl	8004dbc <sin>
 80024f4:	e9c4 0100 	strd	r0, r1, [r4]
 80024f8:	f240 1123 	movw	r1, #291	; 0x123
 80024fc:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:292
x = +0;        r = sin(x);      TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 8002500:	f04f 0800 	mov.w	r8, #0
 8002504:	f04f 0900 	mov.w	r9, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:291
x = -3*pi/4;   r = sin(x);      TEST_ASSERT_EQUAL_DOUBLE( -0.707107   , r );
 8002508:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800250c:	a126      	add	r1, pc, #152	; (adr r1, 80025a8 <test_sin+0x138>)
 800250e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002512:	e9cd 2300 	strd	r2, r3, [sp]
 8002516:	a326      	add	r3, pc, #152	; (adr r3, 80025b0 <test_sin+0x140>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	f002 f998 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:292
x = +0;        r = sin(x);      TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 8002520:	e9c5 8900 	strd	r8, r9, [r5]
 8002524:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002528:	f002 fc48 	bl	8004dbc <sin>
 800252c:	e9c4 0100 	strd	r0, r1, [r4]
 8002530:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002534:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002538:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800253c:	e9cd 2300 	strd	r2, r3, [sp]
 8002540:	4640      	mov	r0, r8
 8002542:	4642      	mov	r2, r8
 8002544:	464b      	mov	r3, r9
 8002546:	4649      	mov	r1, r9
 8002548:	f002 f982 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:293
x = -0;        r = sin(x);      TEST_ASSERT_EQUAL_DOUBLE( -0.000000   , r );
 800254c:	e9c5 8900 	strd	r8, r9, [r5]
 8002550:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002554:	f002 fc32 	bl	8004dbc <sin>
 8002558:	e9c4 0100 	strd	r0, r1, [r4]
 800255c:	f240 1125 	movw	r1, #293	; 0x125
 8002560:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002564:	e9cd 2300 	strd	r2, r3, [sp]
 8002568:	2200      	movs	r2, #0
 800256a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800256e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f002 f96b 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:295
}
 800257a:	b004      	add	sp, #16
 800257c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8002580:	382d7365 	.word	0x382d7365
 8002584:	3fe0c152 	.word	0x3fe0c152
 8002588:	a0b5ed8d 	.word	0xa0b5ed8d
 800258c:	3ea0c6f7 	.word	0x3ea0c6f7
 8002590:	54442d18 	.word	0x54442d18
 8002594:	3ff921fb 	.word	0x3ff921fb
 8002598:	a0b5ed8d 	.word	0xa0b5ed8d
 800259c:	3eb0c6f7 	.word	0x3eb0c6f7
 80025a0:	7f3321d2 	.word	0x7f3321d2
 80025a4:	c002d97c 	.word	0xc002d97c
 80025a8:	bcb6c115 	.word	0xbcb6c115
 80025ac:	bea7ba00 	.word	0xbea7ba00
 80025b0:	dbf8b9bb 	.word	0xdbf8b9bb
 80025b4:	bfe6a09e 	.word	0xbfe6a09e
 80025b8:	20000018 	.word	0x20000018
 80025bc:	20000000 	.word	0x20000000
 80025c0:	3fe00000 	.word	0x3fe00000
 80025c4:	3ff00000 	.word	0x3ff00000

080025c8 <test_cos>:
test_cos():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:297
void test_cos(void) {
 80025c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:298
x = pi/3;      r = cos(x);      TEST_ASSERT_EQUAL_DOUBLE( 0.500000    , r );
 80025cc:	a344      	add	r3, pc, #272	; (adr r3, 80026e0 <test_cos+0x118>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	4d51      	ldr	r5, [pc, #324]	; (8002718 <test_cos+0x150>)
 80025d4:	4c51      	ldr	r4, [pc, #324]	; (800271c <test_cos+0x154>)
 80025d6:	e9c5 2300 	strd	r2, r3, [r5]
 80025da:	e9d5 0100 	ldrd	r0, r1, [r5]
 80025de:	f002 fbfb 	bl	8004dd8 <cos>
 80025e2:	f04f 0a00 	mov.w	sl, #0
 80025e6:	e9c4 0100 	strd	r0, r1, [r4]
 80025ea:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80025ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80025f2:	e9cd a102 	strd	sl, r1, [sp, #8]
 80025f6:	a13c      	add	r1, pc, #240	; (adr r1, 80026e8 <test_cos+0x120>)
 80025f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002600:	2200      	movs	r2, #0
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <test_cos+0x158>)
 8002604:	f002 f924 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:299
x = pi/2;      r = cos(x);      TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 8002608:	a339      	add	r3, pc, #228	; (adr r3, 80026f0 <test_cos+0x128>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	e9c5 2300 	strd	r2, r3, [r5]
 8002612:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002616:	f002 fbdf 	bl	8004dd8 <cos>
 800261a:	2600      	movs	r6, #0
 800261c:	e9c4 0100 	strd	r0, r1, [r4]
 8002620:	2700      	movs	r7, #0
 8002622:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002626:	f240 112b 	movw	r1, #299	; 0x12b
 800262a:	e9cd 2300 	strd	r2, r3, [sp]
 800262e:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002632:	4632      	mov	r2, r6
 8002634:	463b      	mov	r3, r7
 8002636:	4630      	mov	r0, r6
 8002638:	4639      	mov	r1, r7
 800263a:	f002 f909 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:300
x = -3*pi/4;   r = cos(x);      TEST_ASSERT_EQUAL_DOUBLE( -0.707107   , r );
 800263e:	a32e      	add	r3, pc, #184	; (adr r3, 80026f8 <test_cos+0x130>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	e9c5 2300 	strd	r2, r3, [r5]
 8002648:	e9d5 0100 	ldrd	r0, r1, [r5]
 800264c:	f002 fbc4 	bl	8004dd8 <cos>
 8002650:	e9c4 0100 	strd	r0, r1, [r4]
 8002654:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002658:	e9d4 2300 	ldrd	r2, r3, [r4]
 800265c:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002660:	a127      	add	r1, pc, #156	; (adr r1, 8002700 <test_cos+0x138>)
 8002662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002666:	e9cd 2300 	strd	r2, r3, [sp]
 800266a:	a327      	add	r3, pc, #156	; (adr r3, 8002708 <test_cos+0x140>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	f002 f8ee 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:301
x = +0;        r = cos(x);      TEST_ASSERT_EQUAL_DOUBLE( 1.000000    , r );
 8002674:	e9c5 6700 	strd	r6, r7, [r5]
 8002678:	e9d5 0100 	ldrd	r0, r1, [r5]
 800267c:	f002 fbac 	bl	8004dd8 <cos>
 8002680:	f04f 0800 	mov.w	r8, #0
 8002684:	e9c4 0100 	strd	r0, r1, [r4]
 8002688:	f240 112d 	movw	r1, #301	; 0x12d
 800268c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002690:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8002724 <test_cos+0x15c>
 8002694:	e9cd 2300 	strd	r2, r3, [sp]
 8002698:	e9cd a102 	strd	sl, r1, [sp, #8]
 800269c:	a11c      	add	r1, pc, #112	; (adr r1, 8002710 <test_cos+0x148>)
 800269e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026a2:	4642      	mov	r2, r8
 80026a4:	464b      	mov	r3, r9
 80026a6:	f002 f8d3 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:302
x = -0;        r = cos(x);      TEST_ASSERT_EQUAL_DOUBLE( 1.000000    , r );
 80026aa:	e9c5 6700 	strd	r6, r7, [r5]
 80026ae:	e9d5 0100 	ldrd	r0, r1, [r5]
 80026b2:	f002 fb91 	bl	8004dd8 <cos>
 80026b6:	e9c4 0100 	strd	r0, r1, [r4]
 80026ba:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80026be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80026c2:	e9cd a102 	strd	sl, r1, [sp, #8]
 80026c6:	a112      	add	r1, pc, #72	; (adr r1, 8002710 <test_cos+0x148>)
 80026c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026cc:	e9cd 2300 	strd	r2, r3, [sp]
 80026d0:	4642      	mov	r2, r8
 80026d2:	464b      	mov	r3, r9
 80026d4:	f002 f8bc 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:304
}
 80026d8:	b004      	add	sp, #16
 80026da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026de:	bf00      	nop
 80026e0:	382d7365 	.word	0x382d7365
 80026e4:	3ff0c152 	.word	0x3ff0c152
 80026e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80026ec:	3ea0c6f7 	.word	0x3ea0c6f7
 80026f0:	54442d18 	.word	0x54442d18
 80026f4:	3ff921fb 	.word	0x3ff921fb
 80026f8:	7f3321d2 	.word	0x7f3321d2
 80026fc:	c002d97c 	.word	0xc002d97c
 8002700:	bcb6c115 	.word	0xbcb6c115
 8002704:	bea7ba00 	.word	0xbea7ba00
 8002708:	dbf8b9bb 	.word	0xdbf8b9bb
 800270c:	bfe6a09e 	.word	0xbfe6a09e
 8002710:	a0b5ed8d 	.word	0xa0b5ed8d
 8002714:	3eb0c6f7 	.word	0x3eb0c6f7
 8002718:	20000018 	.word	0x20000018
 800271c:	20000000 	.word	0x20000000
 8002720:	3fe00000 	.word	0x3fe00000
 8002724:	3ff00000 	.word	0x3ff00000

08002728 <test_tan>:
test_tan():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:306
void test_tan(void) {
 8002728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:307
x = 3*pi/4;    r = tan(x);      TEST_ASSERT_EQUAL_DOUBLE( -1.000000   , r );
 800272c:	a344      	add	r3, pc, #272	; (adr r3, 8002840 <test_tan+0x118>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	a745      	add	r7, pc, #276	; (adr r7, 8002848 <test_tan+0x120>)
 8002734:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002738:	4d4b      	ldr	r5, [pc, #300]	; (8002868 <test_tan+0x140>)
 800273a:	4c4c      	ldr	r4, [pc, #304]	; (800286c <test_tan+0x144>)
 800273c:	e9c5 2300 	strd	r2, r3, [r5]
 8002740:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002744:	f002 fb62 	bl	8004e0c <tan>
 8002748:	f04f 0a00 	mov.w	sl, #0
 800274c:	e9c4 0100 	strd	r0, r1, [r4]
 8002750:	f04f 0800 	mov.w	r8, #0
 8002754:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002758:	f240 1133 	movw	r1, #307	; 0x133
 800275c:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8002874 <test_tan+0x14c>
 8002760:	e9cd 2300 	strd	r2, r3, [sp]
 8002764:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002768:	4642      	mov	r2, r8
 800276a:	464b      	mov	r3, r9
 800276c:	4630      	mov	r0, r6
 800276e:	4639      	mov	r1, r7
 8002770:	f002 f86e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:308
x = 5*pi/4;    r = tan(x);      TEST_ASSERT_EQUAL_DOUBLE( +1.000000   , r );
 8002774:	a336      	add	r3, pc, #216	; (adr r3, 8002850 <test_tan+0x128>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	e9c5 2300 	strd	r2, r3, [r5]
 800277e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002782:	f002 fb43 	bl	8004e0c <tan>
 8002786:	e9c4 0100 	strd	r0, r1, [r4]
 800278a:	f44f 719a 	mov.w	r1, #308	; 0x134
 800278e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002792:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002796:	a130      	add	r1, pc, #192	; (adr r1, 8002858 <test_tan+0x130>)
 8002798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800279c:	e9cd 2300 	strd	r2, r3, [sp]
 80027a0:	2200      	movs	r2, #0
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <test_tan+0x148>)
 80027a4:	f002 f854 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:309
x = 7*pi/4;    r = tan(x);      TEST_ASSERT_EQUAL_DOUBLE( -1.000000   , r );
 80027a8:	a32d      	add	r3, pc, #180	; (adr r3, 8002860 <test_tan+0x138>)
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	e9c5 2300 	strd	r2, r3, [r5]
 80027b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80027b6:	f002 fb29 	bl	8004e0c <tan>
 80027ba:	e9c4 0100 	strd	r0, r1, [r4]
 80027be:	f240 1135 	movw	r1, #309	; 0x135
 80027c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80027c6:	e9cd a102 	strd	sl, r1, [sp, #8]
 80027ca:	4630      	mov	r0, r6
 80027cc:	4639      	mov	r1, r7
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:310
x = +0;        r = tan(x);      TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 80027ce:	2600      	movs	r6, #0
 80027d0:	2700      	movs	r7, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:309
x = 7*pi/4;    r = tan(x);      TEST_ASSERT_EQUAL_DOUBLE( -1.000000   , r );
 80027d2:	e9cd 2300 	strd	r2, r3, [sp]
 80027d6:	4642      	mov	r2, r8
 80027d8:	464b      	mov	r3, r9
 80027da:	f002 f839 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:310
x = +0;        r = tan(x);      TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 80027de:	e9c5 6700 	strd	r6, r7, [r5]
 80027e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80027e6:	f002 fb11 	bl	8004e0c <tan>
 80027ea:	e9c4 0100 	strd	r0, r1, [r4]
 80027ee:	f44f 719b 	mov.w	r1, #310	; 0x136
 80027f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80027f6:	e9cd a102 	strd	sl, r1, [sp, #8]
 80027fa:	e9cd 2300 	strd	r2, r3, [sp]
 80027fe:	4630      	mov	r0, r6
 8002800:	4632      	mov	r2, r6
 8002802:	463b      	mov	r3, r7
 8002804:	4639      	mov	r1, r7
 8002806:	f002 f823 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:311
x = -0;        r = tan(x);      TEST_ASSERT_EQUAL_DOUBLE( -0.000000   , r );
 800280a:	e9c5 6700 	strd	r6, r7, [r5]
 800280e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002812:	f002 fafb 	bl	8004e0c <tan>
 8002816:	e9c4 0100 	strd	r0, r1, [r4]
 800281a:	f240 1137 	movw	r1, #311	; 0x137
 800281e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002822:	e9cd 2300 	strd	r2, r3, [sp]
 8002826:	2200      	movs	r2, #0
 8002828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800282c:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f002 f80c 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:313
}
 8002838:	b004      	add	sp, #16
 800283a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800283e:	bf00      	nop
 8002840:	7f3321d2 	.word	0x7f3321d2
 8002844:	4002d97c 	.word	0x4002d97c
 8002848:	a0b5ed8d 	.word	0xa0b5ed8d
 800284c:	beb0c6f7 	.word	0xbeb0c6f7
 8002850:	2955385e 	.word	0x2955385e
 8002854:	400f6a7a 	.word	0x400f6a7a
 8002858:	a0b5ed8d 	.word	0xa0b5ed8d
 800285c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002860:	e9bba775 	.word	0xe9bba775
 8002864:	4015fdbb 	.word	0x4015fdbb
 8002868:	20000018 	.word	0x20000018
 800286c:	20000000 	.word	0x20000000
 8002870:	3ff00000 	.word	0x3ff00000
 8002874:	bff00000 	.word	0xbff00000

08002878 <test_atan2>:
test_atan2():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:315
void test_atan2(void) {
 8002878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:316
x = +1;        y = +1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 0.785398    , r );
 800287c:	2600      	movs	r6, #0
 800287e:	f8df a210 	ldr.w	sl, [pc, #528]	; 8002a90 <test_atan2+0x218>
 8002882:	4d7f      	ldr	r5, [pc, #508]	; (8002a80 <test_atan2+0x208>)
 8002884:	4f7f      	ldr	r7, [pc, #508]	; (8002a84 <test_atan2+0x20c>)
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:315
void test_atan2(void) {
 8002886:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:316
x = +1;        y = +1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 0.785398    , r );
 8002888:	e9ca 6700 	strd	r6, r7, [sl]
 800288c:	e9c5 6700 	strd	r6, r7, [r5]
 8002890:	e9da 0100 	ldrd	r0, r1, [sl]
 8002894:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002898:	f002 fac6 	bl	8004e28 <atan2>
 800289c:	4c7a      	ldr	r4, [pc, #488]	; (8002a88 <test_atan2+0x210>)
 800289e:	f04f 0b00 	mov.w	fp, #0
 80028a2:	e9c4 0100 	strd	r0, r1, [r4]
 80028a6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80028aa:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:317
x = +1;        y = -1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 2.356194    , r );
 80028ae:	f04f 0800 	mov.w	r8, #0
 80028b2:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8002a94 <test_atan2+0x21c>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:316
x = +1;        y = +1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 0.785398    , r );
 80028b6:	e9cd b102 	strd	fp, r1, [sp, #8]
 80028ba:	a15d      	add	r1, pc, #372	; (adr r1, 8002a30 <test_atan2+0x1b8>)
 80028bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028c0:	e9cd 2300 	strd	r2, r3, [sp]
 80028c4:	a35c      	add	r3, pc, #368	; (adr r3, 8002a38 <test_atan2+0x1c0>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f001 ffc1 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:317
x = +1;        y = -1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 2.356194    , r );
 80028ce:	e9ca 6700 	strd	r6, r7, [sl]
 80028d2:	e9c5 8900 	strd	r8, r9, [r5]
 80028d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80028da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80028de:	f002 faa3 	bl	8004e28 <atan2>
 80028e2:	e9c4 0100 	strd	r0, r1, [r4]
 80028e6:	f240 113d 	movw	r1, #317	; 0x13d
 80028ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80028ee:	e9cd b102 	strd	fp, r1, [sp, #8]
 80028f2:	a153      	add	r1, pc, #332	; (adr r1, 8002a40 <test_atan2+0x1c8>)
 80028f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028f8:	e9cd 2300 	strd	r2, r3, [sp]
 80028fc:	a352      	add	r3, pc, #328	; (adr r3, 8002a48 <test_atan2+0x1d0>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f001 ffa5 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:318
x = -1;        y = -1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( -2.356194   , r );
 8002906:	e9ca 8900 	strd	r8, r9, [sl]
 800290a:	e9c5 8900 	strd	r8, r9, [r5]
 800290e:	e9da 0100 	ldrd	r0, r1, [sl]
 8002912:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002916:	f002 fa87 	bl	8004e28 <atan2>
 800291a:	e9c4 0100 	strd	r0, r1, [r4]
 800291e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002922:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002926:	e9cd b102 	strd	fp, r1, [sp, #8]
 800292a:	a149      	add	r1, pc, #292	; (adr r1, 8002a50 <test_atan2+0x1d8>)
 800292c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002930:	e9cd 2300 	strd	r2, r3, [sp]
 8002934:	a348      	add	r3, pc, #288	; (adr r3, 8002a58 <test_atan2+0x1e0>)
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f001 ff89 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:319
x = -1;        y = +1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( -0.785398   , r );
 800293e:	e9ca 8900 	strd	r8, r9, [sl]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:321
x = 7;         y = 0;    r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 1.570796    , r );
 8002942:	f20f 191c 	addw	r9, pc, #284	; 0x11c
 8002946:	e9d9 8900 	ldrd	r8, r9, [r9]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:319
x = -1;        y = +1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( -0.785398   , r );
 800294a:	e9c5 6700 	strd	r6, r7, [r5]
 800294e:	e9da 0100 	ldrd	r0, r1, [sl]
 8002952:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002956:	f002 fa67 	bl	8004e28 <atan2>
 800295a:	e9c4 0100 	strd	r0, r1, [r4]
 800295e:	f240 113f 	movw	r1, #319	; 0x13f
 8002962:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:320
x = 0;         y = 0;    r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 8002966:	2600      	movs	r6, #0
 8002968:	2700      	movs	r7, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:319
x = -1;        y = +1;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( -0.785398   , r );
 800296a:	e9cd b102 	strd	fp, r1, [sp, #8]
 800296e:	a13e      	add	r1, pc, #248	; (adr r1, 8002a68 <test_atan2+0x1f0>)
 8002970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002974:	e9cd 2300 	strd	r2, r3, [sp]
 8002978:	a33d      	add	r3, pc, #244	; (adr r3, 8002a70 <test_atan2+0x1f8>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f001 ff67 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:320
x = 0;         y = 0;    r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 8002982:	e9ca 6700 	strd	r6, r7, [sl]
 8002986:	e9c5 6700 	strd	r6, r7, [r5]
 800298a:	e9da 0100 	ldrd	r0, r1, [sl]
 800298e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002992:	f002 fa49 	bl	8004e28 <atan2>
 8002996:	e9c4 0100 	strd	r0, r1, [r4]
 800299a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800299e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80029a2:	e9cd b102 	strd	fp, r1, [sp, #8]
 80029a6:	e9cd 2300 	strd	r2, r3, [sp]
 80029aa:	4630      	mov	r0, r6
 80029ac:	4632      	mov	r2, r6
 80029ae:	463b      	mov	r3, r7
 80029b0:	4639      	mov	r1, r7
 80029b2:	f001 ff4d 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:321
x = 7;         y = 0;    r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 1.570796    , r );
 80029b6:	2200      	movs	r2, #0
 80029b8:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <test_atan2+0x214>)
 80029ba:	e9ca 2300 	strd	r2, r3, [sl]
 80029be:	e9c5 6700 	strd	r6, r7, [r5]
 80029c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80029c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80029ca:	f002 fa2d 	bl	8004e28 <atan2>
 80029ce:	e9c4 0100 	strd	r0, r1, [r4]
 80029d2:	f240 1141 	movw	r1, #321	; 0x141
 80029d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80029da:	e9cd b102 	strd	fp, r1, [sp, #8]
 80029de:	a126      	add	r1, pc, #152	; (adr r1, 8002a78 <test_atan2+0x200>)
 80029e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029e4:	e9cd 2300 	strd	r2, r3, [sp]
 80029e8:	4642      	mov	r2, r8
 80029ea:	464b      	mov	r3, r9
 80029ec:	f001 ff30 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:322
x = 7;         y = -0;   r = atan2(x, y);    TEST_ASSERT_EQUAL_DOUBLE( 1.570796    , r );
 80029f0:	2200      	movs	r2, #0
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <test_atan2+0x214>)
 80029f4:	e9ca 2300 	strd	r2, r3, [sl]
 80029f8:	e9c5 6700 	strd	r6, r7, [r5]
 80029fc:	e9da 0100 	ldrd	r0, r1, [sl]
 8002a00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002a04:	f002 fa10 	bl	8004e28 <atan2>
 8002a08:	e9c4 0100 	strd	r0, r1, [r4]
 8002a0c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002a10:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002a14:	e9cd b102 	strd	fp, r1, [sp, #8]
 8002a18:	a117      	add	r1, pc, #92	; (adr r1, 8002a78 <test_atan2+0x200>)
 8002a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a1e:	e9cd 2300 	strd	r2, r3, [sp]
 8002a22:	4642      	mov	r2, r8
 8002a24:	464b      	mov	r3, r9
 8002a26:	f001 ff13 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:323
}
 8002a2a:	b005      	add	sp, #20
 8002a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a30:	778466ab 	.word	0x778466ab
 8002a34:	3eaa5a84 	.word	0x3eaa5a84
 8002a38:	fc8b007a 	.word	0xfc8b007a
 8002a3c:	3fe921fa 	.word	0x3fe921fa
 8002a40:	59a34d00 	.word	0x59a34d00
 8002a44:	3ec3c3e3 	.word	0x3ec3c3e3
 8002a48:	3d68405b 	.word	0x3d68405b
 8002a4c:	4002d97c 	.word	0x4002d97c
 8002a50:	59a34d00 	.word	0x59a34d00
 8002a54:	bec3c3e3 	.word	0xbec3c3e3
 8002a58:	3d68405b 	.word	0x3d68405b
 8002a5c:	c002d97c 	.word	0xc002d97c
 8002a60:	fc8b007a 	.word	0xfc8b007a
 8002a64:	3ff921fa 	.word	0x3ff921fa
 8002a68:	778466ab 	.word	0x778466ab
 8002a6c:	beaa5a84 	.word	0xbeaa5a84
 8002a70:	fc8b007a 	.word	0xfc8b007a
 8002a74:	bfe921fa 	.word	0xbfe921fa
 8002a78:	778466ab 	.word	0x778466ab
 8002a7c:	3eba5a84 	.word	0x3eba5a84
 8002a80:	20000028 	.word	0x20000028
 8002a84:	3ff00000 	.word	0x3ff00000
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	401c0000 	.word	0x401c0000
 8002a90:	20000018 	.word	0x20000018
 8002a94:	bff00000 	.word	0xbff00000

08002a98 <test_atan>:
test_atan():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:325
void test_atan(void) {
 8002a98:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:326
x = 1;         r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( 0.785398    , r );
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	4d2e      	ldr	r5, [pc, #184]	; (8002b58 <test_atan+0xc0>)
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <test_atan+0xc4>)
 8002aa2:	4c2f      	ldr	r4, [pc, #188]	; (8002b60 <test_atan+0xc8>)
 8002aa4:	e9c5 2300 	strd	r2, r3, [r5]
 8002aa8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002aac:	f002 f9e4 	bl	8004e78 <atan>
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	e9c4 0100 	strd	r0, r1, [r4]
 8002ab6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002aba:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:328
x = -0.0;      r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( -0.000000   , r );
 8002abe:	f04f 0800 	mov.w	r8, #0
 8002ac2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:326
x = 1;         r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( 0.785398    , r );
 8002ac6:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002aca:	a11f      	add	r1, pc, #124	; (adr r1, 8002b48 <test_atan+0xb0>)
 8002acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ad0:	e9cd 2300 	strd	r2, r3, [sp]
 8002ad4:	a31e      	add	r3, pc, #120	; (adr r3, 8002b50 <test_atan+0xb8>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f001 feb9 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:328
x = -0.0;      r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( -0.000000   , r );
 8002ade:	e9c5 8900 	strd	r8, r9, [r5]
 8002ae2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002ae6:	f002 f9c7 	bl	8004e78 <atan>
 8002aea:	e9c4 0100 	strd	r0, r1, [r4]
 8002aee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002af2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002af6:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002afa:	e9cd 2300 	strd	r2, r3, [sp]
 8002afe:	4640      	mov	r0, r8
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:329
x = +0.0;      r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( +0.000000   , r );
 8002b04:	f04f 0800 	mov.w	r8, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:328
x = -0.0;      r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( -0.000000   , r );
 8002b08:	4649      	mov	r1, r9
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:329
x = +0.0;      r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( +0.000000   , r );
 8002b0a:	f04f 0900 	mov.w	r9, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:328
x = -0.0;      r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( -0.000000   , r );
 8002b0e:	f001 fe9f 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:329
x = +0.0;      r = atan(x);     TEST_ASSERT_EQUAL_DOUBLE( +0.000000   , r );
 8002b12:	e9c5 8900 	strd	r8, r9, [r5]
 8002b16:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002b1a:	f002 f9ad 	bl	8004e78 <atan>
 8002b1e:	e9c4 0100 	strd	r0, r1, [r4]
 8002b22:	f240 1149 	movw	r1, #329	; 0x149
 8002b26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002b2a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8002b32:	4640      	mov	r0, r8
 8002b34:	4642      	mov	r2, r8
 8002b36:	464b      	mov	r3, r9
 8002b38:	4649      	mov	r1, r9
 8002b3a:	f001 fe89 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:330
}
 8002b3e:	b004      	add	sp, #16
 8002b40:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8002b44:	f3af 8000 	nop.w
 8002b48:	778466ab 	.word	0x778466ab
 8002b4c:	3eaa5a84 	.word	0x3eaa5a84
 8002b50:	fc8b007a 	.word	0xfc8b007a
 8002b54:	3fe921fa 	.word	0x3fe921fa
 8002b58:	20000018 	.word	0x20000018
 8002b5c:	3ff00000 	.word	0x3ff00000
 8002b60:	20000000 	.word	0x20000000
 8002b64:	00000000 	.word	0x00000000

08002b68 <test_asin>:
test_asin():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:332
void test_asin(void) {
 8002b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:333
x =  1.0;      r = asin(x);     TEST_ASSERT_EQUAL_DOUBLE( +1.570796   , r );
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4d24      	ldr	r5, [pc, #144]	; (8002c00 <test_asin+0x98>)
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <test_asin+0x9c>)
 8002b70:	4c25      	ldr	r4, [pc, #148]	; (8002c08 <test_asin+0xa0>)
 8002b72:	e9c5 2300 	strd	r2, r3, [r5]
 8002b76:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002b7a:	f002 f9d3 	bl	8004f24 <asin>
 8002b7e:	2600      	movs	r6, #0
 8002b80:	e9c4 0100 	strd	r0, r1, [r4]
 8002b84:	f240 114d 	movw	r1, #333	; 0x14d
 8002b88:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002b8c:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002b90:	a113      	add	r1, pc, #76	; (adr r1, 8002be0 <test_asin+0x78>)
 8002b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b96:	e9cd 2300 	strd	r2, r3, [sp]
 8002b9a:	a313      	add	r3, pc, #76	; (adr r3, 8002be8 <test_asin+0x80>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f001 fe56 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:334
x = -0.5;      r = asin(x);     TEST_ASSERT_EQUAL_DOUBLE( -0.523599   , r );
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <test_asin+0xa4>)
 8002ba8:	e9c5 2300 	strd	r2, r3, [r5]
 8002bac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002bb0:	f002 f9b8 	bl	8004f24 <asin>
 8002bb4:	e9c4 0100 	strd	r0, r1, [r4]
 8002bb8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8002bbc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002bc0:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002bc4:	a10a      	add	r1, pc, #40	; (adr r1, 8002bf0 <test_asin+0x88>)
 8002bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bca:	e9cd 2300 	strd	r2, r3, [sp]
 8002bce:	a30a      	add	r3, pc, #40	; (adr r3, 8002bf8 <test_asin+0x90>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f001 fe3c 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:336
}
 8002bd8:	b004      	add	sp, #16
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	f3af 8000 	nop.w
 8002be0:	778466ab 	.word	0x778466ab
 8002be4:	3eba5a84 	.word	0x3eba5a84
 8002be8:	fc8b007a 	.word	0xfc8b007a
 8002bec:	3ff921fa 	.word	0x3ff921fa
 8002bf0:	60a9547f 	.word	0x60a9547f
 8002bf4:	bea191ae 	.word	0xbea191ae
 8002bf8:	b0a6fc59 	.word	0xb0a6fc59
 8002bfc:	bfe0c152 	.word	0xbfe0c152
 8002c00:	20000018 	.word	0x20000018
 8002c04:	3ff00000 	.word	0x3ff00000
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	bfe00000 	.word	0xbfe00000

08002c10 <test_acos>:
test_acos():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:338
void test_acos(void) {
 8002c10:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:339
x = -1;        r = acos(x);     TEST_ASSERT_EQUAL_DOUBLE( 3.141593    , r );
 8002c14:	2200      	movs	r2, #0
 8002c16:	4d56      	ldr	r5, [pc, #344]	; (8002d70 <test_acos+0x160>)
 8002c18:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <test_acos+0x164>)
 8002c1a:	4c57      	ldr	r4, [pc, #348]	; (8002d78 <test_acos+0x168>)
 8002c1c:	e9c5 2300 	strd	r2, r3, [r5]
 8002c20:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002c24:	f002 f9c4 	bl	8004fb0 <acos>
 8002c28:	2600      	movs	r6, #0
 8002c2a:	e9c4 0100 	strd	r0, r1, [r4]
 8002c2e:	f240 1153 	movw	r1, #339	; 0x153
 8002c32:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002c36:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002c3a:	a13b      	add	r1, pc, #236	; (adr r1, 8002d28 <test_acos+0x118>)
 8002c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c40:	e9cd 2300 	strd	r2, r3, [sp]
 8002c44:	a33a      	add	r3, pc, #232	; (adr r3, 8002d30 <test_acos+0x120>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f001 fe01 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:340
x = -0.9;      r = acos(x);     TEST_ASSERT_EQUAL_DOUBLE( 2.690565    , r );
 8002c4e:	a33a      	add	r3, pc, #232	; (adr r3, 8002d38 <test_acos+0x128>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	e9c5 2300 	strd	r2, r3, [r5]
 8002c58:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002c5c:	f002 f9a8 	bl	8004fb0 <acos>
 8002c60:	e9c4 0100 	strd	r0, r1, [r4]
 8002c64:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8002c68:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:341
x = 0.0;       r = acos(x);     TEST_ASSERT_EQUAL_DOUBLE( 1.570796    , r );
 8002c6c:	f04f 0800 	mov.w	r8, #0
 8002c70:	f04f 0900 	mov.w	r9, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:340
x = -0.9;      r = acos(x);     TEST_ASSERT_EQUAL_DOUBLE( 2.690565    , r );
 8002c74:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002c78:	a131      	add	r1, pc, #196	; (adr r1, 8002d40 <test_acos+0x130>)
 8002c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c7e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c82:	a331      	add	r3, pc, #196	; (adr r3, 8002d48 <test_acos+0x138>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f001 fde2 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:341
x = 0.0;       r = acos(x);     TEST_ASSERT_EQUAL_DOUBLE( 1.570796    , r );
 8002c8c:	e9c5 8900 	strd	r8, r9, [r5]
 8002c90:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002c94:	f002 f98c 	bl	8004fb0 <acos>
 8002c98:	e9c4 0100 	strd	r0, r1, [r4]
 8002c9c:	f240 1155 	movw	r1, #341	; 0x155
 8002ca0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002ca4:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002ca8:	a129      	add	r1, pc, #164	; (adr r1, 8002d50 <test_acos+0x140>)
 8002caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cae:	e9cd 2300 	strd	r2, r3, [sp]
 8002cb2:	a329      	add	r3, pc, #164	; (adr r3, 8002d58 <test_acos+0x148>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f001 fdca 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:342
x = 0.5;       r = acos(x);     TEST_ASSERT_EQUAL_DOUBLE( 1.047198    , r );
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <test_acos+0x16c>)
 8002cc0:	e9c5 2300 	strd	r2, r3, [r5]
 8002cc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002cc8:	f002 f972 	bl	8004fb0 <acos>
 8002ccc:	e9c4 0100 	strd	r0, r1, [r4]
 8002cd0:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8002cd4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002cd8:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002cdc:	a120      	add	r1, pc, #128	; (adr r1, 8002d60 <test_acos+0x150>)
 8002cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ce2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ce6:	a320      	add	r3, pc, #128	; (adr r3, 8002d68 <test_acos+0x158>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f001 fdb0 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:343
x = 1;         r = acos(x);     TEST_ASSERT_EQUAL_DOUBLE( 0.000000    , r );
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <test_acos+0x170>)
 8002cf4:	e9c5 2300 	strd	r2, r3, [r5]
 8002cf8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002cfc:	f002 f958 	bl	8004fb0 <acos>
 8002d00:	e9c4 0100 	strd	r0, r1, [r4]
 8002d04:	f240 1157 	movw	r1, #343	; 0x157
 8002d08:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002d0c:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002d10:	e9cd 2300 	strd	r2, r3, [sp]
 8002d14:	4640      	mov	r0, r8
 8002d16:	4642      	mov	r2, r8
 8002d18:	464b      	mov	r3, r9
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	f001 fd98 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:344
}
 8002d20:	b004      	add	sp, #16
 8002d22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8002d26:	bf00      	nop
 8002d28:	044132b4 	.word	0x044132b4
 8002d2c:	3eca5a85 	.word	0x3eca5a85
 8002d30:	82c2bd7f 	.word	0x82c2bd7f
 8002d34:	400921fb 	.word	0x400921fb
 8002d38:	cccccccd 	.word	0xcccccccd
 8002d3c:	bfeccccc 	.word	0xbfeccccc
 8002d40:	c05b542b 	.word	0xc05b542b
 8002d44:	3ec691f1 	.word	0x3ec691f1
 8002d48:	f1561911 	.word	0xf1561911
 8002d4c:	40058646 	.word	0x40058646
 8002d50:	778466ab 	.word	0x778466ab
 8002d54:	3eba5a84 	.word	0x3eba5a84
 8002d58:	fc8b007a 	.word	0xfc8b007a
 8002d5c:	3ff921fa 	.word	0x3ff921fa
 8002d60:	60a9547f 	.word	0x60a9547f
 8002d64:	3eb191ae 	.word	0x3eb191ae
 8002d68:	b0a6fc59 	.word	0xb0a6fc59
 8002d6c:	3ff0c152 	.word	0x3ff0c152
 8002d70:	20000018 	.word	0x20000018
 8002d74:	bff00000 	.word	0xbff00000
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	3fe00000 	.word	0x3fe00000
 8002d80:	3ff00000 	.word	0x3ff00000
 8002d84:	00000000 	.word	0x00000000

08002d88 <test_sinh>:
test_sinh():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:346
void test_sinh(void) {
 8002d88:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:347
x = 1;          r = sinh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.175201           , r );
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4d3e      	ldr	r5, [pc, #248]	; (8002e88 <test_sinh+0x100>)
 8002d90:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <test_sinh+0x104>)
 8002d92:	4c3f      	ldr	r4, [pc, #252]	; (8002e90 <test_sinh+0x108>)
 8002d94:	e9c5 2300 	strd	r2, r3, [r5]
 8002d98:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002d9c:	f002 f96e 	bl	800507c <sinh>
 8002da0:	2600      	movs	r6, #0
 8002da2:	e9c4 0100 	strd	r0, r1, [r4]
 8002da6:	f240 115b 	movw	r1, #347	; 0x15b
 8002daa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002dae:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002db2:	a12d      	add	r1, pc, #180	; (adr r1, 8002e68 <test_sinh+0xe0>)
 8002db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002db8:	e9cd 2300 	strd	r2, r3, [sp]
 8002dbc:	a32c      	add	r3, pc, #176	; (adr r3, 8002e70 <test_sinh+0xe8>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f001 fd45 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:348
x = -1;         r = sinh(x);                  TEST_ASSERT_EQUAL_DOUBLE( -1.175201          , r );
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <test_sinh+0x10c>)
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:349
x = +0;         r = sinh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 8002dca:	f04f 0800 	mov.w	r8, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:348
x = -1;         r = sinh(x);                  TEST_ASSERT_EQUAL_DOUBLE( -1.175201          , r );
 8002dce:	e9c5 2300 	strd	r2, r3, [r5]
 8002dd2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002dd6:	f002 f951 	bl	800507c <sinh>
 8002dda:	e9c4 0100 	strd	r0, r1, [r4]
 8002dde:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002de2:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:349
x = +0;         r = sinh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 8002de6:	f04f 0900 	mov.w	r9, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:348
x = -1;         r = sinh(x);                  TEST_ASSERT_EQUAL_DOUBLE( -1.175201          , r );
 8002dea:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002dee:	a122      	add	r1, pc, #136	; (adr r1, 8002e78 <test_sinh+0xf0>)
 8002df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002df4:	e9cd 2300 	strd	r2, r3, [sp]
 8002df8:	a321      	add	r3, pc, #132	; (adr r3, 8002e80 <test_sinh+0xf8>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f001 fd27 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:349
x = +0;         r = sinh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 8002e02:	e9c5 8900 	strd	r8, r9, [r5]
 8002e06:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002e0a:	f002 f937 	bl	800507c <sinh>
 8002e0e:	e9c4 0100 	strd	r0, r1, [r4]
 8002e12:	f240 115d 	movw	r1, #349	; 0x15d
 8002e16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002e1a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e22:	4640      	mov	r0, r8
 8002e24:	4642      	mov	r2, r8
 8002e26:	464b      	mov	r3, r9
 8002e28:	4649      	mov	r1, r9
 8002e2a:	f001 fd11 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:350
x = -0;         r = sinh(x);                  TEST_ASSERT_EQUAL_DOUBLE( -0.000000          , r );
 8002e2e:	e9c5 8900 	strd	r8, r9, [r5]
 8002e32:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002e36:	f002 f921 	bl	800507c <sinh>
 8002e3a:	e9c4 0100 	strd	r0, r1, [r4]
 8002e3e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002e42:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002e46:	e9cd 2300 	strd	r2, r3, [sp]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e50:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	f001 fcfa 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:351
}
 8002e5c:	b004      	add	sp, #16
 8002e5e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8002e62:	bf00      	nop
 8002e64:	f3af 8000 	nop.w
 8002e68:	2a1af789 	.word	0x2a1af789
 8002e6c:	3eb3b773 	.word	0x3eb3b773
 8002e70:	90539fba 	.word	0x90539fba
 8002e74:	3ff2cd9f 	.word	0x3ff2cd9f
 8002e78:	2a1af789 	.word	0x2a1af789
 8002e7c:	beb3b773 	.word	0xbeb3b773
 8002e80:	90539fba 	.word	0x90539fba
 8002e84:	bff2cd9f 	.word	0xbff2cd9f
 8002e88:	20000018 	.word	0x20000018
 8002e8c:	3ff00000 	.word	0x3ff00000
 8002e90:	20000000 	.word	0x20000000
 8002e94:	bff00000 	.word	0xbff00000

08002e98 <test_cosh>:
test_cosh():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:353
void test_cosh(void) {
 8002e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:354
x = 1;          r = cosh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.543081           , r );
 8002e9c:	f20f 09e0 	addw	r9, pc, #224	; 0xe0
 8002ea0:	e9d9 8900 	ldrd	r8, r9, [r9]
 8002ea4:	a738      	add	r7, pc, #224	; (adr r7, 8002f88 <test_cosh+0xf0>)
 8002ea6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	4d3a      	ldr	r5, [pc, #232]	; (8002f98 <test_cosh+0x100>)
 8002eae:	4c3b      	ldr	r4, [pc, #236]	; (8002f9c <test_cosh+0x104>)
 8002eb0:	f04f 0a00 	mov.w	sl, #0
 8002eb4:	e9c5 3400 	strd	r3, r4, [r5]
 8002eb8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002ebc:	f002 f92a 	bl	8005114 <cosh>
 8002ec0:	4c37      	ldr	r4, [pc, #220]	; (8002fa0 <test_cosh+0x108>)
 8002ec2:	e9c4 0100 	strd	r0, r1, [r4]
 8002ec6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8002eca:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002ece:	4630      	mov	r0, r6
 8002ed0:	e9cd 2300 	strd	r2, r3, [sp]
 8002ed4:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002ed8:	4642      	mov	r2, r8
 8002eda:	464b      	mov	r3, r9
 8002edc:	4639      	mov	r1, r7
 8002ede:	f001 fcb7 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:355
x = -1;         r = cosh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.543081           , r );
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <test_cosh+0x10c>)
 8002ee6:	e9c5 2300 	strd	r2, r3, [r5]
 8002eea:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002eee:	f002 f911 	bl	8005114 <cosh>
 8002ef2:	e9c4 0100 	strd	r0, r1, [r4]
 8002ef6:	f240 1163 	movw	r1, #355	; 0x163
 8002efa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002efe:	e9cd 2300 	strd	r2, r3, [sp]
 8002f02:	4642      	mov	r2, r8
 8002f04:	464b      	mov	r3, r9
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:356
x = +0;         r = cosh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.000000           , r );
 8002f06:	f04f 0800 	mov.w	r8, #0
 8002f0a:	f04f 0900 	mov.w	r9, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:355
x = -1;         r = cosh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.543081           , r );
 8002f0e:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002f12:	4630      	mov	r0, r6
 8002f14:	4639      	mov	r1, r7
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:356
x = +0;         r = cosh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.000000           , r );
 8002f16:	a71e      	add	r7, pc, #120	; (adr r7, 8002f90 <test_cosh+0xf8>)
 8002f18:	e9d7 6700 	ldrd	r6, r7, [r7]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:355
x = -1;         r = cosh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.543081           , r );
 8002f1c:	f001 fc98 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:356
x = +0;         r = cosh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.000000           , r );
 8002f20:	e9c5 8900 	strd	r8, r9, [r5]
 8002f24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002f28:	f002 f8f4 	bl	8005114 <cosh>
 8002f2c:	e9c4 0100 	strd	r0, r1, [r4]
 8002f30:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8002f34:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002f38:	4630      	mov	r0, r6
 8002f3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002f3e:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <test_cosh+0x104>)
 8002f46:	4639      	mov	r1, r7
 8002f48:	f001 fc82 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:357
x = -0;         r = cosh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 1.000000           , r );
 8002f4c:	e9c5 8900 	strd	r8, r9, [r5]
 8002f50:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002f54:	f002 f8de 	bl	8005114 <cosh>
 8002f58:	e9c4 0100 	strd	r0, r1, [r4]
 8002f5c:	f240 1165 	movw	r1, #357	; 0x165
 8002f60:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002f64:	4630      	mov	r0, r6
 8002f66:	e9cd 2300 	strd	r2, r3, [sp]
 8002f6a:	e9cd a102 	strd	sl, r1, [sp, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <test_cosh+0x104>)
 8002f72:	4639      	mov	r1, r7
 8002f74:	f001 fc6c 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:358
}
 8002f78:	b004      	add	sp, #16
 8002f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7e:	bf00      	nop
 8002f80:	b3e1437c 	.word	0xb3e1437c
 8002f84:	3ff8b075 	.word	0x3ff8b075
 8002f88:	8089a3ce 	.word	0x8089a3ce
 8002f8c:	3eb9e37b 	.word	0x3eb9e37b
 8002f90:	a0b5ed8d 	.word	0xa0b5ed8d
 8002f94:	3eb0c6f7 	.word	0x3eb0c6f7
 8002f98:	20000018 	.word	0x20000018
 8002f9c:	3ff00000 	.word	0x3ff00000
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	bff00000 	.word	0xbff00000

08002fa8 <test_tanh>:
test_tanh():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:360
void test_tanh(void) {
 8002fa8:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:361
x = 1;          r = tanh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 0.761594           , r );
 8002fac:	2200      	movs	r2, #0
 8002fae:	4d3e      	ldr	r5, [pc, #248]	; (80030a8 <test_tanh+0x100>)
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <test_tanh+0x104>)
 8002fb2:	4c3f      	ldr	r4, [pc, #252]	; (80030b0 <test_tanh+0x108>)
 8002fb4:	e9c5 2300 	strd	r2, r3, [r5]
 8002fb8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002fbc:	f002 f8fc 	bl	80051b8 <tanh>
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	e9c4 0100 	strd	r0, r1, [r4]
 8002fc6:	f240 1169 	movw	r1, #361	; 0x169
 8002fca:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002fce:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8002fd2:	a12d      	add	r1, pc, #180	; (adr r1, 8003088 <test_tanh+0xe0>)
 8002fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fd8:	e9cd 2300 	strd	r2, r3, [sp]
 8002fdc:	a32c      	add	r3, pc, #176	; (adr r3, 8003090 <test_tanh+0xe8>)
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	f001 fc35 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:362
x = -1;         r = tanh(x);                  TEST_ASSERT_EQUAL_DOUBLE( -0.761594          , r );
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <test_tanh+0x10c>)
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:363
x = +0;         r = tanh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 8002fea:	f04f 0800 	mov.w	r8, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:362
x = -1;         r = tanh(x);                  TEST_ASSERT_EQUAL_DOUBLE( -0.761594          , r );
 8002fee:	e9c5 2300 	strd	r2, r3, [r5]
 8002ff2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002ff6:	f002 f8df 	bl	80051b8 <tanh>
 8002ffa:	e9c4 0100 	strd	r0, r1, [r4]
 8002ffe:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003002:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:363
x = +0;         r = tanh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 8003006:	f04f 0900 	mov.w	r9, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:362
x = -1;         r = tanh(x);                  TEST_ASSERT_EQUAL_DOUBLE( -0.761594          , r );
 800300a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800300e:	a122      	add	r1, pc, #136	; (adr r1, 8003098 <test_tanh+0xf0>)
 8003010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003014:	e9cd 2300 	strd	r2, r3, [sp]
 8003018:	a321      	add	r3, pc, #132	; (adr r3, 80030a0 <test_tanh+0xf8>)
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	f001 fc17 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:363
x = +0;         r = tanh(x);                  TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 8003022:	e9c5 8900 	strd	r8, r9, [r5]
 8003026:	e9d5 0100 	ldrd	r0, r1, [r5]
 800302a:	f002 f8c5 	bl	80051b8 <tanh>
 800302e:	e9c4 0100 	strd	r0, r1, [r4]
 8003032:	f240 116b 	movw	r1, #363	; 0x16b
 8003036:	e9d4 2300 	ldrd	r2, r3, [r4]
 800303a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800303e:	e9cd 2300 	strd	r2, r3, [sp]
 8003042:	4640      	mov	r0, r8
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	4649      	mov	r1, r9
 800304a:	f001 fc01 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:364
x = -0;         r = tanh(x);                  TEST_ASSERT_EQUAL_DOUBLE( -0.000000          , r );
 800304e:	e9c5 8900 	strd	r8, r9, [r5]
 8003052:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003056:	f002 f8af 	bl	80051b8 <tanh>
 800305a:	e9c4 0100 	strd	r0, r1, [r4]
 800305e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8003062:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003066:	e9cd 2300 	strd	r2, r3, [sp]
 800306a:	2200      	movs	r2, #0
 800306c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003070:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f001 fbea 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:365
}
 800307c:	b004      	add	sp, #16
 800307e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8003082:	bf00      	nop
 8003084:	f3af 8000 	nop.w
 8003088:	ead37181 	.word	0xead37181
 800308c:	3ea98e0a 	.word	0x3ea98e0a
 8003090:	615a8deb 	.word	0x615a8deb
 8003094:	3fe85efa 	.word	0x3fe85efa
 8003098:	ead37181 	.word	0xead37181
 800309c:	bea98e0a 	.word	0xbea98e0a
 80030a0:	615a8deb 	.word	0x615a8deb
 80030a4:	bfe85efa 	.word	0xbfe85efa
 80030a8:	20000018 	.word	0x20000018
 80030ac:	3ff00000 	.word	0x3ff00000
 80030b0:	20000000 	.word	0x20000000
 80030b4:	bff00000 	.word	0xbff00000

080030b8 <test_asinh>:
test_asinh():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:367
void test_asinh(void) {
 80030b8:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:368
x = 1;          r = asinh(x);                 TEST_ASSERT_EQUAL_DOUBLE( 0.881374           , r );
 80030bc:	2200      	movs	r2, #0
 80030be:	4d3e      	ldr	r5, [pc, #248]	; (80031b8 <test_asinh+0x100>)
 80030c0:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <test_asinh+0x104>)
 80030c2:	4c3f      	ldr	r4, [pc, #252]	; (80031c0 <test_asinh+0x108>)
 80030c4:	e9c5 2300 	strd	r2, r3, [r5]
 80030c8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80030cc:	f002 f8cc 	bl	8005268 <asinh>
 80030d0:	2600      	movs	r6, #0
 80030d2:	e9c4 0100 	strd	r0, r1, [r4]
 80030d6:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80030da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80030de:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80030e2:	a12d      	add	r1, pc, #180	; (adr r1, 8003198 <test_asinh+0xe0>)
 80030e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030e8:	e9cd 2300 	strd	r2, r3, [sp]
 80030ec:	a32c      	add	r3, pc, #176	; (adr r3, 80031a0 <test_asinh+0xe8>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f001 fbad 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:369
x = -1;         r = asinh(x);                 TEST_ASSERT_EQUAL_DOUBLE( -0.881374          , r );
 80030f6:	2200      	movs	r2, #0
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <test_asinh+0x10c>)
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:370
x = +0;         r = asinh(x);                 TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 80030fa:	f04f 0800 	mov.w	r8, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:369
x = -1;         r = asinh(x);                 TEST_ASSERT_EQUAL_DOUBLE( -0.881374          , r );
 80030fe:	e9c5 2300 	strd	r2, r3, [r5]
 8003102:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003106:	f002 f8af 	bl	8005268 <asinh>
 800310a:	e9c4 0100 	strd	r0, r1, [r4]
 800310e:	f240 1171 	movw	r1, #369	; 0x171
 8003112:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:370
x = +0;         r = asinh(x);                 TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 8003116:	f04f 0900 	mov.w	r9, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:369
x = -1;         r = asinh(x);                 TEST_ASSERT_EQUAL_DOUBLE( -0.881374          , r );
 800311a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800311e:	a122      	add	r1, pc, #136	; (adr r1, 80031a8 <test_asinh+0xf0>)
 8003120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003124:	e9cd 2300 	strd	r2, r3, [sp]
 8003128:	a321      	add	r3, pc, #132	; (adr r3, 80031b0 <test_asinh+0xf8>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f001 fb8f 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:370
x = +0;         r = asinh(x);                 TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 8003132:	e9c5 8900 	strd	r8, r9, [r5]
 8003136:	e9d5 0100 	ldrd	r0, r1, [r5]
 800313a:	f002 f895 	bl	8005268 <asinh>
 800313e:	e9c4 0100 	strd	r0, r1, [r4]
 8003142:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8003146:	e9d4 2300 	ldrd	r2, r3, [r4]
 800314a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800314e:	e9cd 2300 	strd	r2, r3, [sp]
 8003152:	4640      	mov	r0, r8
 8003154:	4642      	mov	r2, r8
 8003156:	464b      	mov	r3, r9
 8003158:	4649      	mov	r1, r9
 800315a:	f001 fb79 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:371
x = -0;         r = asinh(x);                 TEST_ASSERT_EQUAL_DOUBLE( -0.000000          , r );
 800315e:	e9c5 8900 	strd	r8, r9, [r5]
 8003162:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003166:	f002 f87f 	bl	8005268 <asinh>
 800316a:	e9c4 0100 	strd	r0, r1, [r4]
 800316e:	f240 1173 	movw	r1, #371	; 0x173
 8003172:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003176:	e9cd 2300 	strd	r2, r3, [sp]
 800317a:	2200      	movs	r2, #0
 800317c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003180:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f001 fb62 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:372
}
 800318c:	b004      	add	sp, #16
 800318e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8003192:	bf00      	nop
 8003194:	f3af 8000 	nop.w
 8003198:	ec3f2b5d 	.word	0xec3f2b5d
 800319c:	3ead92f1 	.word	0x3ead92f1
 80031a0:	3f316e37 	.word	0x3f316e37
 80031a4:	3fec3437 	.word	0x3fec3437
 80031a8:	ec3f2b5d 	.word	0xec3f2b5d
 80031ac:	bead92f1 	.word	0xbead92f1
 80031b0:	3f316e37 	.word	0x3f316e37
 80031b4:	bfec3437 	.word	0xbfec3437
 80031b8:	20000018 	.word	0x20000018
 80031bc:	3ff00000 	.word	0x3ff00000
 80031c0:	20000000 	.word	0x20000000
 80031c4:	bff00000 	.word	0xbff00000

080031c8 <test_acosh>:
test_acosh():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:374
void test_acosh(void) {
 80031c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:375
x = 1;          r = acosh(x);                 TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 80031ca:	2200      	movs	r2, #0
 80031cc:	4d1e      	ldr	r5, [pc, #120]	; (8003248 <test_acosh+0x80>)
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <test_acosh+0x84>)
 80031d0:	4c1f      	ldr	r4, [pc, #124]	; (8003250 <test_acosh+0x88>)
 80031d2:	e9c5 2300 	strd	r2, r3, [r5]
 80031d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80031da:	f002 f891 	bl	8005300 <acosh>
 80031de:	e9c4 0100 	strd	r0, r1, [r4]
 80031e2:	2600      	movs	r6, #0
 80031e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80031e8:	f240 1177 	movw	r1, #375	; 0x177
 80031ec:	e9cd 2300 	strd	r2, r3, [sp]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2300      	movs	r3, #0
 80031f4:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	f001 fb28 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:376
x = 10;         r = acosh(x);                 TEST_ASSERT_EQUAL_DOUBLE( 2.993223           , r );
 8003200:	2200      	movs	r2, #0
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <test_acosh+0x8c>)
 8003204:	e9c5 2300 	strd	r2, r3, [r5]
 8003208:	e9d5 0100 	ldrd	r0, r1, [r5]
 800320c:	f002 f878 	bl	8005300 <acosh>
 8003210:	e9c4 0100 	strd	r0, r1, [r4]
 8003214:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003218:	e9d4 2300 	ldrd	r2, r3, [r4]
 800321c:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003220:	a105      	add	r1, pc, #20	; (adr r1, 8003238 <test_acosh+0x70>)
 8003222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003226:	e9cd 2300 	strd	r2, r3, [sp]
 800322a:	a305      	add	r3, pc, #20	; (adr r3, 8003240 <test_acosh+0x78>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f001 fb0e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:377
}
 8003234:	b004      	add	sp, #16
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	bf1b7e90 	.word	0xbf1b7e90
 800323c:	3ec91be5 	.word	0x3ec91be5
 8003240:	e675147f 	.word	0xe675147f
 8003244:	4007f21e 	.word	0x4007f21e
 8003248:	20000018 	.word	0x20000018
 800324c:	3ff00000 	.word	0x3ff00000
 8003250:	20000000 	.word	0x20000000
 8003254:	40240000 	.word	0x40240000

08003258 <test_atanh>:
test_atanh():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:379
void test_atanh(void) {
 8003258:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:380
x = 0;          r = atanh(x);                 TEST_ASSERT_EQUAL_DOUBLE( 0.000000           , r );
 800325c:	2600      	movs	r6, #0
 800325e:	2700      	movs	r7, #0
 8003260:	4d2d      	ldr	r5, [pc, #180]	; (8003318 <test_atanh+0xc0>)
 8003262:	4c2e      	ldr	r4, [pc, #184]	; (800331c <test_atanh+0xc4>)
 8003264:	e9c5 6700 	strd	r6, r7, [r5]
 8003268:	e9d5 0100 	ldrd	r0, r1, [r5]
 800326c:	f002 f8a0 	bl	80053b0 <atanh>
 8003270:	f04f 0800 	mov.w	r8, #0
 8003274:	e9c4 0100 	strd	r0, r1, [r4]
 8003278:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800327c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003280:	e9cd 8102 	strd	r8, r1, [sp, #8]
 8003284:	e9cd 2300 	strd	r2, r3, [sp]
 8003288:	4630      	mov	r0, r6
 800328a:	4632      	mov	r2, r6
 800328c:	463b      	mov	r3, r7
 800328e:	4639      	mov	r1, r7
 8003290:	f001 fade 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:381
x = -0;         r = atanh(x);                 TEST_ASSERT_EQUAL_DOUBLE( -0.000000          , r );
 8003294:	e9c5 6700 	strd	r6, r7, [r5]
 8003298:	e9d5 0100 	ldrd	r0, r1, [r5]
 800329c:	f002 f888 	bl	80053b0 <atanh>
 80032a0:	e9c4 0100 	strd	r0, r1, [r4]
 80032a4:	f240 117d 	movw	r1, #381	; 0x17d
 80032a8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80032ac:	e9cd 2300 	strd	r2, r3, [sp]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032b6:	e9cd 8102 	strd	r8, r1, [sp, #8]
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	f001 fac7 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:382
x = 0.9;        r = atanh(x);                 TEST_ASSERT_EQUAL_DOUBLE( 1.472219           , r );
 80032c2:	a30f      	add	r3, pc, #60	; (adr r3, 8003300 <test_atanh+0xa8>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	e9c5 2300 	strd	r2, r3, [r5]
 80032cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80032d0:	f002 f86e 	bl	80053b0 <atanh>
 80032d4:	e9c4 0100 	strd	r0, r1, [r4]
 80032d8:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80032dc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80032e0:	e9cd 8102 	strd	r8, r1, [sp, #8]
 80032e4:	a108      	add	r1, pc, #32	; (adr r1, 8003308 <test_atanh+0xb0>)
 80032e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032ea:	e9cd 2300 	strd	r2, r3, [sp]
 80032ee:	a308      	add	r3, pc, #32	; (adr r3, 8003310 <test_atanh+0xb8>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f001 faac 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:383
}
 80032f8:	b004      	add	sp, #16
 80032fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032fe:	bf00      	nop
 8003300:	cccccccd 	.word	0xcccccccd
 8003304:	3feccccc 	.word	0x3feccccc
 8003308:	e8bcec9a 	.word	0xe8bcec9a
 800330c:	3eb8b321 	.word	0x3eb8b321
 8003310:	8298cc14 	.word	0x8298cc14
 8003314:	3ff78e35 	.word	0x3ff78e35
 8003318:	20000018 	.word	0x20000018
 800331c:	20000000 	.word	0x20000000

08003320 <test_trunc>:
test_trunc():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:385
void test_trunc(void) {
 8003320:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:386
x = +2.7;      r = trunc(x);    TEST_ASSERT_EQUAL_DOUBLE( +2.0        , r );
 8003324:	a346      	add	r3, pc, #280	; (adr r3, 8003440 <test_trunc+0x120>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	4d59      	ldr	r5, [pc, #356]	; (8003490 <test_trunc+0x170>)
 800332c:	4c59      	ldr	r4, [pc, #356]	; (8003494 <test_trunc+0x174>)
 800332e:	e9c5 2300 	strd	r2, r3, [r5]
 8003332:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003336:	f002 f89b 	bl	8005470 <trunc>
 800333a:	2600      	movs	r6, #0
 800333c:	e9c4 0100 	strd	r0, r1, [r4]
 8003340:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8003344:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003348:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800334c:	a13e      	add	r1, pc, #248	; (adr r1, 8003448 <test_trunc+0x128>)
 800334e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003352:	e9cd 2300 	strd	r2, r3, [sp]
 8003356:	2200      	movs	r2, #0
 8003358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800335c:	f001 fa78 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:387
x = -2.7;      r = trunc(x);    TEST_ASSERT_EQUAL_DOUBLE( -2.0        , r );
 8003360:	a33b      	add	r3, pc, #236	; (adr r3, 8003450 <test_trunc+0x130>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	e9c5 2300 	strd	r2, r3, [r5]
 800336a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800336e:	f002 f87f 	bl	8005470 <trunc>
 8003372:	e9c4 0100 	strd	r0, r1, [r4]
 8003376:	f240 1183 	movw	r1, #387	; 0x183
 800337a:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:388
x = -0.0;      r = trunc(x);    TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 800337e:	f04f 0800 	mov.w	r8, #0
 8003382:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:387
x = -2.7;      r = trunc(x);    TEST_ASSERT_EQUAL_DOUBLE( -2.0        , r );
 8003386:	e9cd 2300 	strd	r2, r3, [sp]
 800338a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800338e:	a132      	add	r1, pc, #200	; (adr r1, 8003458 <test_trunc+0x138>)
 8003390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003394:	2200      	movs	r2, #0
 8003396:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800339a:	f001 fa59 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:388
x = -0.0;      r = trunc(x);    TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 800339e:	e9c5 8900 	strd	r8, r9, [r5]
 80033a2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80033a6:	f002 f863 	bl	8005470 <trunc>
 80033aa:	e9c4 0100 	strd	r0, r1, [r4]
 80033ae:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80033b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80033b6:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80033ba:	e9cd 2300 	strd	r2, r3, [sp]
 80033be:	4640      	mov	r0, r8
 80033c0:	4642      	mov	r2, r8
 80033c2:	464b      	mov	r3, r9
 80033c4:	4649      	mov	r1, r9
 80033c6:	f001 fa43 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:389
x = 2205.1969; r = trunc(x);    TEST_ASSERT_EQUAL_DOUBLE( 2205.000000 , r );
 80033ca:	a325      	add	r3, pc, #148	; (adr r3, 8003460 <test_trunc+0x140>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	e9c5 2300 	strd	r2, r3, [r5]
 80033d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80033d8:	f002 f84a 	bl	8005470 <trunc>
 80033dc:	e9c4 0100 	strd	r0, r1, [r4]
 80033e0:	f240 1185 	movw	r1, #389	; 0x185
 80033e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80033e8:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80033ec:	a11e      	add	r1, pc, #120	; (adr r1, 8003468 <test_trunc+0x148>)
 80033ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033f2:	e9cd 2300 	strd	r2, r3, [sp]
 80033f6:	a31e      	add	r3, pc, #120	; (adr r3, 8003470 <test_trunc+0x150>)
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f001 fa28 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:390
x = -270.8886; r = trunc(x);    TEST_ASSERT_EQUAL_DOUBLE( -270.000000 , r );
 8003400:	a31d      	add	r3, pc, #116	; (adr r3, 8003478 <test_trunc+0x158>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	e9c5 2300 	strd	r2, r3, [r5]
 800340a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800340e:	f002 f82f 	bl	8005470 <trunc>
 8003412:	e9c4 0100 	strd	r0, r1, [r4]
 8003416:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800341a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800341e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003422:	a117      	add	r1, pc, #92	; (adr r1, 8003480 <test_trunc+0x160>)
 8003424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003428:	e9cd 2300 	strd	r2, r3, [sp]
 800342c:	a316      	add	r3, pc, #88	; (adr r3, 8003488 <test_trunc+0x168>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f001 fa0d 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:391
}
 8003436:	b004      	add	sp, #16
 8003438:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800343c:	f3af 8000 	nop.w
 8003440:	9999999a 	.word	0x9999999a
 8003444:	40059999 	.word	0x40059999
 8003448:	a0b5ed8d 	.word	0xa0b5ed8d
 800344c:	3ec0c6f7 	.word	0x3ec0c6f7
 8003450:	9999999a 	.word	0x9999999a
 8003454:	c0059999 	.word	0xc0059999
 8003458:	a0b5ed8d 	.word	0xa0b5ed8d
 800345c:	bec0c6f7 	.word	0xbec0c6f7
 8003460:	d013a92a 	.word	0xd013a92a
 8003464:	40a13a64 	.word	0x40a13a64
 8003468:	5c67dfe3 	.word	0x5c67dfe3
 800346c:	3f621038 	.word	0x3f621038
 8003470:	00000000 	.word	0x00000000
 8003474:	40a13a00 	.word	0x40a13a00
 8003478:	b4a2339c 	.word	0xb4a2339c
 800347c:	c070ee37 	.word	0xc070ee37
 8003480:	2b7fe08b 	.word	0x2b7fe08b
 8003484:	bf31b1d9 	.word	0xbf31b1d9
 8003488:	00000000 	.word	0x00000000
 800348c:	c070e000 	.word	0xc070e000
 8003490:	20000018 	.word	0x20000018
 8003494:	20000000 	.word	0x20000000

08003498 <test_floor>:
test_floor():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:393
void test_floor(void) {
 8003498:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:394
x = +2.7;      r = floor(x);    TEST_ASSERT_EQUAL_DOUBLE( +2.0        , r );
 800349c:	a346      	add	r3, pc, #280	; (adr r3, 80035b8 <test_floor+0x120>)
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	4d59      	ldr	r5, [pc, #356]	; (8003608 <test_floor+0x170>)
 80034a4:	4c59      	ldr	r4, [pc, #356]	; (800360c <test_floor+0x174>)
 80034a6:	e9c5 2300 	strd	r2, r3, [r5]
 80034aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80034ae:	f002 f81f 	bl	80054f0 <floor>
 80034b2:	2600      	movs	r6, #0
 80034b4:	e9c4 0100 	strd	r0, r1, [r4]
 80034b8:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80034bc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80034c0:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80034c4:	a13e      	add	r1, pc, #248	; (adr r1, 80035c0 <test_floor+0x128>)
 80034c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034ca:	e9cd 2300 	strd	r2, r3, [sp]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034d4:	f001 f9bc 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:395
x = -2.7;      r = floor(x);    TEST_ASSERT_EQUAL_DOUBLE( -3.0        , r );
 80034d8:	a33b      	add	r3, pc, #236	; (adr r3, 80035c8 <test_floor+0x130>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	e9c5 2300 	strd	r2, r3, [r5]
 80034e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80034e6:	f002 f803 	bl	80054f0 <floor>
 80034ea:	e9c4 0100 	strd	r0, r1, [r4]
 80034ee:	f240 118b 	movw	r1, #395	; 0x18b
 80034f2:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:396
x = -0.0;      r = floor(x);    TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 80034f6:	f04f 0800 	mov.w	r8, #0
 80034fa:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:395
x = -2.7;      r = floor(x);    TEST_ASSERT_EQUAL_DOUBLE( -3.0        , r );
 80034fe:	e9cd 2300 	strd	r2, r3, [sp]
 8003502:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003506:	a132      	add	r1, pc, #200	; (adr r1, 80035d0 <test_floor+0x138>)
 8003508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800350c:	2200      	movs	r2, #0
 800350e:	4b40      	ldr	r3, [pc, #256]	; (8003610 <test_floor+0x178>)
 8003510:	f001 f99e 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:396
x = -0.0;      r = floor(x);    TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 8003514:	e9c5 8900 	strd	r8, r9, [r5]
 8003518:	e9d5 0100 	ldrd	r0, r1, [r5]
 800351c:	f001 ffe8 	bl	80054f0 <floor>
 8003520:	e9c4 0100 	strd	r0, r1, [r4]
 8003524:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003528:	e9d4 2300 	ldrd	r2, r3, [r4]
 800352c:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003530:	e9cd 2300 	strd	r2, r3, [sp]
 8003534:	4640      	mov	r0, r8
 8003536:	4642      	mov	r2, r8
 8003538:	464b      	mov	r3, r9
 800353a:	4649      	mov	r1, r9
 800353c:	f001 f988 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:397
x = 2205.1969; r = floor(x);    TEST_ASSERT_EQUAL_DOUBLE( 2205.000000 , r );
 8003540:	a325      	add	r3, pc, #148	; (adr r3, 80035d8 <test_floor+0x140>)
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	e9c5 2300 	strd	r2, r3, [r5]
 800354a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800354e:	f001 ffcf 	bl	80054f0 <floor>
 8003552:	e9c4 0100 	strd	r0, r1, [r4]
 8003556:	f240 118d 	movw	r1, #397	; 0x18d
 800355a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800355e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003562:	a11f      	add	r1, pc, #124	; (adr r1, 80035e0 <test_floor+0x148>)
 8003564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003568:	e9cd 2300 	strd	r2, r3, [sp]
 800356c:	a31e      	add	r3, pc, #120	; (adr r3, 80035e8 <test_floor+0x150>)
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f001 f96d 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:398
x = -270.8886; r = floor(x);    TEST_ASSERT_EQUAL_DOUBLE( -271.000000 , r );
 8003576:	a31e      	add	r3, pc, #120	; (adr r3, 80035f0 <test_floor+0x158>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	e9c5 2300 	strd	r2, r3, [r5]
 8003580:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003584:	f001 ffb4 	bl	80054f0 <floor>
 8003588:	e9c4 0100 	strd	r0, r1, [r4]
 800358c:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8003590:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003594:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003598:	a117      	add	r1, pc, #92	; (adr r1, 80035f8 <test_floor+0x160>)
 800359a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800359e:	e9cd 2300 	strd	r2, r3, [sp]
 80035a2:	a317      	add	r3, pc, #92	; (adr r3, 8003600 <test_floor+0x168>)
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f001 f952 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:399
}
 80035ac:	b004      	add	sp, #16
 80035ae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80035b2:	bf00      	nop
 80035b4:	f3af 8000 	nop.w
 80035b8:	9999999a 	.word	0x9999999a
 80035bc:	40059999 	.word	0x40059999
 80035c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80035c4:	3ec0c6f7 	.word	0x3ec0c6f7
 80035c8:	9999999a 	.word	0x9999999a
 80035cc:	c0059999 	.word	0xc0059999
 80035d0:	7110e454 	.word	0x7110e454
 80035d4:	bec92a73 	.word	0xbec92a73
 80035d8:	d013a92a 	.word	0xd013a92a
 80035dc:	40a13a64 	.word	0x40a13a64
 80035e0:	5c67dfe3 	.word	0x5c67dfe3
 80035e4:	3f621038 	.word	0x3f621038
 80035e8:	00000000 	.word	0x00000000
 80035ec:	40a13a00 	.word	0x40a13a00
 80035f0:	b4a2339c 	.word	0xb4a2339c
 80035f4:	c070ee37 	.word	0xc070ee37
 80035f8:	23209678 	.word	0x23209678
 80035fc:	bf31c2a0 	.word	0xbf31c2a0
 8003600:	00000000 	.word	0x00000000
 8003604:	c070f000 	.word	0xc070f000
 8003608:	20000018 	.word	0x20000018
 800360c:	20000000 	.word	0x20000000
 8003610:	c0080000 	.word	0xc0080000
 8003614:	00000000 	.word	0x00000000

08003618 <test_ceil>:
test_ceil():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:401
void test_ceil(void) {
 8003618:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:402
x = +2.4;      r = ceil(x);     TEST_ASSERT_EQUAL_DOUBLE( +3.0        , r );
 800361c:	a346      	add	r3, pc, #280	; (adr r3, 8003738 <test_ceil+0x120>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	4d59      	ldr	r5, [pc, #356]	; (8003788 <test_ceil+0x170>)
 8003624:	4c59      	ldr	r4, [pc, #356]	; (800378c <test_ceil+0x174>)
 8003626:	e9c5 2300 	strd	r2, r3, [r5]
 800362a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800362e:	f001 ff9d 	bl	800556c <ceil>
 8003632:	2600      	movs	r6, #0
 8003634:	e9c4 0100 	strd	r0, r1, [r4]
 8003638:	f44f 71c9 	mov.w	r1, #402	; 0x192
 800363c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003640:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003644:	a13e      	add	r1, pc, #248	; (adr r1, 8003740 <test_ceil+0x128>)
 8003646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800364a:	e9cd 2300 	strd	r2, r3, [sp]
 800364e:	2200      	movs	r2, #0
 8003650:	4b4f      	ldr	r3, [pc, #316]	; (8003790 <test_ceil+0x178>)
 8003652:	f001 f8fd 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:403
x = -2.4;      r = ceil(x);     TEST_ASSERT_EQUAL_DOUBLE( -2.0        , r );
 8003656:	a33c      	add	r3, pc, #240	; (adr r3, 8003748 <test_ceil+0x130>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	e9c5 2300 	strd	r2, r3, [r5]
 8003660:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003664:	f001 ff82 	bl	800556c <ceil>
 8003668:	e9c4 0100 	strd	r0, r1, [r4]
 800366c:	f240 1193 	movw	r1, #403	; 0x193
 8003670:	e9d4 2300 	ldrd	r2, r3, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:404
x = -0.0;      r = ceil(x);     TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 8003674:	f04f 0800 	mov.w	r8, #0
 8003678:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:403
x = -2.4;      r = ceil(x);     TEST_ASSERT_EQUAL_DOUBLE( -2.0        , r );
 800367c:	e9cd 2300 	strd	r2, r3, [sp]
 8003680:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003684:	a132      	add	r1, pc, #200	; (adr r1, 8003750 <test_ceil+0x138>)
 8003686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800368a:	2200      	movs	r2, #0
 800368c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8003690:	f001 f8de 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:404
x = -0.0;      r = ceil(x);     TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 8003694:	e9c5 8900 	strd	r8, r9, [r5]
 8003698:	e9d5 0100 	ldrd	r0, r1, [r5]
 800369c:	f001 ff66 	bl	800556c <ceil>
 80036a0:	e9c4 0100 	strd	r0, r1, [r4]
 80036a4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80036a8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80036ac:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80036b0:	e9cd 2300 	strd	r2, r3, [sp]
 80036b4:	4640      	mov	r0, r8
 80036b6:	4642      	mov	r2, r8
 80036b8:	464b      	mov	r3, r9
 80036ba:	4649      	mov	r1, r9
 80036bc:	f001 f8c8 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:405
x = 2205.1969; r = ceil(x);     TEST_ASSERT_EQUAL_DOUBLE( 2206.000000 , r );
 80036c0:	a325      	add	r3, pc, #148	; (adr r3, 8003758 <test_ceil+0x140>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	e9c5 2300 	strd	r2, r3, [r5]
 80036ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 80036ce:	f001 ff4d 	bl	800556c <ceil>
 80036d2:	e9c4 0100 	strd	r0, r1, [r4]
 80036d6:	f240 1195 	movw	r1, #405	; 0x195
 80036da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80036de:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80036e2:	a11f      	add	r1, pc, #124	; (adr r1, 8003760 <test_ceil+0x148>)
 80036e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036e8:	e9cd 2300 	strd	r2, r3, [sp]
 80036ec:	a31e      	add	r3, pc, #120	; (adr r3, 8003768 <test_ceil+0x150>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f001 f8ad 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:406
x = -270.8886; r = ceil(x);     TEST_ASSERT_EQUAL_DOUBLE( -270.000000 , r );
 80036f6:	a31e      	add	r3, pc, #120	; (adr r3, 8003770 <test_ceil+0x158>)
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	e9c5 2300 	strd	r2, r3, [r5]
 8003700:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003704:	f001 ff32 	bl	800556c <ceil>
 8003708:	e9c4 0100 	strd	r0, r1, [r4]
 800370c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8003710:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003714:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003718:	a117      	add	r1, pc, #92	; (adr r1, 8003778 <test_ceil+0x160>)
 800371a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800371e:	e9cd 2300 	strd	r2, r3, [sp]
 8003722:	a317      	add	r3, pc, #92	; (adr r3, 8003780 <test_ceil+0x168>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f001 f892 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:407
}
 800372c:	b004      	add	sp, #16
 800372e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8003732:	bf00      	nop
 8003734:	f3af 8000 	nop.w
 8003738:	33333333 	.word	0x33333333
 800373c:	40033333 	.word	0x40033333
 8003740:	7110e454 	.word	0x7110e454
 8003744:	3ec92a73 	.word	0x3ec92a73
 8003748:	33333333 	.word	0x33333333
 800374c:	c0033333 	.word	0xc0033333
 8003750:	a0b5ed8d 	.word	0xa0b5ed8d
 8003754:	bec0c6f7 	.word	0xbec0c6f7
 8003758:	d013a92a 	.word	0xd013a92a
 800375c:	40a13a64 	.word	0x40a13a64
 8003760:	3b5bf6a1 	.word	0x3b5bf6a1
 8003764:	3f621251 	.word	0x3f621251
 8003768:	00000000 	.word	0x00000000
 800376c:	40a13c00 	.word	0x40a13c00
 8003770:	b4a2339c 	.word	0xb4a2339c
 8003774:	c070ee37 	.word	0xc070ee37
 8003778:	2b7fe08b 	.word	0x2b7fe08b
 800377c:	bf31b1d9 	.word	0xbf31b1d9
 8003780:	00000000 	.word	0x00000000
 8003784:	c070e000 	.word	0xc070e000
 8003788:	20000018 	.word	0x20000018
 800378c:	20000000 	.word	0x20000000
 8003790:	40080000 	.word	0x40080000
 8003794:	00000000 	.word	0x00000000

08003798 <test_fmod>:
test_fmod():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:409
void test_fmod(void) {
 8003798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:410
x = +5.1;      y = +3.0; r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 2.1         , r );
 800379c:	f20f 1988 	addw	r9, pc, #392	; 0x188
 80037a0:	e9d9 8900 	ldrd	r8, r9, [r9]
 80037a4:	2600      	movs	r6, #0
 80037a6:	4d6c      	ldr	r5, [pc, #432]	; (8003958 <test_fmod+0x1c0>)
 80037a8:	4c6c      	ldr	r4, [pc, #432]	; (800395c <test_fmod+0x1c4>)
 80037aa:	4f6d      	ldr	r7, [pc, #436]	; (8003960 <test_fmod+0x1c8>)
 80037ac:	e9c5 8900 	strd	r8, r9, [r5]
 80037b0:	e9c4 6700 	strd	r6, r7, [r4]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:409
void test_fmod(void) {
 80037b4:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:410
x = +5.1;      y = +3.0; r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 2.1         , r );
 80037b6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80037ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80037be:	f001 ff15 	bl	80055ec <fmod>
 80037c2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8003968 <test_fmod+0x1d0>
 80037c6:	f04f 0b00 	mov.w	fp, #0
 80037ca:	e9ca 0100 	strd	r0, r1, [sl]
 80037ce:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80037d2:	e9da 2300 	ldrd	r2, r3, [sl]
 80037d6:	e9cd b102 	strd	fp, r1, [sp, #8]
 80037da:	a155      	add	r1, pc, #340	; (adr r1, 8003930 <test_fmod+0x198>)
 80037dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037e0:	e9cd 2300 	strd	r2, r3, [sp]
 80037e4:	a354      	add	r3, pc, #336	; (adr r3, 8003938 <test_fmod+0x1a0>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f001 f831 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:411
x = -5.1;      y = +3.0; r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( -2.1        , r );
 80037ee:	a354      	add	r3, pc, #336	; (adr r3, 8003940 <test_fmod+0x1a8>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	e9c5 2300 	strd	r2, r3, [r5]
 80037f8:	e9c4 6700 	strd	r6, r7, [r4]
 80037fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003800:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003804:	f001 fef2 	bl	80055ec <fmod>
 8003808:	e9ca 0100 	strd	r0, r1, [sl]
 800380c:	f240 119b 	movw	r1, #411	; 0x19b
 8003810:	e9da 2300 	ldrd	r2, r3, [sl]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:412
x = +5.1;      y = -3.0; r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 2.1         , r );
 8003814:	2600      	movs	r6, #0
 8003816:	4f53      	ldr	r7, [pc, #332]	; (8003964 <test_fmod+0x1cc>)
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:411
x = -5.1;      y = +3.0; r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( -2.1        , r );
 8003818:	e9cd b102 	strd	fp, r1, [sp, #8]
 800381c:	a14a      	add	r1, pc, #296	; (adr r1, 8003948 <test_fmod+0x1b0>)
 800381e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003822:	e9cd 2300 	strd	r2, r3, [sp]
 8003826:	a34a      	add	r3, pc, #296	; (adr r3, 8003950 <test_fmod+0x1b8>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f001 f810 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:412
x = +5.1;      y = -3.0; r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 2.1         , r );
 8003830:	e9c5 8900 	strd	r8, r9, [r5]
 8003834:	e9c4 6700 	strd	r6, r7, [r4]
 8003838:	e9d5 0100 	ldrd	r0, r1, [r5]
 800383c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003840:	f001 fed4 	bl	80055ec <fmod>
 8003844:	e9ca 0100 	strd	r0, r1, [sl]
 8003848:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800384c:	e9da 2300 	ldrd	r2, r3, [sl]
 8003850:	e9cd b102 	strd	fp, r1, [sp, #8]
 8003854:	a136      	add	r1, pc, #216	; (adr r1, 8003930 <test_fmod+0x198>)
 8003856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800385a:	e9cd 2300 	strd	r2, r3, [sp]
 800385e:	a336      	add	r3, pc, #216	; (adr r3, 8003938 <test_fmod+0x1a0>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f000 fff4 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:413
x = -5.1;      y = -3.0; r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( -2.1        , r );
 8003868:	a335      	add	r3, pc, #212	; (adr r3, 8003940 <test_fmod+0x1a8>)
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	e9c5 2300 	strd	r2, r3, [r5]
 8003872:	e9c4 6700 	strd	r6, r7, [r4]
 8003876:	e9d5 0100 	ldrd	r0, r1, [r5]
 800387a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800387e:	f001 feb5 	bl	80055ec <fmod>
 8003882:	e9ca 0100 	strd	r0, r1, [sl]
 8003886:	f240 119d 	movw	r1, #413	; 0x19d
 800388a:	e9da 2300 	ldrd	r2, r3, [sl]
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:414
x = +0.0;      y = 1.0;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 0.0         , r );
 800388e:	2600      	movs	r6, #0
 8003890:	2700      	movs	r7, #0
 8003892:	f04f 0800 	mov.w	r8, #0
 8003896:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800396c <test_fmod+0x1d4>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:413
x = -5.1;      y = -3.0; r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( -2.1        , r );
 800389a:	e9cd b102 	strd	fp, r1, [sp, #8]
 800389e:	a12a      	add	r1, pc, #168	; (adr r1, 8003948 <test_fmod+0x1b0>)
 80038a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038a4:	e9cd 2300 	strd	r2, r3, [sp]
 80038a8:	a329      	add	r3, pc, #164	; (adr r3, 8003950 <test_fmod+0x1b8>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f000 ffcf 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:414
x = +0.0;      y = 1.0;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 0.0         , r );
 80038b2:	e9c5 6700 	strd	r6, r7, [r5]
 80038b6:	e9c4 8900 	strd	r8, r9, [r4]
 80038ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80038be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80038c2:	f001 fe93 	bl	80055ec <fmod>
 80038c6:	e9ca 0100 	strd	r0, r1, [sl]
 80038ca:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80038ce:	e9da 2300 	ldrd	r2, r3, [sl]
 80038d2:	e9cd b102 	strd	fp, r1, [sp, #8]
 80038d6:	e9cd 2300 	strd	r2, r3, [sp]
 80038da:	4630      	mov	r0, r6
 80038dc:	4632      	mov	r2, r6
 80038de:	463b      	mov	r3, r7
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:415
x = -0.0;      y = 1.0;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 80038e0:	2600      	movs	r6, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:414
x = +0.0;      y = 1.0;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 0.0         , r );
 80038e2:	4639      	mov	r1, r7
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:415
x = -0.0;      y = 1.0;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 80038e4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:414
x = +0.0;      y = 1.0;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( 0.0         , r );
 80038e8:	f000 ffb2 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:415
x = -0.0;      y = 1.0;  r = fmod(x, y);     TEST_ASSERT_EQUAL_DOUBLE( -0.0        , r );
 80038ec:	e9c5 6700 	strd	r6, r7, [r5]
 80038f0:	e9c4 8900 	strd	r8, r9, [r4]
 80038f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80038f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80038fc:	f001 fe76 	bl	80055ec <fmod>
 8003900:	e9ca 0100 	strd	r0, r1, [sl]
 8003904:	f240 119f 	movw	r1, #415	; 0x19f
 8003908:	e9da 2300 	ldrd	r2, r3, [sl]
 800390c:	e9cd b102 	strd	fp, r1, [sp, #8]
 8003910:	e9cd 2300 	strd	r2, r3, [sp]
 8003914:	4630      	mov	r0, r6
 8003916:	4632      	mov	r2, r6
 8003918:	463b      	mov	r3, r7
 800391a:	4639      	mov	r1, r7
 800391c:	f000 ff98 	bl	8004850 <UnityAssertDoublesWithin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:418
}
 8003920:	b005      	add	sp, #20
 8003922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003926:	bf00      	nop
 8003928:	66666666 	.word	0x66666666
 800392c:	40146666 	.word	0x40146666
 8003930:	358bd307 	.word	0x358bd307
 8003934:	3ec19db7 	.word	0x3ec19db7
 8003938:	cccccccd 	.word	0xcccccccd
 800393c:	4000cccc 	.word	0x4000cccc
 8003940:	66666666 	.word	0x66666666
 8003944:	c0146666 	.word	0xc0146666
 8003948:	358bd307 	.word	0x358bd307
 800394c:	bec19db7 	.word	0xbec19db7
 8003950:	cccccccd 	.word	0xcccccccd
 8003954:	c000cccc 	.word	0xc000cccc
 8003958:	20000018 	.word	0x20000018
 800395c:	20000028 	.word	0x20000028
 8003960:	40080000 	.word	0x40080000
 8003964:	c0080000 	.word	0xc0080000
 8003968:	20000000 	.word	0x20000000
 800396c:	3ff00000 	.word	0x3ff00000

08003970 <test_nanofloat>:
test_nanofloat():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:428

int test_nanofloat(void) {
 8003970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:430
    //  Run unit tests.
    debug_flush();
 8003974:	f000 fb14 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:431
    UNITY_BEGIN();
 8003978:	48c0      	ldr	r0, [pc, #768]	; (8003c7c <test_nanofloat+0x30c>)
 800397a:	f000 ffaf 	bl	80048dc <UnityBegin>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:433

    RUN_TEST(test_aeabi_ddiv); debug_flush();
 800397e:	f240 12b1 	movw	r2, #433	; 0x1b1
 8003982:	49bf      	ldr	r1, [pc, #764]	; (8003c80 <test_nanofloat+0x310>)
 8003984:	48bf      	ldr	r0, [pc, #764]	; (8003c84 <test_nanofloat+0x314>)
 8003986:	f000 ff93 	bl	80048b0 <UnityDefaultTestRun>
 800398a:	f000 fb09 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:434
    RUN_TEST(test_aeabi_dmul); debug_flush();
 800398e:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8003992:	49bd      	ldr	r1, [pc, #756]	; (8003c88 <test_nanofloat+0x318>)
 8003994:	48bd      	ldr	r0, [pc, #756]	; (8003c8c <test_nanofloat+0x31c>)
 8003996:	f000 ff8b 	bl	80048b0 <UnityDefaultTestRun>
 800399a:	f000 fb01 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:435
    RUN_TEST(test_aeabi_dadd); debug_flush();
 800399e:	f240 12b3 	movw	r2, #435	; 0x1b3
 80039a2:	49bb      	ldr	r1, [pc, #748]	; (8003c90 <test_nanofloat+0x320>)
 80039a4:	48bb      	ldr	r0, [pc, #748]	; (8003c94 <test_nanofloat+0x324>)
 80039a6:	f000 ff83 	bl	80048b0 <UnityDefaultTestRun>
 80039aa:	f000 faf9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:436
    RUN_TEST(test_aeabi_dsub); debug_flush();
 80039ae:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80039b2:	49b9      	ldr	r1, [pc, #740]	; (8003c98 <test_nanofloat+0x328>)
 80039b4:	48b9      	ldr	r0, [pc, #740]	; (8003c9c <test_nanofloat+0x32c>)
 80039b6:	f000 ff7b 	bl	80048b0 <UnityDefaultTestRun>
 80039ba:	f000 faf1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:437
    RUN_TEST(test_aeabi_dcmpeq); debug_flush();
 80039be:	f240 12b5 	movw	r2, #437	; 0x1b5
 80039c2:	49b7      	ldr	r1, [pc, #732]	; (8003ca0 <test_nanofloat+0x330>)
 80039c4:	48b7      	ldr	r0, [pc, #732]	; (8003ca4 <test_nanofloat+0x334>)
 80039c6:	f000 ff73 	bl	80048b0 <UnityDefaultTestRun>
 80039ca:	f000 fae9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:438
    RUN_TEST(test_aeabi_dcmplt); debug_flush();
 80039ce:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80039d2:	49b5      	ldr	r1, [pc, #724]	; (8003ca8 <test_nanofloat+0x338>)
 80039d4:	48b5      	ldr	r0, [pc, #724]	; (8003cac <test_nanofloat+0x33c>)
 80039d6:	f000 ff6b 	bl	80048b0 <UnityDefaultTestRun>
 80039da:	f000 fae1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:439
    RUN_TEST(test_aeabi_dcmple); debug_flush();
 80039de:	f240 12b7 	movw	r2, #439	; 0x1b7
 80039e2:	49b3      	ldr	r1, [pc, #716]	; (8003cb0 <test_nanofloat+0x340>)
 80039e4:	48b3      	ldr	r0, [pc, #716]	; (8003cb4 <test_nanofloat+0x344>)
 80039e6:	f000 ff63 	bl	80048b0 <UnityDefaultTestRun>
 80039ea:	f000 fad9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:440
    RUN_TEST(test_aeabi_dcmpge); debug_flush();
 80039ee:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80039f2:	49b1      	ldr	r1, [pc, #708]	; (8003cb8 <test_nanofloat+0x348>)
 80039f4:	48b1      	ldr	r0, [pc, #708]	; (8003cbc <test_nanofloat+0x34c>)
 80039f6:	f000 ff5b 	bl	80048b0 <UnityDefaultTestRun>
 80039fa:	f000 fad1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:441
    RUN_TEST(test_aeabi_dcmpgt); debug_flush();
 80039fe:	f240 12b9 	movw	r2, #441	; 0x1b9
 8003a02:	49af      	ldr	r1, [pc, #700]	; (8003cc0 <test_nanofloat+0x350>)
 8003a04:	48af      	ldr	r0, [pc, #700]	; (8003cc4 <test_nanofloat+0x354>)
 8003a06:	f000 ff53 	bl	80048b0 <UnityDefaultTestRun>
 8003a0a:	f000 fac9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:442
    RUN_TEST(test_aeabi_dcmpun); debug_flush();
 8003a0e:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 8003a12:	49ad      	ldr	r1, [pc, #692]	; (8003cc8 <test_nanofloat+0x358>)
 8003a14:	48ad      	ldr	r0, [pc, #692]	; (8003ccc <test_nanofloat+0x35c>)
 8003a16:	f000 ff4b 	bl	80048b0 <UnityDefaultTestRun>
 8003a1a:	f000 fac1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:443
    RUN_TEST(test_aeabi_fdiv); debug_flush();
 8003a1e:	f240 12bb 	movw	r2, #443	; 0x1bb
 8003a22:	49ab      	ldr	r1, [pc, #684]	; (8003cd0 <test_nanofloat+0x360>)
 8003a24:	48ab      	ldr	r0, [pc, #684]	; (8003cd4 <test_nanofloat+0x364>)
 8003a26:	f000 ff43 	bl	80048b0 <UnityDefaultTestRun>
 8003a2a:	f000 fab9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:444
    RUN_TEST(test_aeabi_fmul); debug_flush();
 8003a2e:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8003a32:	49a9      	ldr	r1, [pc, #676]	; (8003cd8 <test_nanofloat+0x368>)
 8003a34:	48a9      	ldr	r0, [pc, #676]	; (8003cdc <test_nanofloat+0x36c>)
 8003a36:	f000 ff3b 	bl	80048b0 <UnityDefaultTestRun>
 8003a3a:	f000 fab1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:445
    RUN_TEST(test_aeabi_fadd); debug_flush();
 8003a3e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8003a42:	49a7      	ldr	r1, [pc, #668]	; (8003ce0 <test_nanofloat+0x370>)
 8003a44:	48a7      	ldr	r0, [pc, #668]	; (8003ce4 <test_nanofloat+0x374>)
 8003a46:	f000 ff33 	bl	80048b0 <UnityDefaultTestRun>
 8003a4a:	f000 faa9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:446
    RUN_TEST(test_aeabi_fsub); debug_flush();
 8003a4e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8003a52:	49a5      	ldr	r1, [pc, #660]	; (8003ce8 <test_nanofloat+0x378>)
 8003a54:	48a5      	ldr	r0, [pc, #660]	; (8003cec <test_nanofloat+0x37c>)
 8003a56:	f000 ff2b 	bl	80048b0 <UnityDefaultTestRun>
 8003a5a:	f000 faa1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:447
    RUN_TEST(test_aeabi_d2iz); debug_flush();
 8003a5e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8003a62:	49a3      	ldr	r1, [pc, #652]	; (8003cf0 <test_nanofloat+0x380>)
 8003a64:	48a3      	ldr	r0, [pc, #652]	; (8003cf4 <test_nanofloat+0x384>)
 8003a66:	f000 ff23 	bl	80048b0 <UnityDefaultTestRun>
 8003a6a:	f000 fa99 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:448
    RUN_TEST(test_aeabi_d2uiz); debug_flush();
 8003a6e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003a72:	49a1      	ldr	r1, [pc, #644]	; (8003cf8 <test_nanofloat+0x388>)
 8003a74:	48a1      	ldr	r0, [pc, #644]	; (8003cfc <test_nanofloat+0x38c>)
 8003a76:	f000 ff1b 	bl	80048b0 <UnityDefaultTestRun>
 8003a7a:	f000 fa91 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:450

    RUN_TEST(test_addsf3); debug_flush();
 8003a7e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003a82:	499f      	ldr	r1, [pc, #636]	; (8003d00 <test_nanofloat+0x390>)
 8003a84:	489f      	ldr	r0, [pc, #636]	; (8003d04 <test_nanofloat+0x394>)
 8003a86:	f000 ff13 	bl	80048b0 <UnityDefaultTestRun>
 8003a8a:	f000 fa89 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:451
    RUN_TEST(test_subsf3); debug_flush();
 8003a8e:	f240 12c3 	movw	r2, #451	; 0x1c3
 8003a92:	499d      	ldr	r1, [pc, #628]	; (8003d08 <test_nanofloat+0x398>)
 8003a94:	489d      	ldr	r0, [pc, #628]	; (8003d0c <test_nanofloat+0x39c>)
 8003a96:	f000 ff0b 	bl	80048b0 <UnityDefaultTestRun>
 8003a9a:	f000 fa81 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:452
    RUN_TEST(test_mulsf3); debug_flush();
 8003a9e:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8003aa2:	499b      	ldr	r1, [pc, #620]	; (8003d10 <test_nanofloat+0x3a0>)
 8003aa4:	489b      	ldr	r0, [pc, #620]	; (8003d14 <test_nanofloat+0x3a4>)
 8003aa6:	f000 ff03 	bl	80048b0 <UnityDefaultTestRun>
 8003aaa:	f000 fa79 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:453
    RUN_TEST(test_divsf3); debug_flush();
 8003aae:	f240 12c5 	movw	r2, #453	; 0x1c5
 8003ab2:	4999      	ldr	r1, [pc, #612]	; (8003d18 <test_nanofloat+0x3a8>)
 8003ab4:	4899      	ldr	r0, [pc, #612]	; (8003d1c <test_nanofloat+0x3ac>)
 8003ab6:	f000 fefb 	bl	80048b0 <UnityDefaultTestRun>
 8003aba:	f000 fa71 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:455

    RUN_TEST(test_sqrt); debug_flush();
 8003abe:	f240 12c7 	movw	r2, #455	; 0x1c7
 8003ac2:	4997      	ldr	r1, [pc, #604]	; (8003d20 <test_nanofloat+0x3b0>)
 8003ac4:	4897      	ldr	r0, [pc, #604]	; (8003d24 <test_nanofloat+0x3b4>)
 8003ac6:	f000 fef3 	bl	80048b0 <UnityDefaultTestRun>
 8003aca:	f000 fa69 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:456
    RUN_TEST(test_log); debug_flush();
 8003ace:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8003ad2:	4995      	ldr	r1, [pc, #596]	; (8003d28 <test_nanofloat+0x3b8>)
 8003ad4:	4895      	ldr	r0, [pc, #596]	; (8003d2c <test_nanofloat+0x3bc>)
 8003ad6:	f000 feeb 	bl	80048b0 <UnityDefaultTestRun>
 8003ada:	f000 fa61 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:457
    RUN_TEST(test_exp); debug_flush();
 8003ade:	f240 12c9 	movw	r2, #457	; 0x1c9
 8003ae2:	4993      	ldr	r1, [pc, #588]	; (8003d30 <test_nanofloat+0x3c0>)
 8003ae4:	4893      	ldr	r0, [pc, #588]	; (8003d34 <test_nanofloat+0x3c4>)
 8003ae6:	f000 fee3 	bl	80048b0 <UnityDefaultTestRun>
 8003aea:	f000 fa59 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:458
    RUN_TEST(test_log2); debug_flush();
 8003aee:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
 8003af2:	4991      	ldr	r1, [pc, #580]	; (8003d38 <test_nanofloat+0x3c8>)
 8003af4:	4891      	ldr	r0, [pc, #580]	; (8003d3c <test_nanofloat+0x3cc>)
 8003af6:	f000 fedb 	bl	80048b0 <UnityDefaultTestRun>
 8003afa:	f000 fa51 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:459
    RUN_TEST(test_log10); debug_flush();
 8003afe:	f240 12cb 	movw	r2, #459	; 0x1cb
 8003b02:	498f      	ldr	r1, [pc, #572]	; (8003d40 <test_nanofloat+0x3d0>)
 8003b04:	488f      	ldr	r0, [pc, #572]	; (8003d44 <test_nanofloat+0x3d4>)
 8003b06:	f000 fed3 	bl	80048b0 <UnityDefaultTestRun>
 8003b0a:	f000 fa49 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:460
    RUN_TEST(test_pow); debug_flush();
 8003b0e:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003b12:	498d      	ldr	r1, [pc, #564]	; (8003d48 <test_nanofloat+0x3d8>)
 8003b14:	488d      	ldr	r0, [pc, #564]	; (8003d4c <test_nanofloat+0x3dc>)
 8003b16:	f000 fecb 	bl	80048b0 <UnityDefaultTestRun>
 8003b1a:	f000 fa41 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:461
    RUN_TEST(test_ldexp); debug_flush();
 8003b1e:	f240 12cd 	movw	r2, #461	; 0x1cd
 8003b22:	498b      	ldr	r1, [pc, #556]	; (8003d50 <test_nanofloat+0x3e0>)
 8003b24:	488b      	ldr	r0, [pc, #556]	; (8003d54 <test_nanofloat+0x3e4>)
 8003b26:	f000 fec3 	bl	80048b0 <UnityDefaultTestRun>
 8003b2a:	f000 fa39 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:462
    RUN_TEST(test_sin); debug_flush();
 8003b2e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003b32:	4989      	ldr	r1, [pc, #548]	; (8003d58 <test_nanofloat+0x3e8>)
 8003b34:	4889      	ldr	r0, [pc, #548]	; (8003d5c <test_nanofloat+0x3ec>)
 8003b36:	f000 febb 	bl	80048b0 <UnityDefaultTestRun>
 8003b3a:	f000 fa31 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:463
    RUN_TEST(test_cos); debug_flush();
 8003b3e:	f240 12cf 	movw	r2, #463	; 0x1cf
 8003b42:	4987      	ldr	r1, [pc, #540]	; (8003d60 <test_nanofloat+0x3f0>)
 8003b44:	4887      	ldr	r0, [pc, #540]	; (8003d64 <test_nanofloat+0x3f4>)
 8003b46:	f000 feb3 	bl	80048b0 <UnityDefaultTestRun>
 8003b4a:	f000 fa29 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:464
    RUN_TEST(test_tan); debug_flush();
 8003b4e:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8003b52:	4985      	ldr	r1, [pc, #532]	; (8003d68 <test_nanofloat+0x3f8>)
 8003b54:	4885      	ldr	r0, [pc, #532]	; (8003d6c <test_nanofloat+0x3fc>)
 8003b56:	f000 feab 	bl	80048b0 <UnityDefaultTestRun>
 8003b5a:	f000 fa21 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:465
    RUN_TEST(test_atan2); debug_flush();
 8003b5e:	f240 12d1 	movw	r2, #465	; 0x1d1
 8003b62:	4983      	ldr	r1, [pc, #524]	; (8003d70 <test_nanofloat+0x400>)
 8003b64:	4883      	ldr	r0, [pc, #524]	; (8003d74 <test_nanofloat+0x404>)
 8003b66:	f000 fea3 	bl	80048b0 <UnityDefaultTestRun>
 8003b6a:	f000 fa19 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:466
    RUN_TEST(test_atan); debug_flush();
 8003b6e:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8003b72:	4981      	ldr	r1, [pc, #516]	; (8003d78 <test_nanofloat+0x408>)
 8003b74:	4881      	ldr	r0, [pc, #516]	; (8003d7c <test_nanofloat+0x40c>)
 8003b76:	f000 fe9b 	bl	80048b0 <UnityDefaultTestRun>
 8003b7a:	f000 fa11 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:467
    RUN_TEST(test_asin); debug_flush();
 8003b7e:	f240 12d3 	movw	r2, #467	; 0x1d3
 8003b82:	497f      	ldr	r1, [pc, #508]	; (8003d80 <test_nanofloat+0x410>)
 8003b84:	487f      	ldr	r0, [pc, #508]	; (8003d84 <test_nanofloat+0x414>)
 8003b86:	f000 fe93 	bl	80048b0 <UnityDefaultTestRun>
 8003b8a:	f000 fa09 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:468
    RUN_TEST(test_acos); debug_flush();
 8003b8e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8003b92:	497d      	ldr	r1, [pc, #500]	; (8003d88 <test_nanofloat+0x418>)
 8003b94:	487d      	ldr	r0, [pc, #500]	; (8003d8c <test_nanofloat+0x41c>)
 8003b96:	f000 fe8b 	bl	80048b0 <UnityDefaultTestRun>
 8003b9a:	f000 fa01 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:469
    RUN_TEST(test_sinh); debug_flush();
 8003b9e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8003ba2:	497b      	ldr	r1, [pc, #492]	; (8003d90 <test_nanofloat+0x420>)
 8003ba4:	487b      	ldr	r0, [pc, #492]	; (8003d94 <test_nanofloat+0x424>)
 8003ba6:	f000 fe83 	bl	80048b0 <UnityDefaultTestRun>
 8003baa:	f000 f9f9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:470
    RUN_TEST(test_cosh); debug_flush();
 8003bae:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003bb2:	4979      	ldr	r1, [pc, #484]	; (8003d98 <test_nanofloat+0x428>)
 8003bb4:	4879      	ldr	r0, [pc, #484]	; (8003d9c <test_nanofloat+0x42c>)
 8003bb6:	f000 fe7b 	bl	80048b0 <UnityDefaultTestRun>
 8003bba:	f000 f9f1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:471
    RUN_TEST(test_tanh); debug_flush();
 8003bbe:	f240 12d7 	movw	r2, #471	; 0x1d7
 8003bc2:	4977      	ldr	r1, [pc, #476]	; (8003da0 <test_nanofloat+0x430>)
 8003bc4:	4877      	ldr	r0, [pc, #476]	; (8003da4 <test_nanofloat+0x434>)
 8003bc6:	f000 fe73 	bl	80048b0 <UnityDefaultTestRun>
 8003bca:	f000 f9e9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:472
    RUN_TEST(test_asinh); debug_flush();
 8003bce:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8003bd2:	4975      	ldr	r1, [pc, #468]	; (8003da8 <test_nanofloat+0x438>)
 8003bd4:	4875      	ldr	r0, [pc, #468]	; (8003dac <test_nanofloat+0x43c>)
 8003bd6:	f000 fe6b 	bl	80048b0 <UnityDefaultTestRun>
 8003bda:	f000 f9e1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:473
    RUN_TEST(test_acosh); debug_flush();
 8003bde:	f240 12d9 	movw	r2, #473	; 0x1d9
 8003be2:	4973      	ldr	r1, [pc, #460]	; (8003db0 <test_nanofloat+0x440>)
 8003be4:	4873      	ldr	r0, [pc, #460]	; (8003db4 <test_nanofloat+0x444>)
 8003be6:	f000 fe63 	bl	80048b0 <UnityDefaultTestRun>
 8003bea:	f000 f9d9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:474
    RUN_TEST(test_atanh); debug_flush();
 8003bee:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8003bf2:	4971      	ldr	r1, [pc, #452]	; (8003db8 <test_nanofloat+0x448>)
 8003bf4:	4871      	ldr	r0, [pc, #452]	; (8003dbc <test_nanofloat+0x44c>)
 8003bf6:	f000 fe5b 	bl	80048b0 <UnityDefaultTestRun>
 8003bfa:	f000 f9d1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:475
    RUN_TEST(test_trunc); debug_flush();
 8003bfe:	f240 12db 	movw	r2, #475	; 0x1db
 8003c02:	496f      	ldr	r1, [pc, #444]	; (8003dc0 <test_nanofloat+0x450>)
 8003c04:	486f      	ldr	r0, [pc, #444]	; (8003dc4 <test_nanofloat+0x454>)
 8003c06:	f000 fe53 	bl	80048b0 <UnityDefaultTestRun>
 8003c0a:	f000 f9c9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:476
    RUN_TEST(test_floor); debug_flush();
 8003c0e:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8003c12:	496d      	ldr	r1, [pc, #436]	; (8003dc8 <test_nanofloat+0x458>)
 8003c14:	486d      	ldr	r0, [pc, #436]	; (8003dcc <test_nanofloat+0x45c>)
 8003c16:	f000 fe4b 	bl	80048b0 <UnityDefaultTestRun>
 8003c1a:	f000 f9c1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:477
    RUN_TEST(test_ceil); debug_flush();
 8003c1e:	f240 12dd 	movw	r2, #477	; 0x1dd
 8003c22:	496b      	ldr	r1, [pc, #428]	; (8003dd0 <test_nanofloat+0x460>)
 8003c24:	486b      	ldr	r0, [pc, #428]	; (8003dd4 <test_nanofloat+0x464>)
 8003c26:	f000 fe43 	bl	80048b0 <UnityDefaultTestRun>
 8003c2a:	f000 f9b9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:478
    RUN_TEST(test_fmod); debug_flush();
 8003c2e:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8003c32:	4969      	ldr	r1, [pc, #420]	; (8003dd8 <test_nanofloat+0x468>)
 8003c34:	4869      	ldr	r0, [pc, #420]	; (8003ddc <test_nanofloat+0x46c>)
 8003c36:	f000 fe3b 	bl	80048b0 <UnityDefaultTestRun>
 8003c3a:	f000 f9b1 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:479
    RUN_TEST(test_fabs); debug_flush();
 8003c3e:	f240 12df 	movw	r2, #479	; 0x1df
 8003c42:	4967      	ldr	r1, [pc, #412]	; (8003de0 <test_nanofloat+0x470>)
 8003c44:	4867      	ldr	r0, [pc, #412]	; (8003de4 <test_nanofloat+0x474>)
 8003c46:	f000 fe33 	bl	80048b0 <UnityDefaultTestRun>
 8003c4a:	f000 f9a9 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:481

    int fails = UNITY_END(); debug_flush();
 8003c4e:	f000 fe55 	bl	80048fc <UnityEnd>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:484

    //  Fetch the usage stats and display functions with no usage.
    uint16_t size = 0;
 8003c52:	2500      	movs	r5, #0
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:481
    int fails = UNITY_END(); debug_flush();
 8003c54:	4607      	mov	r7, r0
 8003c56:	f000 f9a3 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:484
    uint16_t size = 0;
 8003c5a:	a802      	add	r0, sp, #8
 8003c5c:	f820 5d02 	strh.w	r5, [r0, #-2]!
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:485
    uint8_t *float_usage = get_float_usage(&size);
 8003c60:	f000 fe86 	bl	8004970 <get_float_usage>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:486
    if (float_usage != NULL && size < 1000) {
 8003c64:	4606      	mov	r6, r0
 8003c66:	b128      	cbz	r0, 8003c74 <test_nanofloat+0x304>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:486 (discriminator 1)
 8003c68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c70:	f0c0 80e1 	bcc.w	8003e36 <test_nanofloat+0x4c6>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:508
        debug_println(""); debug_flush();
    }
    //  Crash and exit QEMU.
    //  rtc_awake_from_off(LSE);
    return fails;
}
 8003c74:	4638      	mov	r0, r7
 8003c76:	b002      	add	sp, #8
 8003c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c7c:	08006ea5 	.word	0x08006ea5
 8003c80:	08006ec7 	.word	0x08006ec7
 8003c84:	080002b1 	.word	0x080002b1
 8003c88:	08006ed7 	.word	0x08006ed7
 8003c8c:	08000451 	.word	0x08000451
 8003c90:	08006ee7 	.word	0x08006ee7
 8003c94:	080005f1 	.word	0x080005f1
 8003c98:	08006ef7 	.word	0x08006ef7
 8003c9c:	08000771 	.word	0x08000771
 8003ca0:	08006f07 	.word	0x08006f07
 8003ca4:	080008f1 	.word	0x080008f1
 8003ca8:	08006f19 	.word	0x08006f19
 8003cac:	08000a99 	.word	0x08000a99
 8003cb0:	08006f2b 	.word	0x08006f2b
 8003cb4:	08000c41 	.word	0x08000c41
 8003cb8:	08006f3d 	.word	0x08006f3d
 8003cbc:	08000de9 	.word	0x08000de9
 8003cc0:	08006f4f 	.word	0x08006f4f
 8003cc4:	08000f91 	.word	0x08000f91
 8003cc8:	08006f61 	.word	0x08006f61
 8003ccc:	08001139 	.word	0x08001139
 8003cd0:	08006f73 	.word	0x08006f73
 8003cd4:	080012dd 	.word	0x080012dd
 8003cd8:	08006f83 	.word	0x08006f83
 8003cdc:	08001681 	.word	0x08001681
 8003ce0:	08006f93 	.word	0x08006f93
 8003ce4:	080013e1 	.word	0x080013e1
 8003ce8:	08006fa3 	.word	0x08006fa3
 8003cec:	08001531 	.word	0x08001531
 8003cf0:	08006fb3 	.word	0x08006fb3
 8003cf4:	080017b1 	.word	0x080017b1
 8003cf8:	08006fc3 	.word	0x08006fc3
 8003cfc:	08001849 	.word	0x08001849
 8003d00:	08006fd4 	.word	0x08006fd4
 8003d04:	080018d9 	.word	0x080018d9
 8003d08:	08006fe0 	.word	0x08006fe0
 8003d0c:	08001a29 	.word	0x08001a29
 8003d10:	08006fec 	.word	0x08006fec
 8003d14:	08001b79 	.word	0x08001b79
 8003d18:	08006ff8 	.word	0x08006ff8
 8003d1c:	08001ca9 	.word	0x08001ca9
 8003d20:	08007004 	.word	0x08007004
 8003d24:	08001dd9 	.word	0x08001dd9
 8003d28:	0800700e 	.word	0x0800700e
 8003d2c:	08001ea1 	.word	0x08001ea1
 8003d30:	08007017 	.word	0x08007017
 8003d34:	08001f71 	.word	0x08001f71
 8003d38:	08007020 	.word	0x08007020
 8003d3c:	08002099 	.word	0x08002099
 8003d40:	0800702a 	.word	0x0800702a
 8003d44:	080021b1 	.word	0x080021b1
 8003d48:	08007035 	.word	0x08007035
 8003d4c:	08002289 	.word	0x08002289
 8003d50:	0800703e 	.word	0x0800703e
 8003d54:	080023a1 	.word	0x080023a1
 8003d58:	08007049 	.word	0x08007049
 8003d5c:	08002471 	.word	0x08002471
 8003d60:	08007052 	.word	0x08007052
 8003d64:	080025c9 	.word	0x080025c9
 8003d68:	0800705b 	.word	0x0800705b
 8003d6c:	08002729 	.word	0x08002729
 8003d70:	08007064 	.word	0x08007064
 8003d74:	08002879 	.word	0x08002879
 8003d78:	0800706f 	.word	0x0800706f
 8003d7c:	08002a99 	.word	0x08002a99
 8003d80:	08007079 	.word	0x08007079
 8003d84:	08002b69 	.word	0x08002b69
 8003d88:	08007083 	.word	0x08007083
 8003d8c:	08002c11 	.word	0x08002c11
 8003d90:	0800708d 	.word	0x0800708d
 8003d94:	08002d89 	.word	0x08002d89
 8003d98:	08007097 	.word	0x08007097
 8003d9c:	08002e99 	.word	0x08002e99
 8003da0:	080070a1 	.word	0x080070a1
 8003da4:	08002fa9 	.word	0x08002fa9
 8003da8:	080070ab 	.word	0x080070ab
 8003dac:	080030b9 	.word	0x080030b9
 8003db0:	080070b6 	.word	0x080070b6
 8003db4:	080031c9 	.word	0x080031c9
 8003db8:	080070c1 	.word	0x080070c1
 8003dbc:	08003259 	.word	0x08003259
 8003dc0:	080070cc 	.word	0x080070cc
 8003dc4:	08003321 	.word	0x08003321
 8003dc8:	080070d7 	.word	0x080070d7
 8003dcc:	08003499 	.word	0x08003499
 8003dd0:	080070e2 	.word	0x080070e2
 8003dd4:	08003619 	.word	0x08003619
 8003dd8:	080070ec 	.word	0x080070ec
 8003ddc:	08003799 	.word	0x08003799
 8003de0:	080070f6 	.word	0x080070f6
 8003de4:	08000151 	.word	0x08000151
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:490
            if (float_usage[i] > 0) { continue; }
 8003de8:	5d32      	ldrb	r2, [r6, r4]
 8003dea:	b93a      	cbnz	r2, 8003dfc <test_nanofloat+0x48c>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:491
            if (!no_usage) {
 8003dec:	bb0b      	cbnz	r3, 8003e32 <test_nanofloat+0x4c2>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:493
                debug_print("*** Functions not called: ");
 8003dee:	4640      	mov	r0, r8
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:494
            } else { debug_print(", "); }
 8003df0:	f000 f8f3 	bl	8003fda <debug_print>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:495
            debug_printhex(i);
 8003df4:	b2e0      	uxtb	r0, r4
 8003df6:	f000 f90b 	bl	8004010 <debug_printhex>
 8003dfa:	2301      	movs	r3, #1
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:489 (discriminator 2)
        for (i = 1; i < size; i++) {
 8003dfc:	3401      	adds	r4, #1
 8003dfe:	b2a4      	uxth	r4, r4
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:489 (discriminator 1)
 8003e00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003e04:	42a2      	cmp	r2, r4
 8003e06:	d8ef      	bhi.n	8003de8 <test_nanofloat+0x478>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:497
        if (!no_usage) { debug_print("All functions called"); }
 8003e08:	b913      	cbnz	r3, 8003e10 <test_nanofloat+0x4a0>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:497 (discriminator 1)
 8003e0a:	4816      	ldr	r0, [pc, #88]	; (8003e64 <test_nanofloat+0x4f4>)
 8003e0c:	f000 f8e5 	bl	8003fda <debug_print>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:498
        debug_print("\nUsage: ");
 8003e10:	4815      	ldr	r0, [pc, #84]	; (8003e68 <test_nanofloat+0x4f8>)
 8003e12:	f000 f8e2 	bl	8003fda <debug_print>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:499
        for (i = 1; i < size; i++) {
 8003e16:	2401      	movs	r4, #1
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:501
            debug_printhex(i); debug_print(" > "); debug_printhex(float_usage[i]); debug_print(" / ");
 8003e18:	4d14      	ldr	r5, [pc, #80]	; (8003e6c <test_nanofloat+0x4fc>)
 8003e1a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003e78 <test_nanofloat+0x508>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:499 (discriminator 1)
        for (i = 1; i < size; i++) {
 8003e1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	d80d      	bhi.n	8003e42 <test_nanofloat+0x4d2>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:503
        debug_println(""); debug_flush();
 8003e26:	4812      	ldr	r0, [pc, #72]	; (8003e70 <test_nanofloat+0x500>)
 8003e28:	f000 f8e4 	bl	8003ff4 <debug_println>
 8003e2c:	f000 f8b8 	bl	8003fa0 <debug_flush>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:507
    return fails;
 8003e30:	e720      	b.n	8003c74 <test_nanofloat+0x304>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:494
            } else { debug_print(", "); }
 8003e32:	4628      	mov	r0, r5
 8003e34:	e7dc      	b.n	8003df0 <test_nanofloat+0x480>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:487
        bool no_usage = false;
 8003e36:	462b      	mov	r3, r5
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:489
        for (i = 1; i < size; i++) {
 8003e38:	2401      	movs	r4, #1
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:494
            } else { debug_print(", "); }
 8003e3a:	4d0e      	ldr	r5, [pc, #56]	; (8003e74 <test_nanofloat+0x504>)
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:493
                debug_print("*** Functions not called: ");
 8003e3c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8003e7c <test_nanofloat+0x50c>
 8003e40:	e7de      	b.n	8003e00 <test_nanofloat+0x490>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:500
            if (float_usage[i] == 0) { continue; }
 8003e42:	5d33      	ldrb	r3, [r6, r4]
 8003e44:	b15b      	cbz	r3, 8003e5e <test_nanofloat+0x4ee>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:501
            debug_printhex(i); debug_print(" > "); debug_printhex(float_usage[i]); debug_print(" / ");
 8003e46:	b2e0      	uxtb	r0, r4
 8003e48:	f000 f8e2 	bl	8004010 <debug_printhex>
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	f000 f8c4 	bl	8003fda <debug_print>
 8003e52:	5d30      	ldrb	r0, [r6, r4]
 8003e54:	f000 f8dc 	bl	8004010 <debug_printhex>
 8003e58:	4640      	mov	r0, r8
 8003e5a:	f000 f8be 	bl	8003fda <debug_print>
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:499 (discriminator 2)
        for (i = 1; i < size; i++) {
 8003e5e:	3401      	adds	r4, #1
 8003e60:	b2a4      	uxth	r4, r4
 8003e62:	e7dc      	b.n	8003e1e <test_nanofloat+0x4ae>
 8003e64:	0800711e 	.word	0x0800711e
 8003e68:	08007133 	.word	0x08007133
 8003e6c:	0800713c 	.word	0x0800713c
 8003e70:	08007150 	.word	0x08007150
 8003e74:	0800711b 	.word	0x0800711b
 8003e78:	08007140 	.word	0x08007140
 8003e7c:	08007100 	.word	0x08007100

08003e80 <main>:
main():
/Users/Luppy/stm32bluepill-unittest/src/main.c:7
#ifdef UNIT_TEST
extern int test_nanofloat(void);
#endif  //  UNIT_TEST

int main(void)
{	
 8003e80:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/src/main.c:8
	enable_log();          //  Enable logging via Arm Semihosting. Note: ST Link must be connected or this line will hang.
 8003e82:	f000 f83f 	bl	8003f04 <enable_log>
/Users/Luppy/stm32bluepill-unittest/src/main.c:9
	debug_println("Starting..."); debug_force_flush();
 8003e86:	4806      	ldr	r0, [pc, #24]	; (8003ea0 <main+0x20>)
 8003e88:	f000 f8b4 	bl	8003ff4 <debug_println>
 8003e8c:	f000 f88c 	bl	8003fa8 <debug_force_flush>
/Users/Luppy/stm32bluepill-unittest/src/main.c:12

#ifdef UNIT_TEST
	test_nanofloat();
 8003e90:	f7ff fd6e 	bl	8003970 <test_nanofloat>
/Users/Luppy/stm32bluepill-unittest/src/main.c:15
#endif  //  UNIT_TEST

	debug_println("Done");
 8003e94:	4803      	ldr	r0, [pc, #12]	; (8003ea4 <main+0x24>)
 8003e96:	f000 f8ad 	bl	8003ff4 <debug_println>
/Users/Luppy/stm32bluepill-unittest/src/main.c:16
	debug_force_flush();   //  Flush the debug buffer before we halt.
 8003e9a:	f000 f885 	bl	8003fa8 <debug_force_flush>
 8003e9e:	e7fe      	b.n	8003e9e <main+0x1e>
 8003ea0:	08006e94 	.word	0x08006e94
 8003ea4:	08006ea0 	.word	0x08006ea0

08003ea8 <unity_output_char>:
unity_output_char():
/Users/Luppy/stm32bluepill-unittest/src/../lib/nano-float/test/test.c:511

void unity_output_char(int ch) {
    debug_write((uint8_t) ch);
 8003ea8:	b2c0      	uxtb	r0, r0
 8003eaa:	f000 b88b 	b.w	8003fc4 <debug_write>
	...

08003eb0 <_ZL12debug_appendPKcj>:
_ZL12debug_appendPKcj():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:170
    }
}

static void debug_append(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the debug buffer.
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 8003eb0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:168
static void debug_append(const char *buffer, unsigned int length) {
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	4606      	mov	r6, r0
 8003eb8:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:170
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 8003eba:	d210      	bcs.n	8003ede <_ZL12debug_appendPKcj+0x2e>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:171
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8003ebc:	4c0e      	ldr	r4, [pc, #56]	; (8003ef8 <_ZL12debug_appendPKcj+0x48>)
 8003ebe:	8823      	ldrh	r3, [r4, #0]
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec6:	d20b      	bcs.n	8003ee0 <_ZL12debug_appendPKcj+0x30>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:179
        debugBufferLength = 9;
        //  Still can't fit after clearing.  Quit.
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
    }
    //  Else append to the buffer.
    memcpy(&debugBuffer[debugBufferLength], buffer, length);
 8003ec8:	8823      	ldrh	r3, [r4, #0]
 8003eca:	480c      	ldr	r0, [pc, #48]	; (8003efc <_ZL12debug_appendPKcj+0x4c>)
 8003ecc:	4631      	mov	r1, r6
 8003ece:	462a      	mov	r2, r5
 8003ed0:	4418      	add	r0, r3
 8003ed2:	f001 fc2d 	bl	8005730 <memcpy>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:180
    debugBufferLength += length;
 8003ed6:	8821      	ldrh	r1, [r4, #0]
 8003ed8:	4429      	add	r1, r5
 8003eda:	b289      	uxth	r1, r1
 8003edc:	8021      	strh	r1, [r4, #0]
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:181
}
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:173
        strcpy(debugBuffer, "[DROPPED]");
 8003ee0:	4907      	ldr	r1, [pc, #28]	; (8003f00 <_ZL12debug_appendPKcj+0x50>)
 8003ee2:	4806      	ldr	r0, [pc, #24]	; (8003efc <_ZL12debug_appendPKcj+0x4c>)
 8003ee4:	f001 fce4 	bl	80058b0 <strcpy>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:174
        debugBufferLength = 9;
 8003ee8:	2309      	movs	r3, #9
 8003eea:	8023      	strh	r3, [r4, #0]
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:176
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
 8003eec:	8823      	ldrh	r3, [r4, #0]
 8003eee:	442b      	add	r3, r5
 8003ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef4:	d3e8      	bcc.n	8003ec8 <_ZL12debug_appendPKcj+0x18>
 8003ef6:	e7f2      	b.n	8003ede <_ZL12debug_appendPKcj+0x2e>
 8003ef8:	20000248 	.word	0x20000248
 8003efc:	20000035 	.word	0x20000035
 8003f00:	08007144 	.word	0x08007144

08003f04 <enable_log>:
enable_log():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:11
void enable_log(void) { logEnabled = true; }
 8003f04:	2201      	movs	r2, #1
 8003f06:	4b01      	ldr	r3, [pc, #4]	; (8003f0c <enable_log+0x8>)
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	4770      	bx	lr
 8003f0c:	20000034 	.word	0x20000034

08003f10 <_Z20debug_flush_internalb>:
_Z20debug_flush_internalb():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:139
void debug_flush_internal(bool forced) {
 8003f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:141
    if (!logEnabled) { debugBufferLength = 0; return; }  //  Skip if log not enabled.
 8003f14:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <_Z20debug_flush_internalb+0x80>)
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:139
void debug_flush_internal(bool forced) {
 8003f16:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:141
    if (!logEnabled) { debugBufferLength = 0; return; }  //  Skip if log not enabled.
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	4c1e      	ldr	r4, [pc, #120]	; (8003f94 <_Z20debug_flush_internalb+0x84>)
 8003f1c:	b91b      	cbnz	r3, 8003f26 <_Z20debug_flush_internalb+0x16>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:147
        debugBufferLength = 0;
 8003f1e:	8023      	strh	r3, [r4, #0]
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:153
}
 8003f20:	b005      	add	sp, #20
 8003f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:142
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 8003f26:	8823      	ldrh	r3, [r4, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f8      	beq.n	8003f20 <_Z20debug_flush_internalb+0x10>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:143
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8003f2e:	8826      	ldrh	r6, [r4, #0]
 8003f30:	b2b6      	uxth	r6, r6
write_all_output():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:121
    uint16_t outlen = (len > MAX_OUTPUT_LENGTH) ? MAX_OUTPUT_LENGTH : len;
 8003f32:	2e3c      	cmp	r6, #60	; 0x3c
 8003f34:	4635      	mov	r5, r6
 8003f36:	bf28      	it	cs
 8003f38:	253c      	movcs	r5, #60	; 0x3c
semihost_write():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:64
    if (length == 0) { return 0; }
 8003f3a:	b14e      	cbz	r6, 8003f50 <_Z20debug_flush_internalb+0x40>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:66
    args[0] = (uint32_t)fh;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	9301      	str	r3, [sp, #4]
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:67
    args[1] = (uint32_t)buffer;
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <_Z20debug_flush_internalb+0x88>)
__semihost():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:39
	);
 8003f42:	aa01      	add	r2, sp, #4
semihost_write():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:68
    args[2] = (uint32_t)length;
 8003f44:	e9cd 3502 	strd	r3, r5, [sp, #8]
__semihost():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:39
	);
 8003f48:	2305      	movs	r3, #5
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	beab      	bkpt	0x00ab
write_all_output():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:130
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003f50:	2700      	movs	r7, #0
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:131
        if (output_funcs[i]) {
 8003f52:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8003f9c <_Z20debug_flush_internalb+0x8c>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:133
            func(buf, outlen);
 8003f56:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8003f98 <_Z20debug_flush_internalb+0x88>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:131
        if (output_funcs[i]) {
 8003f5a:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
 8003f5e:	b113      	cbz	r3, 8003f66 <_Z20debug_flush_internalb+0x56>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:133
            func(buf, outlen);
 8003f60:	4629      	mov	r1, r5
 8003f62:	4648      	mov	r0, r9
 8003f64:	4798      	blx	r3
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:130
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003f66:	3701      	adds	r7, #1
 8003f68:	2f04      	cmp	r7, #4
 8003f6a:	d1f6      	bne.n	8003f5a <_Z20debug_flush_internalb+0x4a>
_Z20debug_flush_internalb():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:144
    if (outlen == 0) {
 8003f6c:	2e00      	cmp	r6, #0
 8003f6e:	d0d7      	beq.n	8003f20 <_Z20debug_flush_internalb+0x10>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:146
    } else if (outlen >= debugBufferLength) {
 8003f70:	8823      	ldrh	r3, [r4, #0]
 8003f72:	429d      	cmp	r5, r3
 8003f74:	d301      	bcc.n	8003f7a <_Z20debug_flush_internalb+0x6a>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:147
        debugBufferLength = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e7d1      	b.n	8003f1e <_Z20debug_flush_internalb+0xe>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:151
    memcpy(debugBuffer, &debugBuffer[outlen], debugBufferLength - outlen);
 8003f7a:	8822      	ldrh	r2, [r4, #0]
 8003f7c:	4806      	ldr	r0, [pc, #24]	; (8003f98 <_Z20debug_flush_internalb+0x88>)
 8003f7e:	1b52      	subs	r2, r2, r5
 8003f80:	1941      	adds	r1, r0, r5
 8003f82:	f001 fbd5 	bl	8005730 <memcpy>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:152
    debugBufferLength -= outlen;
 8003f86:	8823      	ldrh	r3, [r4, #0]
 8003f88:	1b5d      	subs	r5, r3, r5
 8003f8a:	b2ad      	uxth	r5, r5
 8003f8c:	8025      	strh	r5, [r4, #0]
 8003f8e:	e7c7      	b.n	8003f20 <_Z20debug_flush_internalb+0x10>
 8003f90:	20000034 	.word	0x20000034
 8003f94:	20000248 	.word	0x20000248
 8003f98:	20000035 	.word	0x20000035
 8003f9c:	20000238 	.word	0x20000238

08003fa0 <debug_flush>:
debug_flush():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:157
    return debug_flush_internal(false);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f7ff bfb5 	b.w	8003f10 <_Z20debug_flush_internalb>
	...

08003fa8 <debug_force_flush>:
debug_force_flush():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:160
void debug_force_flush(void) {
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	2464      	movs	r4, #100	; 0x64
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:163
        if (debugBufferLength == 0) { return; }  //  No more chunks.
 8003fac:	4d04      	ldr	r5, [pc, #16]	; (8003fc0 <debug_force_flush+0x18>)
 8003fae:	882b      	ldrh	r3, [r5, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b123      	cbz	r3, 8003fbe <debug_force_flush+0x16>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:164 (discriminator 2)
        debug_flush_internal(true);
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	f7ff ffab 	bl	8003f10 <_Z20debug_flush_internalb>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:162 (discriminator 2)
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8003fba:	3c01      	subs	r4, #1
 8003fbc:	d1f7      	bne.n	8003fae <debug_force_flush+0x6>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:166
}
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	20000248 	.word	0x20000248

08003fc4 <debug_write>:
debug_write():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:244

void debug_begin(uint16_t bps) {
    //  TODO
}

void debug_write(uint8_t ch) {
 8003fc4:	b507      	push	{r0, r1, r2, lr}
 8003fc6:	ab02      	add	r3, sp, #8
 8003fc8:	f803 0d01 	strb.w	r0, [r3, #-1]!
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:245
	debug_append((const char *) &ch, 1);
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff6e 	bl	8003eb0 <_ZL12debug_appendPKcj>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:246
}
 8003fd4:	b003      	add	sp, #12
 8003fd6:	f85d fb04 	ldr.w	pc, [sp], #4

08003fda <debug_print>:
debug_print():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:248

void debug_print(const char *s) {
 8003fda:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:249
    if (s[0] == 0) return;
 8003fdc:	7803      	ldrb	r3, [r0, #0]
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:248
void debug_print(const char *s) {
 8003fde:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:249
    if (s[0] == 0) return;
 8003fe0:	b13b      	cbz	r3, 8003ff2 <debug_print+0x18>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:250
	debug_append(s, strlen(s));
 8003fe2:	f001 fcc3 	bl	800596c <strlen>
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	4620      	mov	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:251
}
 8003fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:250
	debug_append(s, strlen(s));
 8003fee:	f7ff bf5f 	b.w	8003eb0 <_ZL12debug_appendPKcj>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:251
}
 8003ff2:	bd10      	pop	{r4, pc}

08003ff4 <debug_println>:
debug_println():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:253

void debug_println(const char *s) {
 8003ff4:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:254
    if (s[0] != 0) { debug_print(s); }
 8003ff6:	7803      	ldrb	r3, [r0, #0]
 8003ff8:	b10b      	cbz	r3, 8003ffe <debug_println+0xa>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:254 (discriminator 1)
 8003ffa:	f7ff ffee 	bl	8003fda <debug_print>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:256
    debug_append("\r\n", 2);
}
 8003ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:255
    debug_append("\r\n", 2);
 8004002:	2102      	movs	r1, #2
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <debug_println+0x18>)
 8004006:	f7ff bf53 	b.w	8003eb0 <_ZL12debug_appendPKcj>
 800400a:	bf00      	nop
 800400c:	0800714e 	.word	0x0800714e

08004010 <debug_printhex>:
debug_printhex():
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:287
void debug_print_int(int i) { debug_print(i); }
void debug_print_unsigned(size_t l) { debug_print(l); }
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 8004010:	b507      	push	{r0, r1, r2, lr}
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:295
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 8004012:	0902      	lsrs	r2, r0, #4
 8004014:	f102 0330 	add.w	r3, r2, #48	; 0x30
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:296
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8004018:	2b39      	cmp	r3, #57	; 0x39
 800401a:	bf88      	it	hi
 800401c:	f102 0357 	addhi.w	r3, r2, #87	; 0x57
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:302
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
            }
        }
        v = v % divisor;
 8004020:	f000 000f 	and.w	r0, r0, #15
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:299
                buffer[length++] = digit;
 8004024:	f88d 3004 	strb.w	r3, [sp, #4]
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:295
        char digit = '0' + (char)(v / divisor);
 8004028:	f100 0330 	add.w	r3, r0, #48	; 0x30
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:296
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 800402c:	2b39      	cmp	r3, #57	; 0x39
 800402e:	bf88      	it	hi
 8004030:	f100 0357 	addhi.w	r3, r0, #87	; 0x57
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:299
                buffer[length++] = digit;
 8004034:	f88d 3005 	strb.w	r3, [sp, #5]
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:306
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8004038:	2300      	movs	r3, #0
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:308

    debug_append(buffer, strlen(buffer));
 800403a:	a801      	add	r0, sp, #4
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:306
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 800403c:	f88d 3006 	strb.w	r3, [sp, #6]
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:308
    debug_append(buffer, strlen(buffer));
 8004040:	f001 fc94 	bl	800596c <strlen>
 8004044:	4601      	mov	r1, r0
 8004046:	a801      	add	r0, sp, #4
 8004048:	f7ff ff32 	bl	8003eb0 <_ZL12debug_appendPKcj>
/Users/Luppy/stm32bluepill-unittest/lib/logger/src/logger.cpp:309
}
 800404c:	b003      	add	sp, #12
 800404e:	f85d fb04 	ldr.w	pc, [sp], #4

08004052 <UnityFloatsWithin>:
UnityFloatsWithin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:786
    UnityPrint(UnityStrDelta)
#endif /* UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static int UnityFloatsWithin(UNITY_FLOAT delta, UNITY_FLOAT expected, UNITY_FLOAT actual)
{
 8004052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004056:	4606      	mov	r6, r0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788
    UNITY_FLOAT diff;
    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);
 8004058:	4608      	mov	r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:786
{
 800405a:	460d      	mov	r5, r1
 800405c:	4614      	mov	r4, r2
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788
    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);
 800405e:	f002 f99b 	bl	8006398 <__aeabi_fsub>
 8004062:	4601      	mov	r1, r0
 8004064:	f002 fc36 	bl	80068d4 <__aeabi_fcmpeq>
 8004068:	4629      	mov	r1, r5
 800406a:	2800      	cmp	r0, #0
 800406c:	d154      	bne.n	8004118 <UnityFloatsWithin+0xc6>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 1)
 800406e:	4628      	mov	r0, r5
 8004070:	f002 fc30 	bl	80068d4 <__aeabi_fcmpeq>
 8004074:	2800      	cmp	r0, #0
 8004076:	d054      	beq.n	8004122 <UnityFloatsWithin+0xd0>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 3)
 8004078:	4621      	mov	r1, r4
 800407a:	4620      	mov	r0, r4
 800407c:	f002 f98c 	bl	8006398 <__aeabi_fsub>
 8004080:	4601      	mov	r1, r0
 8004082:	f002 fc27 	bl	80068d4 <__aeabi_fcmpeq>
 8004086:	b9d8      	cbnz	r0, 80040c0 <UnityFloatsWithin+0x6e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 5)
 8004088:	4621      	mov	r1, r4
 800408a:	4620      	mov	r0, r4
 800408c:	f002 fc22 	bl	80068d4 <__aeabi_fcmpeq>
 8004090:	b1b0      	cbz	r0, 80040c0 <UnityFloatsWithin+0x6e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 7)
 8004092:	2100      	movs	r1, #0
 8004094:	4628      	mov	r0, r5
 8004096:	f04f 0701 	mov.w	r7, #1
 800409a:	f002 fc25 	bl	80068e8 <__aeabi_fcmplt>
 800409e:	b900      	cbnz	r0, 80040a2 <UnityFloatsWithin+0x50>
 80040a0:	4607      	mov	r7, r0
 80040a2:	2100      	movs	r1, #0
 80040a4:	4620      	mov	r0, r4
 80040a6:	f087 0701 	eor.w	r7, r7, #1
 80040aa:	f04f 0801 	mov.w	r8, #1
 80040ae:	f002 fc1b 	bl	80068e8 <__aeabi_fcmplt>
 80040b2:	b900      	cbnz	r0, 80040b6 <UnityFloatsWithin+0x64>
 80040b4:	4680      	mov	r8, r0
 80040b6:	fa5f f888 	uxtb.w	r8, r8
 80040ba:	b2ff      	uxtb	r7, r7
 80040bc:	45b8      	cmp	r8, r7
 80040be:	d136      	bne.n	800412e <UnityFloatsWithin+0xdc>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 14)
 80040c0:	4629      	mov	r1, r5
 80040c2:	4620      	mov	r0, r4
 80040c4:	f002 f968 	bl	8006398 <__aeabi_fsub>
 80040c8:	2100      	movs	r1, #0
 80040ca:	4605      	mov	r5, r0
 80040cc:	f002 fc0c 	bl	80068e8 <__aeabi_fcmplt>
 80040d0:	b108      	cbz	r0, 80040d6 <UnityFloatsWithin+0x84>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 15)
 80040d2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 17)
 80040d6:	2100      	movs	r1, #0
 80040d8:	4630      	mov	r0, r6
 80040da:	f002 fc05 	bl	80068e8 <__aeabi_fcmplt>
 80040de:	b108      	cbz	r0, 80040e4 <UnityFloatsWithin+0x92>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 18)
 80040e0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 20)
 80040e4:	4629      	mov	r1, r5
 80040e6:	4628      	mov	r0, r5
 80040e8:	f002 fbf4 	bl	80068d4 <__aeabi_fcmpeq>
 80040ec:	b308      	cbz	r0, 8004132 <UnityFloatsWithin+0xe0>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 21)
 80040ee:	4629      	mov	r1, r5
 80040f0:	4628      	mov	r0, r5
 80040f2:	f002 f951 	bl	8006398 <__aeabi_fsub>
 80040f6:	4601      	mov	r1, r0
 80040f8:	f002 fbec 	bl	80068d4 <__aeabi_fcmpeq>
 80040fc:	b150      	cbz	r0, 8004114 <UnityFloatsWithin+0xc2>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 23)
 80040fe:	4629      	mov	r1, r5
 8004100:	4630      	mov	r0, r6
 8004102:	f04f 0401 	mov.w	r4, #1
 8004106:	f002 fbef 	bl	80068e8 <__aeabi_fcmplt>
 800410a:	b900      	cbnz	r0, 800410e <UnityFloatsWithin+0xbc>
 800410c:	4604      	mov	r4, r0
 800410e:	f084 0001 	eor.w	r0, r4, #1
 8004112:	b2c0      	uxtb	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:789
}
 8004114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 10)
    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);
 8004118:	4628      	mov	r0, r5
 800411a:	f002 fbdb 	bl	80068d4 <__aeabi_fcmpeq>
 800411e:	2800      	cmp	r0, #0
 8004120:	d1ce      	bne.n	80040c0 <UnityFloatsWithin+0x6e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788 (discriminator 11)
 8004122:	4621      	mov	r1, r4
 8004124:	4620      	mov	r0, r4
 8004126:	f002 fbd5 	bl	80068d4 <__aeabi_fcmpeq>
 800412a:	2800      	cmp	r0, #0
 800412c:	d1c8      	bne.n	80040c0 <UnityFloatsWithin+0x6e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:788
 800412e:	2001      	movs	r0, #1
 8004130:	e7f0      	b.n	8004114 <UnityFloatsWithin+0xc2>
 8004132:	2000      	movs	r0, #0
 8004134:	e7ee      	b.n	8004114 <UnityFloatsWithin+0xc2>

08004136 <UnityDoublesWithin>:
UnityDoublesWithin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:927
#endif /* not UNITY_EXCLUDE_FLOAT */

/*-----------------------------------------------*/
#ifndef UNITY_EXCLUDE_DOUBLE
static int UnityDoublesWithin(UNITY_DOUBLE delta, UNITY_DOUBLE expected, UNITY_DOUBLE actual)
{
 8004136:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800413a:	4680      	mov	r8, r0
 800413c:	460f      	mov	r7, r1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929
    UNITY_DOUBLE diff;
    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:927
{
 8004142:	4614      	mov	r4, r2
 8004144:	461d      	mov	r5, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929
    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);
 8004146:	f001 fc43 	bl	80059d0 <__aeabi_dsub>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	f002 f85f 	bl	8006210 <__aeabi_dcmpeq>
 8004152:	4622      	mov	r2, r4
 8004154:	462b      	mov	r3, r5
 8004156:	2800      	cmp	r0, #0
 8004158:	d16b      	bne.n	8004232 <UnityDoublesWithin+0xfc>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 1)
 800415a:	4620      	mov	r0, r4
 800415c:	4629      	mov	r1, r5
 800415e:	f002 f857 	bl	8006210 <__aeabi_dcmpeq>
 8004162:	2800      	cmp	r0, #0
 8004164:	d06b      	beq.n	800423e <UnityDoublesWithin+0x108>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 3)
 8004166:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f001 fc2f 	bl	80059d0 <__aeabi_dsub>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	f002 f84b 	bl	8006210 <__aeabi_dcmpeq>
 800417a:	bb08      	cbnz	r0, 80041c0 <UnityDoublesWithin+0x8a>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 5)
 800417c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	f002 f844 	bl	8006210 <__aeabi_dcmpeq>
 8004188:	b1d0      	cbz	r0, 80041c0 <UnityDoublesWithin+0x8a>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 7)
 800418a:	2200      	movs	r2, #0
 800418c:	2300      	movs	r3, #0
 800418e:	4620      	mov	r0, r4
 8004190:	4629      	mov	r1, r5
 8004192:	f04f 0601 	mov.w	r6, #1
 8004196:	f002 f845 	bl	8006224 <__aeabi_dcmplt>
 800419a:	b900      	cbnz	r0, 800419e <UnityDoublesWithin+0x68>
 800419c:	4606      	mov	r6, r0
 800419e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041a2:	2200      	movs	r2, #0
 80041a4:	2300      	movs	r3, #0
 80041a6:	f086 0601 	eor.w	r6, r6, #1
 80041aa:	f04f 0901 	mov.w	r9, #1
 80041ae:	f002 f839 	bl	8006224 <__aeabi_dcmplt>
 80041b2:	b900      	cbnz	r0, 80041b6 <UnityDoublesWithin+0x80>
 80041b4:	4681      	mov	r9, r0
 80041b6:	fa5f f989 	uxtb.w	r9, r9
 80041ba:	b2f6      	uxtb	r6, r6
 80041bc:	45b1      	cmp	r9, r6
 80041be:	d146      	bne.n	800424e <UnityDoublesWithin+0x118>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 14)
 80041c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041c4:	462b      	mov	r3, r5
 80041c6:	4622      	mov	r2, r4
 80041c8:	f001 fc02 	bl	80059d0 <__aeabi_dsub>
 80041cc:	2200      	movs	r2, #0
 80041ce:	2300      	movs	r3, #0
 80041d0:	4606      	mov	r6, r0
 80041d2:	460d      	mov	r5, r1
 80041d4:	f002 f826 	bl	8006224 <__aeabi_dcmplt>
 80041d8:	b108      	cbz	r0, 80041de <UnityDoublesWithin+0xa8>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 15)
 80041da:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 17)
 80041de:	2200      	movs	r2, #0
 80041e0:	2300      	movs	r3, #0
 80041e2:	4640      	mov	r0, r8
 80041e4:	4639      	mov	r1, r7
 80041e6:	f002 f81d 	bl	8006224 <__aeabi_dcmplt>
 80041ea:	b108      	cbz	r0, 80041f0 <UnityDoublesWithin+0xba>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 18)
 80041ec:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 20)
 80041f0:	4632      	mov	r2, r6
 80041f2:	462b      	mov	r3, r5
 80041f4:	4630      	mov	r0, r6
 80041f6:	4629      	mov	r1, r5
 80041f8:	f002 f80a 	bl	8006210 <__aeabi_dcmpeq>
 80041fc:	b1b8      	cbz	r0, 800422e <UnityDoublesWithin+0xf8>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 21)
 80041fe:	4632      	mov	r2, r6
 8004200:	462b      	mov	r3, r5
 8004202:	4630      	mov	r0, r6
 8004204:	4629      	mov	r1, r5
 8004206:	f001 fbe3 	bl	80059d0 <__aeabi_dsub>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	f001 ffff 	bl	8006210 <__aeabi_dcmpeq>
 8004212:	b160      	cbz	r0, 800422e <UnityDoublesWithin+0xf8>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 23)
 8004214:	4632      	mov	r2, r6
 8004216:	462b      	mov	r3, r5
 8004218:	4640      	mov	r0, r8
 800421a:	4639      	mov	r1, r7
 800421c:	f04f 0401 	mov.w	r4, #1
 8004220:	f002 f800 	bl	8006224 <__aeabi_dcmplt>
 8004224:	b900      	cbnz	r0, 8004228 <UnityDoublesWithin+0xf2>
 8004226:	4604      	mov	r4, r0
 8004228:	f084 0001 	eor.w	r0, r4, #1
 800422c:	b2c0      	uxtb	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:930
}
 800422e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 10)
    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);
 8004232:	4620      	mov	r0, r4
 8004234:	4629      	mov	r1, r5
 8004236:	f001 ffeb 	bl	8006210 <__aeabi_dcmpeq>
 800423a:	2800      	cmp	r0, #0
 800423c:	d1c0      	bne.n	80041c0 <UnityDoublesWithin+0x8a>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929 (discriminator 11)
 800423e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	f001 ffe3 	bl	8006210 <__aeabi_dcmpeq>
 800424a:	2800      	cmp	r0, #0
 800424c:	d1b8      	bne.n	80041c0 <UnityDoublesWithin+0x8a>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:929
 800424e:	2001      	movs	r0, #1
 8004250:	e7ed      	b.n	800422e <UnityDoublesWithin+0xf8>

08004252 <setUp>:
setUp():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.h:39
 * some platforms (MinGW for example), weak function implementations need
 * to be in the same translation unit they are called from.  This can be
 * achieved by defining UNITY_INCLUDE_SETUP_STUBS before including unity.h. */
#ifdef UNITY_INCLUDE_SETUP_STUBS
  #ifdef UNITY_WEAK_ATTRIBUTE
    UNITY_WEAK_ATTRIBUTE void setUp(void) { }
 8004252:	4770      	bx	lr

08004254 <tearDown>:
tearDown():
 8004254:	4770      	bx	lr

08004256 <UnityPrintNumberUnsigned>:
UnityPrintNumberUnsigned():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:194
{
 8004256:	b570      	push	{r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:200
        divisor *= 10;
 8004258:	220a      	movs	r2, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:194
{
 800425a:	4606      	mov	r6, r0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:195
    UNITY_UINT divisor = 1;
 800425c:	2401      	movs	r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:198
    while (number / divisor > 9)
 800425e:	fbb6 f3f4 	udiv	r3, r6, r4
 8004262:	2b09      	cmp	r3, #9
 8004264:	d80f      	bhi.n	8004286 <UnityPrintNumberUnsigned+0x30>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:206
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 8004266:	250a      	movs	r5, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:206 (discriminator 1)
 8004268:	fbb6 f3f4 	udiv	r3, r6, r4
 800426c:	fbb3 f0f5 	udiv	r0, r3, r5
 8004270:	fb05 3010 	mls	r0, r5, r0, r3
 8004274:	3030      	adds	r0, #48	; 0x30
 8004276:	b2c0      	uxtb	r0, r0
 8004278:	f7ff fe16 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:207 (discriminator 1)
        divisor /= 10;
 800427c:	fbb4 f4f5 	udiv	r4, r4, r5
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:208 (discriminator 1)
    } while (divisor > 0);
 8004280:	2c00      	cmp	r4, #0
 8004282:	d1f1      	bne.n	8004268 <UnityPrintNumberUnsigned+0x12>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:209
}
 8004284:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:200
        divisor *= 10;
 8004286:	4354      	muls	r4, r2
 8004288:	e7e9      	b.n	800425e <UnityPrintNumberUnsigned+0x8>

0800428a <UnityPrintNumber>:
UnityPrintNumber():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:179
{
 800428a:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:182
    if (number_to_print < 0)
 800428c:	1e04      	subs	r4, r0, #0
 800428e:	da03      	bge.n	8004298 <UnityPrintNumber+0xe>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:185
        UNITY_OUTPUT_CHAR('-');
 8004290:	202d      	movs	r0, #45	; 0x2d
 8004292:	f7ff fe09 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:186
        number = -number;
 8004296:	4264      	negs	r4, r4
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:188
    UnityPrintNumberUnsigned(number);
 8004298:	4620      	mov	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:189
}
 800429a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:188
    UnityPrintNumberUnsigned(number);
 800429e:	f7ff bfda 	b.w	8004256 <UnityPrintNumberUnsigned>

080042a2 <UnityPrintNumberHex>:
UnityPrintNumberHex():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:213
{
 80042a2:	2908      	cmp	r1, #8
 80042a4:	bf28      	it	cs
 80042a6:	2108      	movcs	r1, #8
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4605      	mov	r5, r0
 80042ac:	460c      	mov	r4, r1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:221
    while (nibbles > 0)
 80042ae:	b904      	cbnz	r4, 80042b2 <UnityPrintNumberHex+0x10>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:234
}
 80042b0:	bd38      	pop	{r3, r4, r5, pc}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:223
        nibbles--;
 80042b2:	3c01      	subs	r4, #1
 80042b4:	b2e4      	uxtb	r4, r4
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:224
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 80042b6:	00a3      	lsls	r3, r4, #2
 80042b8:	fa25 f303 	lsr.w	r3, r5, r3
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	b2d8      	uxtb	r0, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:225
        if (nibble <= 9)
 80042c2:	2b09      	cmp	r3, #9
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:227
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 80042c4:	bfd4      	ite	le
 80042c6:	3030      	addle	r0, #48	; 0x30
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:231
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 80042c8:	3037      	addgt	r0, #55	; 0x37
 80042ca:	f7ff fded 	bl	8003ea8 <unity_output_char>
 80042ce:	e7ee      	b.n	80042ae <UnityPrintNumberHex+0xc>

080042d0 <UnityPrint.part.0>:
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:71
void UnityPrint(const char* string)
 80042d0:	b510      	push	{r4, lr}
 80042d2:	1e44      	subs	r4, r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:77
        while (*pch)
 80042d4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80042d8:	b900      	cbnz	r0, 80042dc <UnityPrint.part.0+0xc>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:118
}
 80042da:	bd10      	pop	{r4, pc}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:80
            if ((*pch <= 126) && (*pch >= 32))
 80042dc:	f1a0 0320 	sub.w	r3, r0, #32
 80042e0:	2b5e      	cmp	r3, #94	; 0x5e
 80042e2:	d802      	bhi.n	80042ea <UnityPrint.part.0+0x1a>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:94
                UNITY_OUTPUT_CHAR('n');
 80042e4:	f7ff fde0 	bl	8003ea8 <unity_output_char>
 80042e8:	e7f4      	b.n	80042d4 <UnityPrint.part.0+0x4>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:85
            else if (*pch == 13)
 80042ea:	280d      	cmp	r0, #13
 80042ec:	d104      	bne.n	80042f8 <UnityPrint.part.0+0x28>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:87
                UNITY_OUTPUT_CHAR('\\');
 80042ee:	205c      	movs	r0, #92	; 0x5c
 80042f0:	f7ff fdda 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:88
                UNITY_OUTPUT_CHAR('r');
 80042f4:	2072      	movs	r0, #114	; 0x72
 80042f6:	e7f5      	b.n	80042e4 <UnityPrint.part.0+0x14>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:91
            else if (*pch == 10)
 80042f8:	280a      	cmp	r0, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:93
                UNITY_OUTPUT_CHAR('\\');
 80042fa:	f04f 005c 	mov.w	r0, #92	; 0x5c
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:91
            else if (*pch == 10)
 80042fe:	d103      	bne.n	8004308 <UnityPrint.part.0+0x38>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:93
                UNITY_OUTPUT_CHAR('\\');
 8004300:	f7ff fdd2 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:94
                UNITY_OUTPUT_CHAR('n');
 8004304:	206e      	movs	r0, #110	; 0x6e
 8004306:	e7ed      	b.n	80042e4 <UnityPrint.part.0+0x14>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:111
                UNITY_OUTPUT_CHAR('\\');
 8004308:	f7ff fdce 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:112
                UNITY_OUTPUT_CHAR('x');
 800430c:	2078      	movs	r0, #120	; 0x78
 800430e:	f7ff fdcb 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:113
                UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 8004312:	2102      	movs	r1, #2
 8004314:	7820      	ldrb	r0, [r4, #0]
 8004316:	f7ff ffc4 	bl	80042a2 <UnityPrintNumberHex>
 800431a:	e7db      	b.n	80042d4 <UnityPrint.part.0+0x4>

0800431c <UnityPrint>:
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:75
    if (pch != NULL)
 800431c:	b108      	cbz	r0, 8004322 <UnityPrint+0x6>
 800431e:	f7ff bfd7 	b.w	80042d0 <UnityPrint.part.0>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:118
}
 8004322:	4770      	bx	lr

08004324 <UnityTestResultsBegin>:
UnityTestResultsBegin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:427
{
 8004324:	b510      	push	{r4, lr}
 8004326:	460c      	mov	r4, r1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:428
    UnityPrint(file);
 8004328:	f7ff fff8 	bl	800431c <UnityPrint>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:429
    UNITY_OUTPUT_CHAR(':');
 800432c:	203a      	movs	r0, #58	; 0x3a
 800432e:	f7ff fdbb 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:430
    UnityPrintNumber((UNITY_INT)line);
 8004332:	4620      	mov	r0, r4
 8004334:	f7ff ffa9 	bl	800428a <UnityPrintNumber>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:431
    UNITY_OUTPUT_CHAR(':');
 8004338:	203a      	movs	r0, #58	; 0x3a
 800433a:	f7ff fdb5 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:432
    UnityPrint(Unity.CurrentTestName);
 800433e:	4b04      	ldr	r3, [pc, #16]	; (8004350 <UnityTestResultsBegin+0x2c>)
 8004340:	6858      	ldr	r0, [r3, #4]
 8004342:	f7ff ffeb 	bl	800431c <UnityPrint>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:434
}
 8004346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:433
    UNITY_OUTPUT_CHAR(':');
 800434a:	203a      	movs	r0, #58	; 0x3a
 800434c:	f7ff bdac 	b.w	8003ea8 <unity_output_char>
 8004350:	20000278 	.word	0x20000278

08004354 <UnityTestResultsFailBegin>:
UnityTestResultsFailBegin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:438
{
 8004354:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:439
    UnityTestResultsBegin(Unity.TestFile, line);
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <UnityTestResultsFailBegin+0x1c>)
 8004358:	4601      	mov	r1, r0
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	f7ff ffe2 	bl	8004324 <UnityTestResultsBegin>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:439
 8004360:	4804      	ldr	r0, [pc, #16]	; (8004374 <UnityTestResultsFailBegin+0x20>)
 8004362:	f7ff ffb5 	bl	80042d0 <UnityPrint.part.0>
UnityTestResultsFailBegin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:442
}
 8004366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:441
    UNITY_OUTPUT_CHAR(':');
 800436a:	203a      	movs	r0, #58	; 0x3a
 800436c:	f7ff bd9c 	b.w	8003ea8 <unity_output_char>
 8004370:	20000278 	.word	0x20000278
 8004374:	08007191 	.word	0x08007191

08004378 <UnityAddMsgIfSpecified>:
UnityAddMsgIfSpecified():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:470
{
 8004378:	b538      	push	{r3, r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:471
    if (msg)
 800437a:	4605      	mov	r5, r0
 800437c:	b1d8      	cbz	r0, 80043b6 <UnityAddMsgIfSpecified+0x3e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:475
        if (Unity.CurrentDetail1)
 800437e:	4c0e      	ldr	r4, [pc, #56]	; (80043b8 <UnityAddMsgIfSpecified+0x40>)
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:475
 8004380:	480e      	ldr	r0, [pc, #56]	; (80043bc <UnityAddMsgIfSpecified+0x44>)
 8004382:	f7ff ffa5 	bl	80042d0 <UnityPrint.part.0>
UnityAddMsgIfSpecified():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:475
 8004386:	68a3      	ldr	r3, [r4, #8]
 8004388:	b183      	cbz	r3, 80043ac <UnityAddMsgIfSpecified+0x34>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:475
 800438a:	480d      	ldr	r0, [pc, #52]	; (80043c0 <UnityAddMsgIfSpecified+0x48>)
 800438c:	f7ff ffa0 	bl	80042d0 <UnityPrint.part.0>
UnityAddMsgIfSpecified():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:478
            UnityPrint(Unity.CurrentDetail1);
 8004390:	68a0      	ldr	r0, [r4, #8]
 8004392:	f7ff ffc3 	bl	800431c <UnityPrint>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:479
            if (Unity.CurrentDetail2)
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	b12b      	cbz	r3, 80043a6 <UnityAddMsgIfSpecified+0x2e>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:479
 800439a:	480a      	ldr	r0, [pc, #40]	; (80043c4 <UnityAddMsgIfSpecified+0x4c>)
 800439c:	f7ff ff98 	bl	80042d0 <UnityPrint.part.0>
UnityAddMsgIfSpecified():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:482
                UnityPrint(Unity.CurrentDetail2);
 80043a0:	68e0      	ldr	r0, [r4, #12]
 80043a2:	f7ff ffbb 	bl	800431c <UnityPrint>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:482
 80043a6:	4805      	ldr	r0, [pc, #20]	; (80043bc <UnityAddMsgIfSpecified+0x44>)
 80043a8:	f7ff ff92 	bl	80042d0 <UnityPrint.part.0>
UnityAddMsgIfSpecified():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:487
        UnityPrint(msg);
 80043ac:	4628      	mov	r0, r5
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:489
}
 80043ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:487
        UnityPrint(msg);
 80043b2:	f7ff bfb3 	b.w	800431c <UnityPrint>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:489
}
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	20000278 	.word	0x20000278
 80043bc:	080071bb 	.word	0x080071bb
 80043c0:	08007171 	.word	0x08007171
 80043c4:	0800717b 	.word	0x0800717b

080043c8 <UnityPrintNumberByStyle>:
UnityPrintNumberByStyle():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:161
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 80043c8:	06ca      	lsls	r2, r1, #27
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:160
{
 80043ca:	b538      	push	{r3, r4, r5, lr}
 80043cc:	4605      	mov	r5, r0
 80043ce:	460c      	mov	r4, r1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:161
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 80043d0:	d503      	bpl.n	80043da <UnityPrintNumberByStyle+0x12>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:175
}
 80043d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:163
        UnityPrintNumber(number);
 80043d6:	f7ff bf58 	b.w	800428a <UnityPrintNumber>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:165
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 80043da:	068b      	lsls	r3, r1, #26
 80043dc:	d503      	bpl.n	80043e6 <UnityPrintNumberByStyle+0x1e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:175
}
 80043de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:167
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 80043e2:	f7ff bf38 	b.w	8004256 <UnityPrintNumberUnsigned>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:171
        UNITY_OUTPUT_CHAR('0');
 80043e6:	2030      	movs	r0, #48	; 0x30
 80043e8:	f7ff fd5e 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:172
        UNITY_OUTPUT_CHAR('x');
 80043ec:	2078      	movs	r0, #120	; 0x78
 80043ee:	f7ff fd5b 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:173
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 80043f2:	f004 010f 	and.w	r1, r4, #15
 80043f6:	4628      	mov	r0, r5
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:175
}
 80043f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:173
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 80043fc:	0049      	lsls	r1, r1, #1
 80043fe:	f7ff bf50 	b.w	80042a2 <UnityPrintNumberHex>
 8004402:	0000      	movs	r0, r0
 8004404:	0000      	movs	r0, r0
	...

08004408 <UnityPrintFloat>:
UnityPrintFloat():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:273
{
 8004408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:287
    if (number < 0.0f || (number == 0.0f && 1.0f / number < 0.0f))
 800440c:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:273
{
 800440e:	b085      	sub	sp, #20
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:287
    if (number < 0.0f || (number == 0.0f && 1.0f / number < 0.0f))
 8004410:	2300      	movs	r3, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:273
{
 8004412:	4606      	mov	r6, r0
 8004414:	460c      	mov	r4, r1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:287
    if (number < 0.0f || (number == 0.0f && 1.0f / number < 0.0f))
 8004416:	f001 ff05 	bl	8006224 <__aeabi_dcmplt>
 800441a:	b9b8      	cbnz	r0, 800444c <UnityPrintFloat+0x44>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:287 (discriminator 1)
 800441c:	2200      	movs	r2, #0
 800441e:	2300      	movs	r3, #0
 8004420:	4630      	mov	r0, r6
 8004422:	4621      	mov	r1, r4
 8004424:	f001 fef4 	bl	8006210 <__aeabi_dcmpeq>
 8004428:	b338      	cbz	r0, 800447a <UnityPrintFloat+0x72>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:287 (discriminator 2)
 800442a:	4632      	mov	r2, r6
 800442c:	4623      	mov	r3, r4
 800442e:	2000      	movs	r0, #0
 8004430:	49c1      	ldr	r1, [pc, #772]	; (8004738 <UnityPrintFloat+0x330>)
 8004432:	f001 fdaf 	bl	8005f94 <__aeabi_ddiv>
 8004436:	2200      	movs	r2, #0
 8004438:	2300      	movs	r3, #0
 800443a:	f001 fef3 	bl	8006224 <__aeabi_dcmplt>
 800443e:	b928      	cbnz	r0, 800444c <UnityPrintFloat+0x44>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:287 (discriminator 2)
 8004440:	48be      	ldr	r0, [pc, #760]	; (800473c <UnityPrintFloat+0x334>)
UnityPrintFloat():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:422
}
 8004442:	b005      	add	sp, #20
 8004444:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:422
 8004448:	f7ff bf42 	b.w	80042d0 <UnityPrint.part.0>
UnityPrintFloat():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:289
        UNITY_OUTPUT_CHAR('-');
 800444c:	202d      	movs	r0, #45	; 0x2d
 800444e:	f7ff fd2b 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:294
    if (number == 0.0f)
 8004452:	2200      	movs	r2, #0
 8004454:	2300      	movs	r3, #0
 8004456:	4630      	mov	r0, r6
 8004458:	4621      	mov	r1, r4
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:290
        number = -number;
 800445a:	46b2      	mov	sl, r6
 800445c:	f104 4500 	add.w	r5, r4, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:294
    if (number == 0.0f)
 8004460:	f001 fed6 	bl	8006210 <__aeabi_dcmpeq>
 8004464:	2800      	cmp	r0, #0
 8004466:	d1eb      	bne.n	8004440 <UnityPrintFloat+0x38>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:298
    else if (isnan(number))
 8004468:	4632      	mov	r2, r6
 800446a:	462b      	mov	r3, r5
 800446c:	4630      	mov	r0, r6
 800446e:	4629      	mov	r1, r5
 8004470:	f001 fece 	bl	8006210 <__aeabi_dcmpeq>
 8004474:	b920      	cbnz	r0, 8004480 <UnityPrintFloat+0x78>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:298
 8004476:	48b2      	ldr	r0, [pc, #712]	; (8004740 <UnityPrintFloat+0x338>)
 8004478:	e7e3      	b.n	8004442 <UnityPrintFloat+0x3a>
UnityPrintFloat():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:284
    UNITY_DOUBLE number = input_number;
 800447a:	46b2      	mov	sl, r6
 800447c:	4625      	mov	r5, r4
 800447e:	e7f3      	b.n	8004468 <UnityPrintFloat+0x60>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:302
    else if (isinf(number))
 8004480:	4632      	mov	r2, r6
 8004482:	462b      	mov	r3, r5
 8004484:	4630      	mov	r0, r6
 8004486:	4629      	mov	r1, r5
 8004488:	f001 faa2 	bl	80059d0 <__aeabi_dsub>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	f001 febe 	bl	8006210 <__aeabi_dcmpeq>
 8004494:	b908      	cbnz	r0, 800449a <UnityPrintFloat+0x92>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:302
 8004496:	48ab      	ldr	r0, [pc, #684]	; (8004744 <UnityPrintFloat+0x33c>)
 8004498:	e7d3      	b.n	8004442 <UnityPrintFloat+0x3a>
UnityPrintFloat():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:311
        char buf[16] = {0};
 800449a:	2210      	movs	r2, #16
 800449c:	2100      	movs	r1, #0
 800449e:	4668      	mov	r0, sp
 80044a0:	f001 f9bc 	bl	800581c <memset>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:320
        if (number < 1.0f)
 80044a4:	2200      	movs	r2, #0
 80044a6:	4ba4      	ldr	r3, [pc, #656]	; (8004738 <UnityPrintFloat+0x330>)
 80044a8:	4630      	mov	r0, r6
 80044aa:	4629      	mov	r1, r5
 80044ac:	f001 feba 	bl	8006224 <__aeabi_dcmplt>
 80044b0:	4607      	mov	r7, r0
 80044b2:	2800      	cmp	r0, #0
 80044b4:	f000 8097 	beq.w	80045e6 <UnityPrintFloat+0x1de>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:324
            while (number < (UNITY_DOUBLE)max_scaled / 1e10f) { number *= 1e10f; exponent -= 10; }
 80044b8:	a795      	add	r7, pc, #596	; (adr r7, 8004710 <UnityPrintFloat+0x308>)
 80044ba:	e9d7 6700 	ldrd	r6, r7, [r7]
 80044be:	f20f 2958 	addw	r9, pc, #600	; 0x258
 80044c2:	e9d9 8900 	ldrd	r8, r9, [r9]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:309
        int exponent = 0;
 80044c6:	2400      	movs	r4, #0
 80044c8:	e008      	b.n	80044dc <UnityPrintFloat+0xd4>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:324 (discriminator 2)
            while (number < (UNITY_DOUBLE)max_scaled / 1e10f) { number *= 1e10f; exponent -= 10; }
 80044ca:	4650      	mov	r0, sl
 80044cc:	4629      	mov	r1, r5
 80044ce:	4642      	mov	r2, r8
 80044d0:	464b      	mov	r3, r9
 80044d2:	f001 fc35 	bl	8005d40 <__aeabi_dmul>
 80044d6:	4682      	mov	sl, r0
 80044d8:	460d      	mov	r5, r1
 80044da:	3c0a      	subs	r4, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:324 (discriminator 1)
 80044dc:	4632      	mov	r2, r6
 80044de:	463b      	mov	r3, r7
 80044e0:	4650      	mov	r0, sl
 80044e2:	4629      	mov	r1, r5
 80044e4:	f001 fe9e 	bl	8006224 <__aeabi_dcmplt>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d1ee      	bne.n	80044ca <UnityPrintFloat+0xc2>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:322
            UNITY_DOUBLE factor = 1.0f;
 80044ec:	f04f 0800 	mov.w	r8, #0
 80044f0:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8004738 <UnityPrintFloat+0x330>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:325 (discriminator 1)
            while (number * factor < (UNITY_DOUBLE)min_scaled) { factor *= 10.0f; exponent--; }
 80044f4:	4642      	mov	r2, r8
 80044f6:	464b      	mov	r3, r9
 80044f8:	4650      	mov	r0, sl
 80044fa:	4629      	mov	r1, r5
 80044fc:	f001 fc20 	bl	8005d40 <__aeabi_dmul>
 8004500:	a387      	add	r3, pc, #540	; (adr r3, 8004720 <UnityPrintFloat+0x318>)
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	4606      	mov	r6, r0
 8004508:	460f      	mov	r7, r1
 800450a:	f001 fe8b 	bl	8006224 <__aeabi_dcmplt>
 800450e:	2800      	cmp	r0, #0
 8004510:	d15f      	bne.n	80045d2 <UnityPrintFloat+0x1ca>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:308
        UNITY_INT32 n_int = 0, n;
 8004512:	4682      	mov	sl, r0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:355
        n = ((UNITY_INT32)(number + number) + 1) / 2;
 8004514:	463b      	mov	r3, r7
 8004516:	4632      	mov	r2, r6
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f001 fa5a 	bl	80059d4 <__adddf3>
 8004520:	f001 febe 	bl	80062a0 <__aeabi_d2iz>
 8004524:	2502      	movs	r5, #2
 8004526:	3001      	adds	r0, #1
 8004528:	fb90 f5f5 	sdiv	r5, r0, r5
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:359
        if ((n & 1) && ((UNITY_DOUBLE)n - number == 0.5f))
 800452c:	07eb      	lsls	r3, r5, #31
 800452e:	d50c      	bpl.n	800454a <UnityPrintFloat+0x142>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:359 (discriminator 1)
 8004530:	4628      	mov	r0, r5
 8004532:	f001 fb9b 	bl	8005c6c <__aeabi_i2d>
 8004536:	4632      	mov	r2, r6
 8004538:	463b      	mov	r3, r7
 800453a:	f001 fa49 	bl	80059d0 <__aeabi_dsub>
 800453e:	2200      	movs	r2, #0
 8004540:	4b81      	ldr	r3, [pc, #516]	; (8004748 <UnityPrintFloat+0x340>)
 8004542:	f001 fe65 	bl	8006210 <__aeabi_dcmpeq>
 8004546:	b100      	cbz	r0, 800454a <UnityPrintFloat+0x142>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:360
            n--;
 8004548:	3d01      	subs	r5, #1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:365
        if (n >= max_scaled)
 800454a:	4b80      	ldr	r3, [pc, #512]	; (800474c <UnityPrintFloat+0x344>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:363
        n += n_int;
 800454c:	eb0a 0005 	add.w	r0, sl, r5
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:365
        if (n >= max_scaled)
 8004550:	4298      	cmp	r0, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:368
            exponent++;
 8004552:	bfc8      	it	gt
 8004554:	3401      	addgt	r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:372
        decimals = (exponent <= 0 && exponent >= -(sig_digits + 3)) ? -exponent : (sig_digits - 1);
 8004556:	f104 030c 	add.w	r3, r4, #12
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:367
            n = min_scaled;
 800455a:	bfc8      	it	gt
 800455c:	487c      	ldrgt	r0, [pc, #496]	; (8004750 <UnityPrintFloat+0x348>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:372
        decimals = (exponent <= 0 && exponent >= -(sig_digits + 3)) ? -exponent : (sig_digits - 1);
 800455e:	2b0c      	cmp	r3, #12
 8004560:	bf88      	it	hi
 8004562:	2508      	movhi	r5, #8
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:376
        while (decimals > 0 && n % 10 == 0)
 8004564:	f04f 020a 	mov.w	r2, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:372
        decimals = (exponent <= 0 && exponent >= -(sig_digits + 3)) ? -exponent : (sig_digits - 1);
 8004568:	bf98      	it	ls
 800456a:	4265      	negls	r5, r4
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:373
        exponent += decimals;
 800456c:	442c      	add	r4, r5
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:376
        while (decimals > 0 && n % 10 == 0)
 800456e:	2d00      	cmp	r5, #0
 8004570:	f040 80a4 	bne.w	80046bc <UnityPrintFloat+0x2b4>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:372
        decimals = (exponent <= 0 && exponent >= -(sig_digits + 3)) ? -exponent : (sig_digits - 1);
 8004574:	2300      	movs	r3, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:386
            buf[digits++] = (char)('0' + n % 10);
 8004576:	220a      	movs	r2, #10
 8004578:	461e      	mov	r6, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:384
        while (n != 0 || digits < decimals + 1)
 800457a:	2800      	cmp	r0, #0
 800457c:	f040 80a8 	bne.w	80046d0 <UnityPrintFloat+0x2c8>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:384 (discriminator 1)
 8004580:	42ab      	cmp	r3, r5
 8004582:	f340 80a5 	ble.w	80046d0 <UnityPrintFloat+0x2c8>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:392
            UNITY_OUTPUT_CHAR(buf[--digits]);
 8004586:	3e01      	subs	r6, #1
 8004588:	f81d 0006 	ldrb.w	r0, [sp, r6]
 800458c:	f7ff fc8c 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:389
        while (digits > 0)
 8004590:	2e00      	cmp	r6, #0
 8004592:	f040 80a8 	bne.w	80046e6 <UnityPrintFloat+0x2de>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:396
        if (exponent != 0)
 8004596:	b1cc      	cbz	r4, 80045cc <UnityPrintFloat+0x1c4>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:398
            UNITY_OUTPUT_CHAR('e');
 8004598:	2065      	movs	r0, #101	; 0x65
 800459a:	f7ff fc85 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:400
            if(exponent < 0)
 800459e:	2c00      	cmp	r4, #0
 80045a0:	f280 80a8 	bge.w	80046f4 <UnityPrintFloat+0x2ec>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:402
                UNITY_OUTPUT_CHAR('-');
 80045a4:	202d      	movs	r0, #45	; 0x2d
 80045a6:	f7ff fc7f 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:403
                exponent = -exponent;
 80045aa:	4264      	negs	r4, r4
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:372
        decimals = (exponent <= 0 && exponent >= -(sig_digits + 3)) ? -exponent : (sig_digits - 1);
 80045ac:	2300      	movs	r3, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:413
                buf[digits++] = (char)('0' + exponent % 10);
 80045ae:	220a      	movs	r2, #10
 80045b0:	461d      	mov	r5, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:411
            while (exponent != 0 || digits < 2)
 80045b2:	2c00      	cmp	r4, #0
 80045b4:	f040 80a2 	bne.w	80046fc <UnityPrintFloat+0x2f4>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:411 (discriminator 1)
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	f240 809f 	bls.w	80046fc <UnityPrintFloat+0x2f4>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:418
                UNITY_OUTPUT_CHAR(buf[--digits]);
 80045be:	3d01      	subs	r5, #1
 80045c0:	f81d 0005 	ldrb.w	r0, [sp, r5]
 80045c4:	f7ff fc70 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:416
            while (digits > 0)
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	d1f8      	bne.n	80045be <UnityPrintFloat+0x1b6>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:422
}
 80045cc:	b005      	add	sp, #20
 80045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:325 (discriminator 2)
            while (number * factor < (UNITY_DOUBLE)min_scaled) { factor *= 10.0f; exponent--; }
 80045d2:	4640      	mov	r0, r8
 80045d4:	4649      	mov	r1, r9
 80045d6:	2200      	movs	r2, #0
 80045d8:	4b5e      	ldr	r3, [pc, #376]	; (8004754 <UnityPrintFloat+0x34c>)
 80045da:	f001 fbb1 	bl	8005d40 <__aeabi_dmul>
 80045de:	3c01      	subs	r4, #1
 80045e0:	4680      	mov	r8, r0
 80045e2:	4689      	mov	r9, r1
 80045e4:	e786      	b.n	80044f4 <UnityPrintFloat+0xec>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:329
        else if (number > (UNITY_DOUBLE)max_scaled)
 80045e6:	a350      	add	r3, pc, #320	; (adr r3, 8004728 <UnityPrintFloat+0x320>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	4630      	mov	r0, r6
 80045ee:	4629      	mov	r1, r5
 80045f0:	f001 fe36 	bl	8006260 <__aeabi_dcmpgt>
 80045f4:	4604      	mov	r4, r0
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d14f      	bne.n	800469a <UnityPrintFloat+0x292>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:346
            n_int = (UNITY_INT32)number;
 80045fa:	4629      	mov	r1, r5
 80045fc:	4630      	mov	r0, r6
 80045fe:	f001 fe4f 	bl	80062a0 <__aeabi_d2iz>
 8004602:	4682      	mov	sl, r0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:347
            number -= (UNITY_DOUBLE)n_int;
 8004604:	f001 fb32 	bl	8005c6c <__aeabi_i2d>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4630      	mov	r0, r6
 800460e:	4629      	mov	r1, r5
 8004610:	f001 f9de 	bl	80059d0 <__aeabi_dsub>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:349
            while (n_int < min_scaled) { n_int *= 10; factor *= 10.0f; exponent--; }
 8004614:	f04f 0b0a 	mov.w	fp, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:347
            number -= (UNITY_DOUBLE)n_int;
 8004618:	4606      	mov	r6, r0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:349
            while (n_int < min_scaled) { n_int *= 10; factor *= 10.0f; exponent--; }
 800461a:	f04f 0800 	mov.w	r8, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:345
            UNITY_DOUBLE factor = 1.0f;
 800461e:	2000      	movs	r0, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:347
            number -= (UNITY_DOUBLE)n_int;
 8004620:	460f      	mov	r7, r1
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:349
            while (n_int < min_scaled) { n_int *= 10; factor *= 10.0f; exponent--; }
 8004622:	4d4d      	ldr	r5, [pc, #308]	; (8004758 <UnityPrintFloat+0x350>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:345
            UNITY_DOUBLE factor = 1.0f;
 8004624:	4944      	ldr	r1, [pc, #272]	; (8004738 <UnityPrintFloat+0x330>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:349
            while (n_int < min_scaled) { n_int *= 10; factor *= 10.0f; exponent--; }
 8004626:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004754 <UnityPrintFloat+0x34c>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:349 (discriminator 1)
 800462a:	45aa      	cmp	sl, r5
 800462c:	dd3e      	ble.n	80046ac <UnityPrintFloat+0x2a4>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:351
            number *= factor;
 800462e:	4632      	mov	r2, r6
 8004630:	463b      	mov	r3, r7
 8004632:	f001 fb85 	bl	8005d40 <__aeabi_dmul>
 8004636:	4606      	mov	r6, r0
 8004638:	460f      	mov	r7, r1
 800463a:	e76b      	b.n	8004514 <UnityPrintFloat+0x10c>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:333 (discriminator 2)
            while (number > (UNITY_DOUBLE)min_scaled * 1e10f) { number /= 1e10f; exponent += 10; }
 800463c:	4650      	mov	r0, sl
 800463e:	4629      	mov	r1, r5
 8004640:	4632      	mov	r2, r6
 8004642:	463b      	mov	r3, r7
 8004644:	f001 fca6 	bl	8005f94 <__aeabi_ddiv>
 8004648:	4682      	mov	sl, r0
 800464a:	460d      	mov	r5, r1
 800464c:	340a      	adds	r4, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:333 (discriminator 1)
 800464e:	4642      	mov	r2, r8
 8004650:	464b      	mov	r3, r9
 8004652:	4650      	mov	r0, sl
 8004654:	4629      	mov	r1, r5
 8004656:	f001 fe03 	bl	8006260 <__aeabi_dcmpgt>
 800465a:	2800      	cmp	r0, #0
 800465c:	d1ee      	bne.n	800463c <UnityPrintFloat+0x234>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:331
            UNITY_DOUBLE divisor = 1.0f;
 800465e:	f04f 0800 	mov.w	r8, #0
 8004662:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8004738 <UnityPrintFloat+0x330>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:334 (discriminator 1)
            while (number / divisor > (UNITY_DOUBLE)max_scaled) { divisor *= 10.0f; exponent++; }
 8004666:	4642      	mov	r2, r8
 8004668:	464b      	mov	r3, r9
 800466a:	4650      	mov	r0, sl
 800466c:	4629      	mov	r1, r5
 800466e:	f001 fc91 	bl	8005f94 <__aeabi_ddiv>
 8004672:	a32d      	add	r3, pc, #180	; (adr r3, 8004728 <UnityPrintFloat+0x320>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	4606      	mov	r6, r0
 800467a:	460f      	mov	r7, r1
 800467c:	f001 fdf0 	bl	8006260 <__aeabi_dcmpgt>
 8004680:	2800      	cmp	r0, #0
 8004682:	f43f af46 	beq.w	8004512 <UnityPrintFloat+0x10a>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:334 (discriminator 2)
 8004686:	4640      	mov	r0, r8
 8004688:	4649      	mov	r1, r9
 800468a:	2200      	movs	r2, #0
 800468c:	4b31      	ldr	r3, [pc, #196]	; (8004754 <UnityPrintFloat+0x34c>)
 800468e:	f001 fb57 	bl	8005d40 <__aeabi_dmul>
 8004692:	3401      	adds	r4, #1
 8004694:	4680      	mov	r8, r0
 8004696:	4689      	mov	r9, r1
 8004698:	e7e5      	b.n	8004666 <UnityPrintFloat+0x25e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:309
        int exponent = 0;
 800469a:	463c      	mov	r4, r7
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:333
            while (number > (UNITY_DOUBLE)min_scaled * 1e10f) { number /= 1e10f; exponent += 10; }
 800469c:	f20f 0990 	addw	r9, pc, #144	; 0x90
 80046a0:	e9d9 8900 	ldrd	r8, r9, [r9]
 80046a4:	a71c      	add	r7, pc, #112	; (adr r7, 8004718 <UnityPrintFloat+0x310>)
 80046a6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80046aa:	e7d0      	b.n	800464e <UnityPrintFloat+0x246>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:349 (discriminator 2)
            while (n_int < min_scaled) { n_int *= 10; factor *= 10.0f; exponent--; }
 80046ac:	4642      	mov	r2, r8
 80046ae:	464b      	mov	r3, r9
 80046b0:	fb0b fa0a 	mul.w	sl, fp, sl
 80046b4:	f001 fb44 	bl	8005d40 <__aeabi_dmul>
 80046b8:	3c01      	subs	r4, #1
 80046ba:	e7b6      	b.n	800462a <UnityPrintFloat+0x222>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:376 (discriminator 1)
        while (decimals > 0 && n % 10 == 0)
 80046bc:	fb90 f3f2 	sdiv	r3, r0, r2
 80046c0:	fb02 0113 	mls	r1, r2, r3, r0
 80046c4:	2900      	cmp	r1, #0
 80046c6:	f47f af55 	bne.w	8004574 <UnityPrintFloat+0x16c>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:378
            n /= 10;
 80046ca:	4618      	mov	r0, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:379
            decimals--;
 80046cc:	3d01      	subs	r5, #1
 80046ce:	e74e      	b.n	800456e <UnityPrintFloat+0x166>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:386
            buf[digits++] = (char)('0' + n % 10);
 80046d0:	fb90 f1f2 	sdiv	r1, r0, r2
 80046d4:	fb02 0a11 	mls	sl, r2, r1, r0
 80046d8:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80046dc:	f80d a003 	strb.w	sl, [sp, r3]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:387
            n /= 10;
 80046e0:	4608      	mov	r0, r1
 80046e2:	3301      	adds	r3, #1
 80046e4:	e748      	b.n	8004578 <UnityPrintFloat+0x170>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:391
            if(digits == decimals) UNITY_OUTPUT_CHAR('.');
 80046e6:	42ae      	cmp	r6, r5
 80046e8:	f47f af4d 	bne.w	8004586 <UnityPrintFloat+0x17e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:391 (discriminator 1)
 80046ec:	202e      	movs	r0, #46	; 0x2e
 80046ee:	f7ff fbdb 	bl	8003ea8 <unity_output_char>
 80046f2:	e748      	b.n	8004586 <UnityPrintFloat+0x17e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:407
                UNITY_OUTPUT_CHAR('+');
 80046f4:	202b      	movs	r0, #43	; 0x2b
 80046f6:	f7ff fbd7 	bl	8003ea8 <unity_output_char>
 80046fa:	e757      	b.n	80045ac <UnityPrintFloat+0x1a4>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:413
                buf[digits++] = (char)('0' + exponent % 10);
 80046fc:	fb94 f1f2 	sdiv	r1, r4, r2
 8004700:	fb02 4411 	mls	r4, r2, r1, r4
 8004704:	3430      	adds	r4, #48	; 0x30
 8004706:	f80d 4003 	strb.w	r4, [sp, r3]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:414
                exponent /= 10;
 800470a:	460c      	mov	r4, r1
 800470c:	3301      	adds	r3, #1
 800470e:	e74f      	b.n	80045b0 <UnityPrintFloat+0x1a8>
 8004710:	9999999a 	.word	0x9999999a
 8004714:	3fb99999 	.word	0x3fb99999
 8004718:	20000000 	.word	0x20000000
 800471c:	4202a05f 	.word	0x4202a05f
 8004720:	00000000 	.word	0x00000000
 8004724:	4197d784 	.word	0x4197d784
 8004728:	00000000 	.word	0x00000000
 800472c:	41cdcd65 	.word	0x41cdcd65
 8004730:	674ec800 	.word	0x674ec800
 8004734:	43abc16d 	.word	0x43abc16d
 8004738:	3ff00000 	.word	0x3ff00000
 800473c:	08007033 	.word	0x08007033
 8004740:	08007151 	.word	0x08007151
 8004744:	08007155 	.word	0x08007155
 8004748:	3fe00000 	.word	0x3fe00000
 800474c:	3b9ac9ff 	.word	0x3b9ac9ff
 8004750:	05f5e100 	.word	0x05f5e100
 8004754:	40240000 	.word	0x40240000
 8004758:	05f5e0ff 	.word	0x05f5e0ff

0800475c <UnityConcludeTest>:
UnityConcludeTest():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:446
{
 800475c:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:447
    if (Unity.CurrentTestIgnored)
 800475e:	4c0e      	ldr	r4, [pc, #56]	; (8004798 <UnityConcludeTest+0x3c>)
 8004760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004762:	b153      	cbz	r3, 800477a <UnityConcludeTest+0x1e>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:449
        Unity.TestIgnores++;
 8004764:	69e3      	ldr	r3, [r4, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61e3      	str	r3, [r4, #28]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:461
    Unity.CurrentTestFailed = 0;
 800476a:	2300      	movs	r3, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:464
    UNITY_PRINT_EOL();
 800476c:	200a      	movs	r0, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:462
    Unity.CurrentTestIgnored = 0;
 800476e:	e9c4 3308 	strd	r3, r3, [r4, #32]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:466
}
 8004772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:464
    UNITY_PRINT_EOL();
 8004776:	f7ff bb97 	b.w	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:451
    else if (!Unity.CurrentTestFailed)
 800477a:	6a23      	ldr	r3, [r4, #32]
 800477c:	b93b      	cbnz	r3, 800478e <UnityConcludeTest+0x32>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:453
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	6921      	ldr	r1, [r4, #16]
 8004782:	f7ff fdcf 	bl	8004324 <UnityTestResultsBegin>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:453
 8004786:	4805      	ldr	r0, [pc, #20]	; (800479c <UnityConcludeTest+0x40>)
 8004788:	f7ff fda2 	bl	80042d0 <UnityPrint.part.0>
 800478c:	e7ed      	b.n	800476a <UnityConcludeTest+0xe>
UnityConcludeTest():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:458
        Unity.TestFailures++;
 800478e:	69a3      	ldr	r3, [r4, #24]
 8004790:	3301      	adds	r3, #1
 8004792:	61a3      	str	r3, [r4, #24]
 8004794:	e7e9      	b.n	800476a <UnityConcludeTest+0xe>
 8004796:	bf00      	nop
 8004798:	20000278 	.word	0x20000278
 800479c:	08007199 	.word	0x08007199

080047a0 <UnityAssertEqualNumber>:
UnityAssertEqualNumber():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:611
{
 80047a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:612
    RETURN_IF_FAIL_OR_IGNORE;
 80047a4:	4c11      	ldr	r4, [pc, #68]	; (80047ec <UnityAssertEqualNumber+0x4c>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:611
{
 80047a6:	4690      	mov	r8, r2
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:612
    RETURN_IF_FAIL_OR_IGNORE;
 80047a8:	6a22      	ldr	r2, [r4, #32]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:611
{
 80047aa:	4607      	mov	r7, r0
 80047ac:	460d      	mov	r5, r1
 80047ae:	f89d 6018 	ldrb.w	r6, [sp, #24]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:612
    RETURN_IF_FAIL_OR_IGNORE;
 80047b2:	b9ca      	cbnz	r2, 80047e8 <UnityAssertEqualNumber+0x48>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:612 (discriminator 1)
 80047b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80047b6:	b9ba      	cbnz	r2, 80047e8 <UnityAssertEqualNumber+0x48>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:614
    if (expected != actual)
 80047b8:	4288      	cmp	r0, r1
 80047ba:	d015      	beq.n	80047e8 <UnityAssertEqualNumber+0x48>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:616
        UnityTestResultsFailBegin(lineNumber);
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fdc9 	bl	8004354 <UnityTestResultsFailBegin>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:616
 80047c2:	480b      	ldr	r0, [pc, #44]	; (80047f0 <UnityAssertEqualNumber+0x50>)
 80047c4:	f7ff fd84 	bl	80042d0 <UnityPrint.part.0>
UnityAssertEqualNumber():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:618
        UnityPrintNumberByStyle(expected, style);
 80047c8:	4631      	mov	r1, r6
 80047ca:	4638      	mov	r0, r7
 80047cc:	f7ff fdfc 	bl	80043c8 <UnityPrintNumberByStyle>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:618
 80047d0:	4808      	ldr	r0, [pc, #32]	; (80047f4 <UnityAssertEqualNumber+0x54>)
 80047d2:	f7ff fd7d 	bl	80042d0 <UnityPrint.part.0>
UnityAssertEqualNumber():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:620
        UnityPrintNumberByStyle(actual, style);
 80047d6:	4631      	mov	r1, r6
 80047d8:	4628      	mov	r0, r5
 80047da:	f7ff fdf5 	bl	80043c8 <UnityPrintNumberByStyle>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:621
        UnityAddMsgIfSpecified(msg);
 80047de:	4640      	mov	r0, r8
 80047e0:	f7ff fdca 	bl	8004378 <UnityAddMsgIfSpecified>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:622
        UNITY_FAIL_AND_BAIL;
 80047e4:	2301      	movs	r3, #1
 80047e6:	6223      	str	r3, [r4, #32]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:624
}
 80047e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ec:	20000278 	.word	0x20000278
 80047f0:	08007186 	.word	0x08007186
 80047f4:	080071be 	.word	0x080071be

080047f8 <UnityAssertFloatsWithin>:
UnityAssertFloatsWithin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:845
{
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:846
    RETURN_IF_FAIL_OR_IGNORE;
 80047fa:	4c12      	ldr	r4, [pc, #72]	; (8004844 <UnityAssertFloatsWithin+0x4c>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:845
{
 80047fc:	461d      	mov	r5, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:846
    RETURN_IF_FAIL_OR_IGNORE;
 80047fe:	6a23      	ldr	r3, [r4, #32]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:845
{
 8004800:	460f      	mov	r7, r1
 8004802:	4616      	mov	r6, r2
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:846
    RETURN_IF_FAIL_OR_IGNORE;
 8004804:	b9e3      	cbnz	r3, 8004840 <UnityAssertFloatsWithin+0x48>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:846 (discriminator 1)
 8004806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004808:	b9d3      	cbnz	r3, 8004840 <UnityAssertFloatsWithin+0x48>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:849
    if (!UnityFloatsWithin(delta, expected, actual))
 800480a:	f7ff fc22 	bl	8004052 <UnityFloatsWithin>
 800480e:	b9b8      	cbnz	r0, 8004840 <UnityAssertFloatsWithin+0x48>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:851
        UnityTestResultsFailBegin(lineNumber);
 8004810:	9806      	ldr	r0, [sp, #24]
 8004812:	f7ff fd9f 	bl	8004354 <UnityTestResultsFailBegin>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:851
 8004816:	480c      	ldr	r0, [pc, #48]	; (8004848 <UnityAssertFloatsWithin+0x50>)
 8004818:	f7ff fd5a 	bl	80042d0 <UnityPrint.part.0>
UnityAssertFloatsWithin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:852
        UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT((UNITY_DOUBLE)expected, (UNITY_DOUBLE)actual);
 800481c:	4638      	mov	r0, r7
 800481e:	f001 fa37 	bl	8005c90 <__aeabi_f2d>
 8004822:	f7ff fdf1 	bl	8004408 <UnityPrintFloat>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:852
 8004826:	4809      	ldr	r0, [pc, #36]	; (800484c <UnityAssertFloatsWithin+0x54>)
 8004828:	f7ff fd52 	bl	80042d0 <UnityPrint.part.0>
UnityAssertFloatsWithin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:852
 800482c:	4630      	mov	r0, r6
 800482e:	f001 fa2f 	bl	8005c90 <__aeabi_f2d>
 8004832:	f7ff fde9 	bl	8004408 <UnityPrintFloat>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:853
        UnityAddMsgIfSpecified(msg);
 8004836:	4628      	mov	r0, r5
 8004838:	f7ff fd9e 	bl	8004378 <UnityAddMsgIfSpecified>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:854
        UNITY_FAIL_AND_BAIL;
 800483c:	2301      	movs	r3, #1
 800483e:	6223      	str	r3, [r4, #32]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:856
}
 8004840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004842:	bf00      	nop
 8004844:	20000278 	.word	0x20000278
 8004848:	08007186 	.word	0x08007186
 800484c:	080071be 	.word	0x080071be

08004850 <UnityAssertDoublesWithin>:
UnityAssertDoublesWithin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:986
void UnityAssertDoublesWithin(const UNITY_DOUBLE delta,
                              const UNITY_DOUBLE expected,
                              const UNITY_DOUBLE actual,
                              const char* msg,
                              const UNITY_LINE_TYPE lineNumber)
{
 8004850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004854:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:987
    RETURN_IF_FAIL_OR_IGNORE;
 8004858:	4f12      	ldr	r7, [pc, #72]	; (80048a4 <UnityAssertDoublesWithin+0x54>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:986
{
 800485a:	4614      	mov	r4, r2
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:987
    RETURN_IF_FAIL_OR_IGNORE;
 800485c:	6a3e      	ldr	r6, [r7, #32]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:986
{
 800485e:	461d      	mov	r5, r3
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:987
    RETURN_IF_FAIL_OR_IGNORE;
 8004860:	b9e6      	cbnz	r6, 800489c <UnityAssertDoublesWithin+0x4c>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:987 (discriminator 1)
 8004862:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8004864:	b9d6      	cbnz	r6, 800489c <UnityAssertDoublesWithin+0x4c>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:989

    if (!UnityDoublesWithin(delta, expected, actual))
 8004866:	e9cd 8900 	strd	r8, r9, [sp]
 800486a:	f7ff fc64 	bl	8004136 <UnityDoublesWithin>
 800486e:	b9a8      	cbnz	r0, 800489c <UnityAssertDoublesWithin+0x4c>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:991
    {
        UnityTestResultsFailBegin(lineNumber);
 8004870:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004872:	f7ff fd6f 	bl	8004354 <UnityTestResultsFailBegin>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:991
 8004876:	480c      	ldr	r0, [pc, #48]	; (80048a8 <UnityAssertDoublesWithin+0x58>)
 8004878:	f7ff fd2a 	bl	80042d0 <UnityPrint.part.0>
UnityAssertDoublesWithin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:992
        UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT(expected, actual);
 800487c:	4629      	mov	r1, r5
 800487e:	4620      	mov	r0, r4
 8004880:	f7ff fdc2 	bl	8004408 <UnityPrintFloat>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:992
 8004884:	4809      	ldr	r0, [pc, #36]	; (80048ac <UnityAssertDoublesWithin+0x5c>)
 8004886:	f7ff fd23 	bl	80042d0 <UnityPrint.part.0>
UnityAssertDoublesWithin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:992
 800488a:	4640      	mov	r0, r8
 800488c:	4649      	mov	r1, r9
 800488e:	f7ff fdbb 	bl	8004408 <UnityPrintFloat>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:993
        UnityAddMsgIfSpecified(msg);
 8004892:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004894:	f7ff fd70 	bl	8004378 <UnityAddMsgIfSpecified>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:994
        UNITY_FAIL_AND_BAIL;
 8004898:	2301      	movs	r3, #1
 800489a:	623b      	str	r3, [r7, #32]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:996
    }
}
 800489c:	b003      	add	sp, #12
 800489e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048a2:	bf00      	nop
 80048a4:	20000278 	.word	0x20000278
 80048a8:	08007186 	.word	0x08007186
 80048ac:	080071be 	.word	0x080071be

080048b0 <UnityDefaultTestRun>:
UnityDefaultTestRun():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1449
}

/*-----------------------------------------------*/
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
    Unity.CurrentTestName = FuncName;
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <UnityDefaultTestRun+0x28>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1448
{
 80048b2:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1450
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 80048b4:	611a      	str	r2, [r3, #16]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1451
    Unity.NumberOfTests++;
 80048b6:	695a      	ldr	r2, [r3, #20]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1448
{
 80048b8:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1451
    Unity.NumberOfTests++;
 80048ba:	3201      	adds	r2, #1
 80048bc:	615a      	str	r2, [r3, #20]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1452
    UNITY_CLR_DETAILS();
 80048be:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1449
    Unity.CurrentTestName = FuncName;
 80048c0:	6059      	str	r1, [r3, #4]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1452
    UNITY_CLR_DETAILS();
 80048c2:	e9c3 2202 	strd	r2, r2, [r3, #8]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1455
    if (TEST_PROTECT())
    {
        setUp();
 80048c6:	f7ff fcc4 	bl	8004252 <setUp>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1456
        Func();
 80048ca:	47a0      	blx	r4
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1460
    }
    if (TEST_PROTECT())
    {
        tearDown();
 80048cc:	f7ff fcc2 	bl	8004254 <tearDown>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1463
    }
    UnityConcludeTest();
}
 80048d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1462
    UnityConcludeTest();
 80048d4:	f7ff bf42 	b.w	800475c <UnityConcludeTest>
 80048d8:	20000278 	.word	0x20000278

080048dc <UnityBegin>:
UnityBegin():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1469

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
    Unity.CurrentTestName = NULL;
 80048dc:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1468
    Unity.TestFile = filename;
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <UnityBegin+0x1c>)
 80048e0:	6018      	str	r0, [r3, #0]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1469
    Unity.CurrentTestName = NULL;
 80048e2:	605a      	str	r2, [r3, #4]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1471
    Unity.CurrentTestLineNumber = 0;
    Unity.NumberOfTests = 0;
 80048e4:	e9c3 2204 	strd	r2, r2, [r3, #16]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1473
    Unity.TestFailures = 0;
    Unity.TestIgnores = 0;
 80048e8:	e9c3 2206 	strd	r2, r2, [r3, #24]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1475
    Unity.CurrentTestFailed = 0;
    Unity.CurrentTestIgnored = 0;
 80048ec:	e9c3 2208 	strd	r2, r2, [r3, #32]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1478
    UNITY_EXEC_TIME_RESET();

    UNITY_CLR_DETAILS();
 80048f0:	e9c3 2202 	strd	r2, r2, [r3, #8]
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1480
    UNITY_OUTPUT_START();
}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000278 	.word	0x20000278

080048fc <UnityEnd>:
UnityEnd():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1484

/*-----------------------------------------------*/
int UnityEnd(void)
{
 80048fc:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1485
    UNITY_PRINT_EOL();
 80048fe:	200a      	movs	r0, #10
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1488
    UnityPrint(UnityStrBreaker);
    UNITY_PRINT_EOL();
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 8004900:	4c14      	ldr	r4, [pc, #80]	; (8004954 <UnityEnd+0x58>)
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1485
    UNITY_PRINT_EOL();
 8004902:	f7ff fad1 	bl	8003ea8 <unity_output_char>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1485
 8004906:	4814      	ldr	r0, [pc, #80]	; (8004958 <UnityEnd+0x5c>)
 8004908:	f7ff fce2 	bl	80042d0 <UnityPrint.part.0>
UnityEnd():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1487
    UNITY_PRINT_EOL();
 800490c:	200a      	movs	r0, #10
 800490e:	f7ff facb 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1488
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 8004912:	6960      	ldr	r0, [r4, #20]
 8004914:	f7ff fcb9 	bl	800428a <UnityPrintNumber>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1488
 8004918:	4810      	ldr	r0, [pc, #64]	; (800495c <UnityEnd+0x60>)
 800491a:	f7ff fcd9 	bl	80042d0 <UnityPrint.part.0>
UnityEnd():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1490
    UnityPrint(UnityStrResultsTests);
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 800491e:	69a0      	ldr	r0, [r4, #24]
 8004920:	f7ff fcb3 	bl	800428a <UnityPrintNumber>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1490
 8004924:	480e      	ldr	r0, [pc, #56]	; (8004960 <UnityEnd+0x64>)
 8004926:	f7ff fcd3 	bl	80042d0 <UnityPrint.part.0>
UnityEnd():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1492
    UnityPrint(UnityStrResultsFailures);
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 800492a:	69e0      	ldr	r0, [r4, #28]
 800492c:	f7ff fcad 	bl	800428a <UnityPrintNumber>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1492
 8004930:	480c      	ldr	r0, [pc, #48]	; (8004964 <UnityEnd+0x68>)
 8004932:	f7ff fccd 	bl	80042d0 <UnityPrint.part.0>
UnityEnd():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1494
    UnityPrint(UnityStrResultsIgnored);
    UNITY_PRINT_EOL();
 8004936:	200a      	movs	r0, #10
 8004938:	f7ff fab6 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1495
    if (Unity.TestFailures == 0U)
 800493c:	69a3      	ldr	r3, [r4, #24]
 800493e:	b93b      	cbnz	r3, 8004950 <UnityEnd+0x54>
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1495
 8004940:	4809      	ldr	r0, [pc, #36]	; (8004968 <UnityEnd+0x6c>)
 8004942:	f7ff fcc5 	bl	80042d0 <UnityPrint.part.0>
UnityEnd():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1506
        UnityPrint(UnityStrFail);
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 8004946:	200a      	movs	r0, #10
 8004948:	f7ff faae 	bl	8003ea8 <unity_output_char>
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1510
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
 800494c:	69a0      	ldr	r0, [r4, #24]
 800494e:	bd10      	pop	{r4, pc}
UnityPrint():
/Users/Luppy/stm32bluepill-unittest/lib/unity/src/unity.c:1510
 8004950:	4806      	ldr	r0, [pc, #24]	; (800496c <UnityEnd+0x70>)
 8004952:	e7f6      	b.n	8004942 <UnityEnd+0x46>
 8004954:	20000278 	.word	0x20000278
 8004958:	08007159 	.word	0x08007159
 800495c:	080071b3 	.word	0x080071b3
 8004960:	0800719e 	.word	0x0800719e
 8004964:	080071a9 	.word	0x080071a9
 8004968:	08007196 	.word	0x08007196
 800496c:	08007191 	.word	0x08007191

08004970 <get_float_usage>:
get_float_usage():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:60
    USAGE_FMOD,
    USAGE_FABS,
    LAST_FLOAT_USAGE_INDEX
};
static uint8_t float_usage[LAST_FLOAT_USAGE_INDEX];
uint8_t *get_float_usage(uint16_t *size) { *size = (uint16_t) LAST_FLOAT_USAGE_INDEX - 1; return float_usage; }
 8004970:	232d      	movs	r3, #45	; 0x2d
 8004972:	8003      	strh	r3, [r0, #0]
 8004974:	4800      	ldr	r0, [pc, #0]	; (8004978 <get_float_usage+0x8>)
 8004976:	4770      	bx	lr
 8004978:	2000024a 	.word	0x2000024a

0800497c <__wrap___aeabi_ddiv>:
__wrap___aeabi_ddiv():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:69

///////////////////////////////////////////////////////////////////////////////
//  Table 2, Standard double precision floating-point arithmetic helper functions

//  double-precision division, n / d
double __wrap___aeabi_ddiv(double n, double d) { 
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:70
    float_usage[USAGE_AEABI_DDIV]++;
 8004980:	4809      	ldr	r0, [pc, #36]	; (80049a8 <__wrap___aeabi_ddiv+0x2c>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:69
double __wrap___aeabi_ddiv(double n, double d) { 
 8004982:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:70
    float_usage[USAGE_AEABI_DDIV]++;
 8004984:	7841      	ldrb	r1, [r0, #1]
 8004986:	3101      	adds	r1, #1
 8004988:	7041      	strb	r1, [r0, #1]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:71
    return qfp_fdiv_fast(n, d); 
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f001 fcaf 	bl	80062f0 <__aeabi_d2f>
 8004992:	4606      	mov	r6, r0
 8004994:	4629      	mov	r1, r5
 8004996:	4620      	mov	r0, r4
 8004998:	f001 fcaa 	bl	80062f0 <__aeabi_d2f>
 800499c:	4631      	mov	r1, r6
 800499e:	f002 f8d4 	bl	8006b4a <qfp_fdiv_fast>
 80049a2:	f001 f975 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:72
}
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	2000024a 	.word	0x2000024a

080049ac <__wrap___aeabi_dmul>:
__wrap___aeabi_dmul():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:80
//  aeabi_ddiv(-2205.1969, 270.8886) = -8.140604292687105
//  aeabi_ddiv(2205.1969, -270.8886) = -8.140604292687105
//  aeabi_ddiv(-2205.1969, -270.8886) = 8.140604292687105

//  double-precision multiplication
double __wrap___aeabi_dmul(double x, double y) { 
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:81
    float_usage[USAGE_AEABI_DMUL]++;
 80049b0:	4809      	ldr	r0, [pc, #36]	; (80049d8 <__wrap___aeabi_dmul+0x2c>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:80
double __wrap___aeabi_dmul(double x, double y) { 
 80049b2:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:81
    float_usage[USAGE_AEABI_DMUL]++;
 80049b4:	7881      	ldrb	r1, [r0, #2]
 80049b6:	3101      	adds	r1, #1
 80049b8:	7081      	strb	r1, [r0, #2]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:82
    return qfp_fmul(x, y); 
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f001 fc97 	bl	80062f0 <__aeabi_d2f>
 80049c2:	4606      	mov	r6, r0
 80049c4:	4629      	mov	r1, r5
 80049c6:	4620      	mov	r0, r4
 80049c8:	f001 fc92 	bl	80062f0 <__aeabi_d2f>
 80049cc:	4631      	mov	r1, r6
 80049ce:	f002 f893 	bl	8006af8 <qfp_fmul>
 80049d2:	f001 f95d 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:83
}
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	2000024a 	.word	0x2000024a

080049dc <__wrap___aeabi_dadd>:
__wrap___aeabi_dadd():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:90
//  aeabi_dmul(2205.1969, 270.8886) = 597362.70096534
//  aeabi_dmul(-2205.1969, 270.8886) = -597362.70096534
//  aeabi_dmul(2205.1969, -270.8886) = -597362.70096534
//  aeabi_dmul(-2205.1969, -270.8886) = 597362.70096534

double __wrap___aeabi_dadd(double a, double b) {
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:91
    float_usage[USAGE_AEABI_DADD]++;
 80049e0:	4809      	ldr	r0, [pc, #36]	; (8004a08 <__wrap___aeabi_dadd+0x2c>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:90
double __wrap___aeabi_dadd(double a, double b) {
 80049e2:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:91
    float_usage[USAGE_AEABI_DADD]++;
 80049e4:	78c1      	ldrb	r1, [r0, #3]
 80049e6:	3101      	adds	r1, #1
 80049e8:	70c1      	strb	r1, [r0, #3]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:92
    return qfp_fadd( a , b );
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f001 fc7f 	bl	80062f0 <__aeabi_d2f>
 80049f2:	4606      	mov	r6, r0
 80049f4:	4629      	mov	r1, r5
 80049f6:	4620      	mov	r0, r4
 80049f8:	f001 fc7a 	bl	80062f0 <__aeabi_d2f>
 80049fc:	4631      	mov	r1, r6
 80049fe:	f002 f84c 	bl	8006a9a <qfp_fadd>
 8004a02:	f001 f945 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:93
}
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	2000024a 	.word	0x2000024a

08004a0c <__wrap___aeabi_dsub>:
__wrap___aeabi_dsub():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:100
//  aeabi_dadd(2205.1969, 270.8886) = 2476.0855
//  aeabi_dadd(-2205.1969, 270.8886) = -1934.3083
//  aeabi_dadd(2205.1969, -270.8886) = 1934.3083
//  aeabi_dadd(-2205.1969, -270.8886) = -2476.0855

double __wrap___aeabi_dsub(double a, double b) {
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:101
    float_usage[USAGE_AEABI_DSUB]++;
 8004a10:	4809      	ldr	r0, [pc, #36]	; (8004a38 <__wrap___aeabi_dsub+0x2c>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:100
double __wrap___aeabi_dsub(double a, double b) {
 8004a12:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:101
    float_usage[USAGE_AEABI_DSUB]++;
 8004a14:	7901      	ldrb	r1, [r0, #4]
 8004a16:	3101      	adds	r1, #1
 8004a18:	7101      	strb	r1, [r0, #4]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:102
    return qfp_fsub( a , b );
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f001 fc67 	bl	80062f0 <__aeabi_d2f>
 8004a22:	4606      	mov	r6, r0
 8004a24:	4629      	mov	r1, r5
 8004a26:	4620      	mov	r0, r4
 8004a28:	f001 fc62 	bl	80062f0 <__aeabi_d2f>
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	f002 f831 	bl	8006a94 <qfp_fsub>
 8004a32:	f001 f92d 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:103
}
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	2000024a 	.word	0x2000024a

08004a3c <__wrap___aeabi_dcmpeq>:
__wrap___aeabi_dcmpeq():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:119
//  equal? return 0
//  r0 > r1? return +1
//  r0 < r1: return -1

//  result (1, 0) denotes (=, ?<>) [2], use for C == and !=
int __wrap___aeabi_dcmpeq(double x, double y) {
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:120
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8004a40:	480a      	ldr	r0, [pc, #40]	; (8004a6c <__wrap___aeabi_dcmpeq+0x30>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:119
int __wrap___aeabi_dcmpeq(double x, double y) {
 8004a42:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:120
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8004a44:	7941      	ldrb	r1, [r0, #5]
 8004a46:	3101      	adds	r1, #1
 8004a48:	7141      	strb	r1, [r0, #5]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:121
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f001 fc4f 	bl	80062f0 <__aeabi_d2f>
 8004a52:	4606      	mov	r6, r0
 8004a54:	4629      	mov	r1, r5
 8004a56:	4620      	mov	r0, r4
 8004a58:	f001 fc4a 	bl	80062f0 <__aeabi_d2f>
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	f002 f83d 	bl	8006adc <qfp_fcmp>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:123
        ? 1 : 0;
}
 8004a62:	fab0 f080 	clz	r0, r0
 8004a66:	0940      	lsrs	r0, r0, #5
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2000024a 	.word	0x2000024a

08004a70 <__wrap___aeabi_dcmplt>:
__wrap___aeabi_dcmplt():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:135
//  aeabi_dcmpeq(-2205.196, -2205.195) = 0
//  aeabi_dcmpeq(-2205.196, -2205.197) = 0
//  aeabi_dcmpeq(-2205.196, 0) = 0

//  result (1, 0) denotes (<, ?>=) [2], use for C <
int __wrap___aeabi_dcmplt(double x, double y) {
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:136
    float_usage[USAGE_AEABI_DCMPLT]++;
 8004a74:	4809      	ldr	r0, [pc, #36]	; (8004a9c <__wrap___aeabi_dcmplt+0x2c>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:135
int __wrap___aeabi_dcmplt(double x, double y) {
 8004a76:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:136
    float_usage[USAGE_AEABI_DCMPLT]++;
 8004a78:	7981      	ldrb	r1, [r0, #6]
 8004a7a:	3101      	adds	r1, #1
 8004a7c:	7181      	strb	r1, [r0, #6]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:137
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f001 fc35 	bl	80062f0 <__aeabi_d2f>
 8004a86:	4606      	mov	r6, r0
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f001 fc30 	bl	80062f0 <__aeabi_d2f>
 8004a90:	4631      	mov	r1, r6
 8004a92:	f002 f823 	bl	8006adc <qfp_fcmp>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:139
        ? 1 : 0;
}
 8004a96:	0fc0      	lsrs	r0, r0, #31
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	bf00      	nop
 8004a9c:	2000024a 	.word	0x2000024a

08004aa0 <__wrap___aeabi_dcmple>:
__wrap___aeabi_dcmple():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:151
//  aeabi_dcmplt(-2205.196, -2205.195) = 1
//  aeabi_dcmplt(-2205.196, -2205.197) = 0
//  aeabi_dcmplt(-2205.196, 0) = 1

//  result (1, 0) denotes (<=, ?>) [2], use for C <=
int __wrap___aeabi_dcmple(double x, double y) { 
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:152
    float_usage[USAGE_AEABI_DCMPLE]++;
 8004aa4:	480a      	ldr	r0, [pc, #40]	; (8004ad0 <__wrap___aeabi_dcmple+0x30>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:151
int __wrap___aeabi_dcmple(double x, double y) { 
 8004aa6:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:152
    float_usage[USAGE_AEABI_DCMPLE]++;
 8004aa8:	79c1      	ldrb	r1, [r0, #7]
 8004aaa:	3101      	adds	r1, #1
 8004aac:	71c1      	strb	r1, [r0, #7]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:153
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f001 fc1d 	bl	80062f0 <__aeabi_d2f>
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4620      	mov	r0, r4
 8004abc:	f001 fc18 	bl	80062f0 <__aeabi_d2f>
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	f002 f80b 	bl	8006adc <qfp_fcmp>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:155
        ? 0 : 1; 
}
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	bfcc      	ite	gt
 8004aca:	2000      	movgt	r0, #0
 8004acc:	2001      	movle	r0, #1
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	2000024a 	.word	0x2000024a

08004ad4 <__wrap___aeabi_dcmpge>:
__wrap___aeabi_dcmpge():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:167
//  aeabi_dcmple(-2205.196, -2205.195) = 1
//  aeabi_dcmple(-2205.196, -2205.197) = 0
//  aeabi_dcmple(-2205.196, 0) = 1

//  result (1, 0) denotes (>=, ?<) [2], use for C >=
int __wrap___aeabi_dcmpge(double x, double y) { 
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:168
    float_usage[USAGE_AEABI_DCMPGE]++;
 8004ad8:	4809      	ldr	r0, [pc, #36]	; (8004b00 <__wrap___aeabi_dcmpge+0x2c>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:167
int __wrap___aeabi_dcmpge(double x, double y) { 
 8004ada:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:168
    float_usage[USAGE_AEABI_DCMPGE]++;
 8004adc:	7a01      	ldrb	r1, [r0, #8]
 8004ade:	3101      	adds	r1, #1
 8004ae0:	7201      	strb	r1, [r0, #8]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:169
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f001 fc03 	bl	80062f0 <__aeabi_d2f>
 8004aea:	4606      	mov	r6, r0
 8004aec:	4629      	mov	r1, r5
 8004aee:	4620      	mov	r0, r4
 8004af0:	f001 fbfe 	bl	80062f0 <__aeabi_d2f>
 8004af4:	4631      	mov	r1, r6
 8004af6:	f001 fff1 	bl	8006adc <qfp_fcmp>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:171
        ? 0 : 1; 
}
 8004afa:	43c0      	mvns	r0, r0
 8004afc:	0fc0      	lsrs	r0, r0, #31
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	2000024a 	.word	0x2000024a

08004b04 <__wrap___aeabi_dcmpgt>:
__wrap___aeabi_dcmpgt():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:183
//  aeabi_dcmpge(-2205.196, -2205.195) = 0
//  aeabi_dcmpge(-2205.196, -2205.197) = 1
//  aeabi_dcmpge(-2205.196, 0) = 0

//  result (1, 0) denotes (>, ?<=) [2], use for C >
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:184
    float_usage[USAGE_AEABI_DCMPGT]++;
 8004b08:	480a      	ldr	r0, [pc, #40]	; (8004b34 <__wrap___aeabi_dcmpgt+0x30>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:183
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8004b0a:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:184
    float_usage[USAGE_AEABI_DCMPGT]++;
 8004b0c:	7a41      	ldrb	r1, [r0, #9]
 8004b0e:	3101      	adds	r1, #1
 8004b10:	7241      	strb	r1, [r0, #9]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:185
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f001 fbeb 	bl	80062f0 <__aeabi_d2f>
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f001 fbe6 	bl	80062f0 <__aeabi_d2f>
 8004b24:	4631      	mov	r1, r6
 8004b26:	f001 ffd9 	bl	8006adc <qfp_fcmp>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:187
        ? 1 : 0; 
}
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	bfd4      	ite	le
 8004b2e:	2000      	movle	r0, #0
 8004b30:	2001      	movgt	r0, #1
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	2000024a 	.word	0x2000024a

08004b38 <__wrap___aeabi_dcmpun>:
__wrap___aeabi_dcmpun():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:199
//  aeabi_dcmpgt(-2205.196, -2205.195) = 0
//  aeabi_dcmpgt(-2205.196, -2205.197) = 1
//  aeabi_dcmpgt(-2205.196, 0) = 0

//  result (1, 0) denotes (?, <=>) [2], use for C99 isunordered()
int __wrap___aeabi_dcmpun(double x, double y) { 
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:200
    float_usage[USAGE_AEABI_DCMPUN]++;
 8004b3c:	480a      	ldr	r0, [pc, #40]	; (8004b68 <__wrap___aeabi_dcmpun+0x30>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:199
int __wrap___aeabi_dcmpun(double x, double y) { 
 8004b3e:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:200
    float_usage[USAGE_AEABI_DCMPUN]++;
 8004b40:	7a81      	ldrb	r1, [r0, #10]
 8004b42:	3101      	adds	r1, #1
 8004b44:	7281      	strb	r1, [r0, #10]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:201
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f001 fbd1 	bl	80062f0 <__aeabi_d2f>
 8004b4e:	4606      	mov	r6, r0
 8004b50:	4629      	mov	r1, r5
 8004b52:	4620      	mov	r0, r4
 8004b54:	f001 fbcc 	bl	80062f0 <__aeabi_d2f>
 8004b58:	4631      	mov	r1, r6
 8004b5a:	f001 ffbf 	bl	8006adc <qfp_fcmp>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:203
        ? 0 : 1;
}
 8004b5e:	3000      	adds	r0, #0
 8004b60:	bf18      	it	ne
 8004b62:	2001      	movne	r0, #1
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	bf00      	nop
 8004b68:	2000024a 	.word	0x2000024a

08004b6c <__wrap___aeabi_fdiv>:
__wrap___aeabi_fdiv():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:219
///////////////////////////////////////////////////////////////////////////////
//  Table 4, Standard single precision floating-point arithmetic helper functions

//  single-precision division, n / d
float  __wrap___aeabi_fdiv(float  n, float d)  { 
    float_usage[USAGE_AEABI_FDIV]++;
 8004b6c:	4a02      	ldr	r2, [pc, #8]	; (8004b78 <__wrap___aeabi_fdiv+0xc>)
 8004b6e:	7ad3      	ldrb	r3, [r2, #11]
 8004b70:	3301      	adds	r3, #1
 8004b72:	72d3      	strb	r3, [r2, #11]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:220
    return qfp_fdiv_fast( n , d ); 
 8004b74:	f001 bfe9 	b.w	8006b4a <qfp_fdiv_fast>
 8004b78:	2000024a 	.word	0x2000024a

08004b7c <__wrap___aeabi_fadd>:
__wrap___aeabi_fadd():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:229
//  aeabi_fdiv(-2205.1969, 270.8886) = -8.140604292687105
//  aeabi_fdiv(2205.1969, -270.8886) = -8.140604292687105
//  aeabi_fdiv(-2205.1969, -270.8886) = 8.140604292687105

float __wrap___aeabi_fadd(float a, float b) {
    float_usage[USAGE_AEABI_FADD]++;
 8004b7c:	4a02      	ldr	r2, [pc, #8]	; (8004b88 <__wrap___aeabi_fadd+0xc>)
 8004b7e:	7b13      	ldrb	r3, [r2, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	7313      	strb	r3, [r2, #12]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:230
    return qfp_fadd( a , b );
 8004b84:	f001 bf89 	b.w	8006a9a <qfp_fadd>
 8004b88:	2000024a 	.word	0x2000024a

08004b8c <__wrap___aeabi_fsub>:
__wrap___aeabi_fsub():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:239
//  aeabi_fadd(-2205.1969, 270.8886) = -1934.3083
//  aeabi_fadd(2205.1969, -270.8886) = 1934.3083
//  aeabi_fadd(-2205.1969, -270.8886) = -2476.0855

float __wrap___aeabi_fsub(float a, float b) {
    float_usage[USAGE_AEABI_FSUB]++;
 8004b8c:	4a02      	ldr	r2, [pc, #8]	; (8004b98 <__wrap___aeabi_fsub+0xc>)
 8004b8e:	7b53      	ldrb	r3, [r2, #13]
 8004b90:	3301      	adds	r3, #1
 8004b92:	7353      	strb	r3, [r2, #13]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:240
    return qfp_fsub( a , b );
 8004b94:	f001 bf7e 	b.w	8006a94 <qfp_fsub>
 8004b98:	2000024a 	.word	0x2000024a

08004b9c <__wrap___aeabi_fmul>:
__wrap___aeabi_fmul():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:249
//  aeabi_fsub(-2205.1969, 270.8886) = -2476.0855
//  aeabi_fsub(2205.1969, -270.8886) = 2476.0855
//  aeabi_fsub(-2205.1969, -270.8886) = -1934.3083

float __wrap___aeabi_fmul(float a, float b) {
    float_usage[USAGE_AEABI_FMUL]++;
 8004b9c:	4a02      	ldr	r2, [pc, #8]	; (8004ba8 <__wrap___aeabi_fmul+0xc>)
 8004b9e:	7b93      	ldrb	r3, [r2, #14]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	7393      	strb	r3, [r2, #14]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:250
    return qfp_fmul( a , b );
 8004ba4:	f001 bfa8 	b.w	8006af8 <qfp_fmul>
 8004ba8:	2000024a 	.word	0x2000024a

08004bac <__wrap___aeabi_d2iz>:
__wrap___aeabi_d2iz():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:262

///////////////////////////////////////////////////////////////////////////////
//  Table 6, Standard floating-point to integer conversions

//  double to integer C-style conversion. "z" means round towards 0.
int __wrap___aeabi_d2iz(double x) { 
 8004bac:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:263
    float_usage[USAGE_AEABI_D2IZ]++;
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <__wrap___aeabi_d2iz+0x28>)
 8004bb0:	7bd3      	ldrb	r3, [r2, #15]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	73d3      	strb	r3, [r2, #15]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:264
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 8004bb6:	f001 fb9b 	bl	80062f0 <__aeabi_d2f>
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	f001 ff8d 	bl	8006adc <qfp_fcmp>
 8004bc2:	b128      	cbz	r0, 8004bd0 <__wrap___aeabi_d2iz+0x24>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:266
    //  qfp_float2int() works like floor().  If x is negative, we add 1 to the result.
    int xfloored = qfp_float2int(x);
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f002 f823 	bl	8006c10 <qfp_float2int>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:267
    if (xfloored < 0) { return xfloored + 1; }
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	bfb8      	it	lt
 8004bce:	3001      	addlt	r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:269
    return xfloored; 
}
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	2000024a 	.word	0x2000024a

08004bd8 <__wrap___aeabi_d2uiz>:
__wrap___aeabi_d2uiz():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:276
//  aeabi_d2iz(0) = 0
//  aeabi_d2iz(2205.1969) = 2205
//  aeabi_d2iz(-2205.1969) = -2205

//  double to unsigned C-style conversion. "z" means round towards 0.
unsigned __wrap___aeabi_d2uiz(double x) { 
 8004bd8:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:277
    float_usage[USAGE_AEABI_D2UIZ]++;
 8004bda:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <__wrap___aeabi_d2uiz+0x34>)
 8004bdc:	7c13      	ldrb	r3, [r2, #16]
 8004bde:	3301      	adds	r3, #1
 8004be0:	7413      	strb	r3, [r2, #16]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:278
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 8004be2:	f001 fb85 	bl	80062f0 <__aeabi_d2f>
 8004be6:	2100      	movs	r1, #0
 8004be8:	4604      	mov	r4, r0
 8004bea:	f001 ff77 	bl	8006adc <qfp_fcmp>
 8004bee:	b150      	cbz	r0, 8004c06 <__wrap___aeabi_d2uiz+0x2e>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:279
    if (qfp_fcmp(x, 0) < 0) { return 0; }
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f001 ff72 	bl	8006adc <qfp_fcmp>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	db04      	blt.n	8004c06 <__wrap___aeabi_d2uiz+0x2e>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:280
    return qfp_float2uint(x); 
 8004bfc:	4620      	mov	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:281
}
 8004bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:280
    return qfp_float2uint(x); 
 8004c02:	f002 b81a 	b.w	8006c3a <qfp_float2uint>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:281
}
 8004c06:	2000      	movs	r0, #0
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2000024a 	.word	0x2000024a

08004c10 <__wrap___addsf3>:
__wrap___addsf3():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:293
///////////////////////////////////////////////////////////////////////////////
//  GNU C Library Routines for floating point emulation
//  From https://gcc.gnu.org/onlinedocs/gccint/Soft-float-library-routines.html

float __wrap___addsf3(float a, float b) {
    float_usage[USAGE_ADDSF3]++;
 8004c10:	4a02      	ldr	r2, [pc, #8]	; (8004c1c <__wrap___addsf3+0xc>)
 8004c12:	7c53      	ldrb	r3, [r2, #17]
 8004c14:	3301      	adds	r3, #1
 8004c16:	7453      	strb	r3, [r2, #17]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:294
    return qfp_fadd( a , b );
 8004c18:	f001 bf3f 	b.w	8006a9a <qfp_fadd>
 8004c1c:	2000024a 	.word	0x2000024a

08004c20 <__wrap___subsf3>:
__wrap___subsf3():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:303
//  addsf3(-2205.1969, 270.8886) = -1934.3083
//  addsf3(2205.1969, -270.8886) = 1934.3083
//  addsf3(-2205.1969, -270.8886) = -2476.0855

float __wrap___subsf3(float a, float b) {
    float_usage[USAGE_SUBSF3]++;
 8004c20:	4a02      	ldr	r2, [pc, #8]	; (8004c2c <__wrap___subsf3+0xc>)
 8004c22:	7c93      	ldrb	r3, [r2, #18]
 8004c24:	3301      	adds	r3, #1
 8004c26:	7493      	strb	r3, [r2, #18]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:304
    return qfp_fsub( a , b );
 8004c28:	f001 bf34 	b.w	8006a94 <qfp_fsub>
 8004c2c:	2000024a 	.word	0x2000024a

08004c30 <__wrap___mulsf3>:
__wrap___mulsf3():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:313
//  subsf3(-2205.1969, 270.8886) = -2476.0855
//  subsf3(2205.1969, -270.8886) = 2476.0855
//  subsf3(-2205.1969, -270.8886) = -1934.3083

float __wrap___mulsf3(float a, float b) {
    float_usage[USAGE_MULSF3]++;
 8004c30:	4a02      	ldr	r2, [pc, #8]	; (8004c3c <__wrap___mulsf3+0xc>)
 8004c32:	7cd3      	ldrb	r3, [r2, #19]
 8004c34:	3301      	adds	r3, #1
 8004c36:	74d3      	strb	r3, [r2, #19]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:314
    return qfp_fmul( a , b );
 8004c38:	f001 bf5e 	b.w	8006af8 <qfp_fmul>
 8004c3c:	2000024a 	.word	0x2000024a

08004c40 <__wrap___divsf3>:
__wrap___divsf3():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:323
//  mulsf3(-2205.1969, 270.8886) = -597362.70096534
//  mulsf3(2205.1969, -270.8886) = -597362.70096534
//  mulsf3(-2205.1969, -270.8886) = 597362.70096534

float __wrap___divsf3 (float a, float b) {
    float_usage[USAGE_DIVSF3]++;
 8004c40:	4a02      	ldr	r2, [pc, #8]	; (8004c4c <__wrap___divsf3+0xc>)
 8004c42:	7d13      	ldrb	r3, [r2, #20]
 8004c44:	3301      	adds	r3, #1
 8004c46:	7513      	strb	r3, [r2, #20]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:324
    return qfp_fdiv_fast( a , b );
 8004c48:	f001 bf7f 	b.w	8006b4a <qfp_fdiv_fast>
 8004c4c:	2000024a 	.word	0x2000024a

08004c50 <sqrt>:
sqrt():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:338
//  <math.h> Functions

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::sqrt(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:925: undefined reference to `sqrt'

double sqrt(double x) { 
 8004c50:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:339
    float_usage[USAGE_SQRT]++;
 8004c52:	4a05      	ldr	r2, [pc, #20]	; (8004c68 <sqrt+0x18>)
 8004c54:	7d53      	ldrb	r3, [r2, #21]
 8004c56:	3301      	adds	r3, #1
 8004c58:	7553      	strb	r3, [r2, #21]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:340
    return qfp_fsqrt_fast(x); 
 8004c5a:	f001 fb49 	bl	80062f0 <__aeabi_d2f>
 8004c5e:	f001 ff9c 	bl	8006b9a <qfp_fsqrt_fast>
 8004c62:	f001 f815 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:341
}
 8004c66:	bd08      	pop	{r3, pc}
 8004c68:	2000024a 	.word	0x2000024a

08004c6c <log>:
log():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:351
//// sqrt(-1.0) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::log(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:901: undefined reference to `log'

double log(double x) { 
 8004c6c:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:352
    float_usage[USAGE_LOG]++;
 8004c6e:	4a05      	ldr	r2, [pc, #20]	; (8004c84 <log+0x18>)
 8004c70:	7d93      	ldrb	r3, [r2, #22]
 8004c72:	3301      	adds	r3, #1
 8004c74:	7593      	strb	r3, [r2, #22]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:353
    return qfp_fln(x); 
 8004c76:	f001 fb3b 	bl	80062f0 <__aeabi_d2f>
 8004c7a:	f002 f89d 	bl	8006db8 <qfp_fln>
 8004c7e:	f001 f807 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:354
}
 8004c82:	bd08      	pop	{r3, pc}
 8004c84:	2000024a 	.word	0x2000024a

08004c88 <exp>:
exp():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:362
// log(2) = _M_LN2
// log(10) = M_LN10
//// log(+Inf) = inf
//// log(0) = -inf

double exp(double x) { 
 8004c88:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:363
    float_usage[USAGE_EXP]++;
 8004c8a:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <exp+0x18>)
 8004c8c:	7dd3      	ldrb	r3, [r2, #23]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	75d3      	strb	r3, [r2, #23]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:364
    return qfp_fexp(x); 
 8004c92:	f001 fb2d 	bl	80062f0 <__aeabi_d2f>
 8004c96:	f002 f85a 	bl	8006d4e <qfp_fexp>
 8004c9a:	f000 fff9 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:365
}
 8004c9e:	bd08      	pop	{r3, pc}
 8004ca0:	2000024a 	.word	0x2000024a

08004ca4 <log2>:
log2():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:375
// exp(-0) = 1.000000
//// exp(-Inf) = 0.000000

//  log2(x) = ln(x) / ln(2)
#undef log2
double log2(double x) { 
 8004ca4:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:376
    float_usage[USAGE_LOG2]++;
 8004ca6:	4a07      	ldr	r2, [pc, #28]	; (8004cc4 <log2+0x20>)
 8004ca8:	7e13      	ldrb	r3, [r2, #24]
 8004caa:	3301      	adds	r3, #1
 8004cac:	7613      	strb	r3, [r2, #24]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:377
    return qfp_fmul(
 8004cae:	f001 fb1f 	bl	80062f0 <__aeabi_d2f>
 8004cb2:	f002 f881 	bl	8006db8 <qfp_fln>
 8004cb6:	4904      	ldr	r1, [pc, #16]	; (8004cc8 <log2+0x24>)
 8004cb8:	f001 ff1e 	bl	8006af8 <qfp_fmul>
 8004cbc:	f000 ffe8 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:381
        qfp_fln(x),
        1.0 / _M_LN2  //  Constant
    ); 
}
 8004cc0:	bd08      	pop	{r3, pc}
 8004cc2:	bf00      	nop
 8004cc4:	2000024a 	.word	0x2000024a
 8004cc8:	3fb8aa3b 	.word	0x3fb8aa3b

08004ccc <log10>:
log10():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:395
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::log10(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:904: undefined reference to `log10'

//  log10(x) = ln(x) / ln(10)
//  e.g. log10(1000) = ln(1000) / ln(10) = 3
double log10(double x) { 
 8004ccc:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:396
    float_usage[USAGE_LOG10]++;
 8004cce:	4a07      	ldr	r2, [pc, #28]	; (8004cec <log10+0x20>)
 8004cd0:	7e53      	ldrb	r3, [r2, #25]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	7653      	strb	r3, [r2, #25]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:397
    return qfp_fmul(
 8004cd6:	f001 fb0b 	bl	80062f0 <__aeabi_d2f>
 8004cda:	f002 f86d 	bl	8006db8 <qfp_fln>
 8004cde:	4904      	ldr	r1, [pc, #16]	; (8004cf0 <log10+0x24>)
 8004ce0:	f001 ff0a 	bl	8006af8 <qfp_fmul>
 8004ce4:	f000 ffd4 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:401
        qfp_fln(x),
        1.0 / M_LN10  //  Constant
    ); 
}
 8004ce8:	bd08      	pop	{r3, pc}
 8004cea:	bf00      	nop
 8004cec:	2000024a 	.word	0x2000024a
 8004cf0:	3ede5bd9 	.word	0x3ede5bd9

08004cf4 <pow>:
pow():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:412
//// log10(+Inf) = inf
//// log10(0) = -inf

//  pow(b, x) = pow(e, log(b) * x) = exp(log(b) * x)
//  e.g. pow(10, 3) = exp(log(10) * 3) = 1000
double pow(double b, double x) { 
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	4614      	mov	r4, r2
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:413
    float_usage[USAGE_POW]++;
 8004cf8:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <pow+0x84>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:412
double pow(double b, double x) { 
 8004cfa:	461d      	mov	r5, r3
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:413
    float_usage[USAGE_POW]++;
 8004cfc:	7e93      	ldrb	r3, [r2, #26]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	7693      	strb	r3, [r2, #26]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:416
    //  If b and x are both negative and x is odd, then return -pow(-b, x).
    //  e.g. pow(-2, -3) = -pow(2, -3)
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 8004d02:	f001 faf5 	bl	80062f0 <__aeabi_d2f>
 8004d06:	2100      	movs	r1, #0
 8004d08:	4606      	mov	r6, r0
 8004d0a:	f001 fee7 	bl	8006adc <qfp_fcmp>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	da22      	bge.n	8004d58 <pow+0x64>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:416 (discriminator 1)
 8004d12:	4629      	mov	r1, r5
 8004d14:	4620      	mov	r0, r4
 8004d16:	f001 faeb 	bl	80062f0 <__aeabi_d2f>
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	f001 fedd 	bl	8006adc <qfp_fcmp>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	da18      	bge.n	8004d58 <pow+0x64>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:417
        int xfloored = qfp_float2int(-x);
 8004d26:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 8004d2a:	f001 ff71 	bl	8006c10 <qfp_float2int>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:418
        if (xfloored % 2 == 1) {
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f000 0001 	and.w	r0, r0, #1
 8004d34:	bfb8      	it	lt
 8004d36:	4240      	neglt	r0, r0
 8004d38:	2801      	cmp	r0, #1
 8004d3a:	d10d      	bne.n	8004d58 <pow+0x64>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:419
            return -qfp_fexp(
 8004d3c:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 8004d40:	f002 f83a 	bl	8006db8 <qfp_fln>
 8004d44:	4639      	mov	r1, r7
 8004d46:	f001 fed7 	bl	8006af8 <qfp_fmul>
 8004d4a:	f002 f800 	bl	8006d4e <qfp_fexp>
 8004d4e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:427
                    x
                )        
            );
        }
    }
    return qfp_fexp(
 8004d52:	f000 ff9d 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:433
        qfp_fmul(
            qfp_fln(b),
            x
        )        
    );
}
 8004d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:427
    return qfp_fexp(
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f002 f82d 	bl	8006db8 <qfp_fln>
 8004d5e:	4629      	mov	r1, r5
 8004d60:	4606      	mov	r6, r0
 8004d62:	4620      	mov	r0, r4
 8004d64:	f001 fac4 	bl	80062f0 <__aeabi_d2f>
 8004d68:	4601      	mov	r1, r0
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f001 fec4 	bl	8006af8 <qfp_fmul>
 8004d70:	f001 ffed 	bl	8006d4e <qfp_fexp>
 8004d74:	e7ed      	b.n	8004d52 <pow+0x5e>
 8004d76:	bf00      	nop
 8004d78:	2000024a 	.word	0x2000024a

08004d7c <ldexp>:
ldexp():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:446
//// pow(INFINITY, -1) = 0.000000
//// pow(-1, 1/3) = -nan

//  ldexp(x, ex) = x * pow(2, ex) 
//               = x * exp(log(2) * ex)
double ldexp(double x, int ex) {
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:447
    float_usage[USAGE_LDEXP]++;
 8004d80:	490c      	ldr	r1, [pc, #48]	; (8004db4 <ldexp+0x38>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:446
double ldexp(double x, int ex) {
 8004d82:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:447
    float_usage[USAGE_LDEXP]++;
 8004d84:	7ecb      	ldrb	r3, [r1, #27]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:448
    return qfp_fmul(
 8004d86:	4610      	mov	r0, r2
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:447
    float_usage[USAGE_LDEXP]++;
 8004d88:	3301      	adds	r3, #1
 8004d8a:	76cb      	strb	r3, [r1, #27]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:448
    return qfp_fmul(
 8004d8c:	f001 fbba 	bl	8006504 <__aeabi_i2f>
 8004d90:	4601      	mov	r1, r0
 8004d92:	4809      	ldr	r0, [pc, #36]	; (8004db8 <ldexp+0x3c>)
 8004d94:	f001 feb0 	bl	8006af8 <qfp_fmul>
 8004d98:	f001 ffd9 	bl	8006d4e <qfp_fexp>
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4620      	mov	r0, r4
 8004da2:	f001 faa5 	bl	80062f0 <__aeabi_d2f>
 8004da6:	4631      	mov	r1, r6
 8004da8:	f001 fea6 	bl	8006af8 <qfp_fmul>
 8004dac:	f000 ff70 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:454
        x, 
        qfp_fexp(
            qfp_fmul( _M_LN2 , ex )
        )
    );
}
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
 8004db2:	bf00      	nop
 8004db4:	2000024a 	.word	0x2000024a
 8004db8:	3f317218 	.word	0x3f317218

08004dbc <sin>:
sin():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:464
//// ldexp(1, 1024) = inf

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::sin(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:910: undefined reference to `sin'

double sin(double x) { 
 8004dbc:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:465
    float_usage[USAGE_SIN]++;
 8004dbe:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <sin+0x18>)
 8004dc0:	7f13      	ldrb	r3, [r2, #28]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	7713      	strb	r3, [r2, #28]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:466
    return qfp_fsin(x); 
 8004dc6:	f001 fa93 	bl	80062f0 <__aeabi_d2f>
 8004dca:	f001 ff96 	bl	8006cfa <qfp_fsin>
 8004dce:	f000 ff5f 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:467
}
 8004dd2:	bd08      	pop	{r3, pc}
 8004dd4:	2000024a 	.word	0x2000024a

08004dd8 <cos>:
cos():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:479
//// sin(INFINITY) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::cos(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:913: undefined reference to `cos'

double cos(double x) { 
 8004dd8:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:480
    float_usage[USAGE_COS]++;
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <cos+0x2c>)
 8004ddc:	7f53      	ldrb	r3, [r2, #29]
 8004dde:	3301      	adds	r3, #1
 8004de0:	7753      	strb	r3, [r2, #29]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:482
    //  If x is Pi/2, return 0.
    if (qfp_fcmp(x, M_PI_2) == 0) { return 0; }
 8004de2:	f001 fa85 	bl	80062f0 <__aeabi_d2f>
 8004de6:	4908      	ldr	r1, [pc, #32]	; (8004e08 <cos+0x30>)
 8004de8:	4604      	mov	r4, r0
 8004dea:	f001 fe77 	bl	8006adc <qfp_fcmp>
 8004dee:	b128      	cbz	r0, 8004dfc <cos+0x24>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:483
    return qfp_fcos(x); 
 8004df0:	4620      	mov	r0, r4
 8004df2:	f001 ffa3 	bl	8006d3c <qfp_fcos>
 8004df6:	f000 ff4b 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:484
}
 8004dfa:	bd10      	pop	{r4, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:482
    if (qfp_fcmp(x, M_PI_2) == 0) { return 0; }
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	e7fb      	b.n	8004dfa <cos+0x22>
 8004e02:	bf00      	nop
 8004e04:	2000024a 	.word	0x2000024a
 8004e08:	3fc90fdb 	.word	0x3fc90fdb

08004e0c <tan>:
tan():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:496
//// cos(INFINITY) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::tan(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:907: undefined reference to `tan'

double tan(double x) { 
 8004e0c:	b508      	push	{r3, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:497
    float_usage[USAGE_TAN]++;
 8004e0e:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <tan+0x18>)
 8004e10:	7f93      	ldrb	r3, [r2, #30]
 8004e12:	3301      	adds	r3, #1
 8004e14:	7793      	strb	r3, [r2, #30]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:498
    return qfp_ftan(x); 
 8004e16:	f001 fa6b 	bl	80062f0 <__aeabi_d2f>
 8004e1a:	f001 ff94 	bl	8006d46 <qfp_ftan>
 8004e1e:	f000 ff37 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:499
}
 8004e22:	bd08      	pop	{r3, pc}
 8004e24:	2000024a 	.word	0x2000024a

08004e28 <atan2>:
atan2():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:512
//// tan(INFINITY) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::atan(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:916: undefined reference to `atan'

double atan2(double y, double x) { 
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4614      	mov	r4, r2
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:513
    float_usage[USAGE_ATAN2]++;
 8004e2c:	4a11      	ldr	r2, [pc, #68]	; (8004e74 <atan2+0x4c>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:512
double atan2(double y, double x) { 
 8004e2e:	461d      	mov	r5, r3
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:513
    float_usage[USAGE_ATAN2]++;
 8004e30:	7fd3      	ldrb	r3, [r2, #31]
 8004e32:	3301      	adds	r3, #1
 8004e34:	77d3      	strb	r3, [r2, #31]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:515
    //  If x and y are both 0, return 0.
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 8004e36:	f001 fa5b 	bl	80062f0 <__aeabi_d2f>
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4606      	mov	r6, r0
 8004e3e:	f001 fe4d 	bl	8006adc <qfp_fcmp>
 8004e42:	b150      	cbz	r0, 8004e5a <atan2+0x32>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:516
    return qfp_fatan2( y, x ); 
 8004e44:	4629      	mov	r1, r5
 8004e46:	4620      	mov	r0, r4
 8004e48:	f001 fa52 	bl	80062f0 <__aeabi_d2f>
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f001 ffc4 	bl	8006ddc <qfp_fatan2>
 8004e54:	f000 ff1c 	bl	8005c90 <__aeabi_f2d>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:517
}
 8004e58:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:515 (discriminator 1)
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f001 fa47 	bl	80062f0 <__aeabi_d2f>
 8004e62:	2100      	movs	r1, #0
 8004e64:	f001 fe3a 	bl	8006adc <qfp_fcmp>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d1eb      	bne.n	8004e44 <atan2+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:515
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	e7f2      	b.n	8004e58 <atan2+0x30>
 8004e72:	bf00      	nop
 8004e74:	2000024a 	.word	0x2000024a

08004e78 <atan>:
atan():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:529
//// atan2(0, -0)=3.141593
// atan2(7, 0) = 1.570796 
// atan2(7, -0)=1.570796

////  TODO: Confirm
double atan(double y_over_x) {
 8004e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:530
    float_usage[USAGE_ATAN]++;
 8004e80:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <atan+0x94>)
 8004e82:	f892 3020 	ldrb.w	r3, [r2, #32]
 8004e86:	3301      	adds	r3, #1
 8004e88:	f882 3020 	strb.w	r3, [r2, #32]
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:532
    //  If the argument is NaN, NaN is returned
    if (isnan(y_over_x)) { return NAN; }
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4620      	mov	r0, r4
 8004e92:	4629      	mov	r1, r5
 8004e94:	f001 f9ee 	bl	8006274 <__aeabi_dcmpun>
 8004e98:	bba8      	cbnz	r0, 8004f06 <atan+0x8e>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:535

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(y_over_x, 0) == 0) { return y_over_x; }
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f001 fa27 	bl	80062f0 <__aeabi_d2f>
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	f001 fe19 	bl	8006adc <qfp_fcmp>
 8004eaa:	b308      	cbz	r0, 8004ef0 <atan+0x78>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:538

    //  If the argument is +∞, +π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 8004eac:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb4:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <atan+0x98>)
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f001 f9db 	bl	8006274 <__aeabi_dcmpun>
 8004ebe:	b938      	cbnz	r0, 8004ed0 <atan+0x58>
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ec4:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <atan+0x98>)
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4639      	mov	r1, r7
 8004eca:	f001 f9b5 	bl	8006238 <__aeabi_dcmple>
 8004ece:	b138      	cbz	r0, 8004ee0 <atan+0x68>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:544

    //  If the argument is -∞, -π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return atan2( y_over_x, 1 ); 
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:545
}
 8004ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:544
    return atan2( y_over_x, 1 ); 
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <atan+0x9c>)
 8004edc:	f7ff bfa4 	b.w	8004e28 <atan2>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:538 (discriminator 1)
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f001 fdfa 	bl	8006adc <qfp_fcmp>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	dd05      	ble.n	8004ef8 <atan+0x80>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:538
 8004eec:	4c0a      	ldr	r4, [pc, #40]	; (8004f18 <atan+0xa0>)
 8004eee:	4d0b      	ldr	r5, [pc, #44]	; (8004f1c <atan+0xa4>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:545
}
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:541 (discriminator 1)
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4630      	mov	r0, r6
 8004efc:	f001 fdee 	bl	8006adc <qfp_fcmp>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	dae5      	bge.n	8004ed0 <atan+0x58>
 8004f04:	e7f2      	b.n	8004eec <atan+0x74>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:532
    if (isnan(y_over_x)) { return NAN; }
 8004f06:	2400      	movs	r4, #0
 8004f08:	4d05      	ldr	r5, [pc, #20]	; (8004f20 <atan+0xa8>)
 8004f0a:	e7f1      	b.n	8004ef0 <atan+0x78>
 8004f0c:	2000024a 	.word	0x2000024a
 8004f10:	7fefffff 	.word	0x7fefffff
 8004f14:	3ff00000 	.word	0x3ff00000
 8004f18:	54442d18 	.word	0x54442d18
 8004f1c:	3ff921fb 	.word	0x3ff921fb
 8004f20:	7ff80000 	.word	0x7ff80000

08004f24 <asin>:
asin():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:557
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::asin(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:919: undefined reference to `asin'

//  arcsin(x) = arctan( x / sqrt( 1 - x^2 ) )
//            = arctan2( x , sqrt( 1 - (x*x) ) )
double asin(double x) { 
 8004f24:	b570      	push	{r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:558
    float_usage[USAGE_ASIN]++;
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <asin+0x80>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:557
double asin(double x) { 
 8004f28:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:558
    float_usage[USAGE_ASIN]++;
 8004f2a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:557
double asin(double x) { 
 8004f2e:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:558
    float_usage[USAGE_ASIN]++;
 8004f30:	3301      	adds	r3, #1
 8004f32:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:560
    //  If the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	f001 f99b 	bl	8006274 <__aeabi_dcmpun>
 8004f3e:	b120      	cbz	r0, 8004f4a <asin+0x26>
 8004f40:	2400      	movs	r4, #0
 8004f42:	4d19      	ldr	r5, [pc, #100]	; (8004fa8 <asin+0x84>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:579
                1,
                qfp_fmul( x , x )
            ) 
        )
    );
}
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:563
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f001 f9cf 	bl	80062f0 <__aeabi_d2f>
 8004f52:	2100      	movs	r1, #0
 8004f54:	4606      	mov	r6, r0
 8004f56:	f001 fdc1 	bl	8006adc <qfp_fcmp>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d0f2      	beq.n	8004f44 <asin+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:566
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 8004f5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004f62:	4630      	mov	r0, r6
 8004f64:	f001 fdba 	bl	8006adc <qfp_fcmp>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	dce9      	bgt.n	8004f40 <asin+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:567
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8004f6c:	490f      	ldr	r1, [pc, #60]	; (8004fac <asin+0x88>)
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f001 fdb4 	bl	8006adc <qfp_fcmp>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	dbe3      	blt.n	8004f40 <asin+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:572
        qfp_fsqrt_fast(
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f001 fdbc 	bl	8006af8 <qfp_fmul>
 8004f80:	4601      	mov	r1, r0
 8004f82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004f86:	f001 fd85 	bl	8006a94 <qfp_fsub>
 8004f8a:	f001 fe06 	bl	8006b9a <qfp_fsqrt_fast>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:570
    return atan2(
 8004f8e:	f000 fe7f 	bl	8005c90 <__aeabi_f2d>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:579
}
 8004f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:570
    return atan2(
 8004f9e:	f7ff bf43 	b.w	8004e28 <atan2>
 8004fa2:	bf00      	nop
 8004fa4:	2000024a 	.word	0x2000024a
 8004fa8:	7ff80000 	.word	0x7ff80000
 8004fac:	bf800000 	.word	0xbf800000

08004fb0 <acos>:
acos():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:594

//  arccos(x) = 2 * arctan(
//                      sqrt( 1 - x^2 ) /
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
 8004fb0:	b570      	push	{r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:595
    float_usage[USAGE_ACOS]++;
 8004fb2:	4a2f      	ldr	r2, [pc, #188]	; (8005070 <acos+0xc0>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:594
double acos(double x) {
 8004fb4:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:595
    float_usage[USAGE_ACOS]++;
 8004fb6:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:594
double acos(double x) {
 8004fba:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:595
    float_usage[USAGE_ACOS]++;
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:597
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	f001 f955 	bl	8006274 <__aeabi_dcmpun>
 8004fca:	b110      	cbz	r0, 8004fd2 <acos+0x22>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	4929      	ldr	r1, [pc, #164]	; (8005074 <acos+0xc4>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:622
                )
            ),
            qfp_fadd( 1.0f , x )
        )
    );
}
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:600
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	f001 f98b 	bl	80062f0 <__aeabi_d2f>
 8004fda:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004fde:	4604      	mov	r4, r0
 8004fe0:	f001 fd7c 	bl	8006adc <qfp_fcmp>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d037      	beq.n	8005058 <acos+0xa8>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:603
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 8004fe8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004fec:	4620      	mov	r0, r4
 8004fee:	f001 fd75 	bl	8006adc <qfp_fcmp>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	dcea      	bgt.n	8004fcc <acos+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:604
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8004ff6:	4920      	ldr	r1, [pc, #128]	; (8005078 <acos+0xc8>)
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f001 fd6f 	bl	8006adc <qfp_fcmp>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	dbe4      	blt.n	8004fcc <acos+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:607
    if (qfp_fcmp(x, -1) == 0) { return M_PI_2 * 2.0; }
 8005002:	491d      	ldr	r1, [pc, #116]	; (8005078 <acos+0xc8>)
 8005004:	4620      	mov	r0, r4
 8005006:	f001 fd69 	bl	8006adc <qfp_fcmp>
 800500a:	b340      	cbz	r0, 800505e <acos+0xae>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:613
            qfp_fsqrt_fast(
 800500c:	4621      	mov	r1, r4
 800500e:	4620      	mov	r0, r4
 8005010:	f001 fd72 	bl	8006af8 <qfp_fmul>
 8005014:	4601      	mov	r1, r0
 8005016:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800501a:	f001 fd3b 	bl	8006a94 <qfp_fsub>
 800501e:	f001 fdbc 	bl	8006b9a <qfp_fsqrt_fast>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:619
            qfp_fadd( 1.0f , x )
 8005022:	4621      	mov	r1, r4
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:613
            qfp_fsqrt_fast(
 8005024:	4606      	mov	r6, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:619
            qfp_fadd( 1.0f , x )
 8005026:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800502a:	f001 fd36 	bl	8006a9a <qfp_fadd>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:612
        atan2(
 800502e:	f000 fe2f 	bl	8005c90 <__aeabi_f2d>
 8005032:	4604      	mov	r4, r0
 8005034:	460d      	mov	r5, r1
 8005036:	4630      	mov	r0, r6
 8005038:	f000 fe2a 	bl	8005c90 <__aeabi_f2d>
 800503c:	4622      	mov	r2, r4
 800503e:	462b      	mov	r3, r5
 8005040:	f7ff fef2 	bl	8004e28 <atan2>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:610
    return qfp_fmul(
 8005044:	f001 f954 	bl	80062f0 <__aeabi_d2f>
 8005048:	4601      	mov	r1, r0
 800504a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800504e:	f001 fd53 	bl	8006af8 <qfp_fmul>
 8005052:	f000 fe1d 	bl	8005c90 <__aeabi_f2d>
 8005056:	e7bb      	b.n	8004fd0 <acos+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:600
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8005058:	2000      	movs	r0, #0
 800505a:	2100      	movs	r1, #0
 800505c:	e7b8      	b.n	8004fd0 <acos+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:607
    if (qfp_fcmp(x, -1) == 0) { return M_PI_2 * 2.0; }
 800505e:	a102      	add	r1, pc, #8	; (adr r1, 8005068 <acos+0xb8>)
 8005060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005064:	e7b4      	b.n	8004fd0 <acos+0x20>
 8005066:	bf00      	nop
 8005068:	54442d18 	.word	0x54442d18
 800506c:	400921fb 	.word	0x400921fb
 8005070:	2000024a 	.word	0x2000024a
 8005074:	7ff80000 	.word	0x7ff80000
 8005078:	bf800000 	.word	0xbf800000

0800507c <sinh>:
sinh():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:635

//  From https://en.wikipedia.org/wiki/Hyperbolic_function

//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	4604      	mov	r4, r0
 8005080:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:636
    float_usage[USAGE_SINH]++;
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <sinh+0x8c>)
 8005084:	f892 3023 	ldrb.w	r3, [r2, #35]	; 0x23
 8005088:	3301      	adds	r3, #1
 800508a:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:638
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4620      	mov	r0, r4
 8005094:	4629      	mov	r1, r5
 8005096:	f001 f8ed 	bl	8006274 <__aeabi_dcmpun>
 800509a:	bb90      	cbnz	r0, 8005102 <sinh+0x86>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:641

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800509c:	4629      	mov	r1, r5
 800509e:	4620      	mov	r0, r4
 80050a0:	f001 f926 	bl	80062f0 <__aeabi_d2f>
 80050a4:	2100      	movs	r1, #0
 80050a6:	4606      	mov	r6, r0
 80050a8:	f001 fd18 	bl	8006adc <qfp_fcmp>
 80050ac:	b330      	cbz	r0, 80050fc <sinh+0x80>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:644

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 80050ae:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80050b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050b6:	4b15      	ldr	r3, [pc, #84]	; (800510c <sinh+0x90>)
 80050b8:	4620      	mov	r0, r4
 80050ba:	4639      	mov	r1, r7
 80050bc:	f001 f8da 	bl	8006274 <__aeabi_dcmpun>
 80050c0:	b938      	cbnz	r0, 80050d2 <sinh+0x56>
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <sinh+0x90>)
 80050c8:	4620      	mov	r0, r4
 80050ca:	4639      	mov	r1, r7
 80050cc:	f001 f8b4 	bl	8006238 <__aeabi_dcmple>
 80050d0:	b1a0      	cbz	r0, 80050fc <sinh+0x80>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:646

    return qfp_fmul(
 80050d2:	4630      	mov	r0, r6
 80050d4:	f001 fe3b 	bl	8006d4e <qfp_fexp>
 80050d8:	4604      	mov	r4, r0
 80050da:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 80050de:	f001 fe36 	bl	8006d4e <qfp_fexp>
 80050e2:	4601      	mov	r1, r0
 80050e4:	4620      	mov	r0, r4
 80050e6:	f001 fcd5 	bl	8006a94 <qfp_fsub>
 80050ea:	4601      	mov	r1, r0
 80050ec:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80050f0:	f001 fd02 	bl	8006af8 <qfp_fmul>
 80050f4:	f000 fdcc 	bl	8005c90 <__aeabi_f2d>
 80050f8:	4604      	mov	r4, r0
 80050fa:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:653
        qfp_fsub(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:638
    if (isnan(x)) { return NAN; }
 8005102:	2400      	movs	r4, #0
 8005104:	4d02      	ldr	r5, [pc, #8]	; (8005110 <sinh+0x94>)
 8005106:	e7f9      	b.n	80050fc <sinh+0x80>
 8005108:	2000024a 	.word	0x2000024a
 800510c:	7fefffff 	.word	0x7fefffff
 8005110:	7ff80000 	.word	0x7ff80000

08005114 <cosh>:
cosh():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:663
// sinh(-0)=-0.000000
//// sinh(710.5) = inf

//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:664
    float_usage[USAGE_COSH]++;
 800511a:	4a23      	ldr	r2, [pc, #140]	; (80051a8 <cosh+0x94>)
 800511c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005120:	3301      	adds	r3, #1
 8005122:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:666
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4620      	mov	r0, r4
 800512c:	4629      	mov	r1, r5
 800512e:	f001 f8a1 	bl	8006274 <__aeabi_dcmpun>
 8005132:	bb90      	cbnz	r0, 800519a <cosh+0x86>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:669
    
    //  If the argument is ±0, 1 is returned
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 8005134:	4629      	mov	r1, r5
 8005136:	4620      	mov	r0, r4
 8005138:	f001 f8da 	bl	80062f0 <__aeabi_d2f>
 800513c:	2100      	movs	r1, #0
 800513e:	4606      	mov	r6, r0
 8005140:	f001 fccc 	bl	8006adc <qfp_fcmp>
 8005144:	b360      	cbz	r0, 80051a0 <cosh+0x8c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:672

    //  If the argument is ±∞, return +∞
    if (isinf(x)) { return x; }  //  TODO: Handle -∞
 8005146:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800514a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800514e:	4b17      	ldr	r3, [pc, #92]	; (80051ac <cosh+0x98>)
 8005150:	4620      	mov	r0, r4
 8005152:	4639      	mov	r1, r7
 8005154:	f001 f88e 	bl	8006274 <__aeabi_dcmpun>
 8005158:	b938      	cbnz	r0, 800516a <cosh+0x56>
 800515a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <cosh+0x98>)
 8005160:	4620      	mov	r0, r4
 8005162:	4639      	mov	r1, r7
 8005164:	f001 f868 	bl	8006238 <__aeabi_dcmple>
 8005168:	b1a0      	cbz	r0, 8005194 <cosh+0x80>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:674

    return qfp_fmul(
 800516a:	4630      	mov	r0, r6
 800516c:	f001 fdef 	bl	8006d4e <qfp_fexp>
 8005170:	4604      	mov	r4, r0
 8005172:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 8005176:	f001 fdea 	bl	8006d4e <qfp_fexp>
 800517a:	4601      	mov	r1, r0
 800517c:	4620      	mov	r0, r4
 800517e:	f001 fc8c 	bl	8006a9a <qfp_fadd>
 8005182:	4601      	mov	r1, r0
 8005184:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8005188:	f001 fcb6 	bl	8006af8 <qfp_fmul>
 800518c:	f000 fd80 	bl	8005c90 <__aeabi_f2d>
 8005190:	4604      	mov	r4, r0
 8005192:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:681
        qfp_fadd(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 8005194:	4620      	mov	r0, r4
 8005196:	4629      	mov	r1, r5
 8005198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:666
    if (isnan(x)) { return NAN; }
 800519a:	2400      	movs	r4, #0
 800519c:	4d04      	ldr	r5, [pc, #16]	; (80051b0 <cosh+0x9c>)
 800519e:	e7f9      	b.n	8005194 <cosh+0x80>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:669
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 80051a0:	4604      	mov	r4, r0
 80051a2:	4d04      	ldr	r5, [pc, #16]	; (80051b4 <cosh+0xa0>)
 80051a4:	e7f6      	b.n	8005194 <cosh+0x80>
 80051a6:	bf00      	nop
 80051a8:	2000024a 	.word	0x2000024a
 80051ac:	7fefffff 	.word	0x7fefffff
 80051b0:	7ff80000 	.word	0x7ff80000
 80051b4:	3ff00000 	.word	0x3ff00000

080051b8 <tanh>:
tanh():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:691
// cosh(-0) = 1.000000
//// cosh(710.5) = inf

//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4604      	mov	r4, r0
 80051bc:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:692
    float_usage[USAGE_TANH]++;
 80051be:	4a26      	ldr	r2, [pc, #152]	; (8005258 <tanh+0xa0>)
 80051c0:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80051c4:	3301      	adds	r3, #1
 80051c6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:694
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4620      	mov	r0, r4
 80051d0:	4629      	mov	r1, r5
 80051d2:	f001 f84f 	bl	8006274 <__aeabi_dcmpun>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d137      	bne.n	800524a <tanh+0x92>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:697

    //  If the argument is ±0, ±0 is returned
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80051da:	4629      	mov	r1, r5
 80051dc:	4620      	mov	r0, r4
 80051de:	f001 f887 	bl	80062f0 <__aeabi_d2f>
 80051e2:	2100      	movs	r1, #0
 80051e4:	4606      	mov	r6, r0
 80051e6:	f001 fc79 	bl	8006adc <qfp_fcmp>
 80051ea:	b358      	cbz	r0, 8005244 <tanh+0x8c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:700

    //  If the argument is ±∞, return ±1
    if (isinf(x)) { return 1; }  //  TODO: Handle -1
 80051ec:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80051f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <tanh+0xa4>)
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f001 f83b 	bl	8006274 <__aeabi_dcmpun>
 80051fe:	b938      	cbnz	r0, 8005210 <tanh+0x58>
 8005200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <tanh+0xa4>)
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	f001 f815 	bl	8006238 <__aeabi_dcmple>
 800520e:	b1f8      	cbz	r0, 8005250 <tanh+0x98>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:702

    float e2x = qfp_fexp(  //  e^{2x}
 8005210:	4631      	mov	r1, r6
 8005212:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005216:	f001 fc6f 	bl	8006af8 <qfp_fmul>
 800521a:	f001 fd98 	bl	8006d4e <qfp_fexp>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:708
        qfp_fmul(
            2.0f,
            x 
        )
    );
    return qfp_fdiv_fast(
 800521e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:702
    float e2x = qfp_fexp(  //  e^{2x}
 8005222:	4605      	mov	r5, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:708
    return qfp_fdiv_fast(
 8005224:	f001 fc36 	bl	8006a94 <qfp_fsub>
 8005228:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800522c:	4604      	mov	r4, r0
 800522e:	4628      	mov	r0, r5
 8005230:	f001 fc33 	bl	8006a9a <qfp_fadd>
 8005234:	4601      	mov	r1, r0
 8005236:	4620      	mov	r0, r4
 8005238:	f001 fc87 	bl	8006b4a <qfp_fdiv_fast>
 800523c:	f000 fd28 	bl	8005c90 <__aeabi_f2d>
 8005240:	4604      	mov	r4, r0
 8005242:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:712
        qfp_fsub( e2x, 1.0f ),
        qfp_fadd( e2x, 1.0f )
    );
}
 8005244:	4620      	mov	r0, r4
 8005246:	4629      	mov	r1, r5
 8005248:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:694
    if (isnan(x)) { return NAN; }
 800524a:	2400      	movs	r4, #0
 800524c:	4d04      	ldr	r5, [pc, #16]	; (8005260 <tanh+0xa8>)
 800524e:	e7f9      	b.n	8005244 <tanh+0x8c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:700
    if (isinf(x)) { return 1; }  //  TODO: Handle -1
 8005250:	4604      	mov	r4, r0
 8005252:	4d04      	ldr	r5, [pc, #16]	; (8005264 <tanh+0xac>)
 8005254:	e7f6      	b.n	8005244 <tanh+0x8c>
 8005256:	bf00      	nop
 8005258:	2000024a 	.word	0x2000024a
 800525c:	7fefffff 	.word	0x7fefffff
 8005260:	7ff80000 	.word	0x7ff80000
 8005264:	3ff00000 	.word	0x3ff00000

08005268 <asinh>:
asinh():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:723

//  From https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions

//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	4604      	mov	r4, r0
 800526c:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:724
    float_usage[USAGE_ASINH]++;
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <asinh+0x8c>)
 8005270:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8005274:	3301      	adds	r3, #1
 8005276:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:726
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4620      	mov	r0, r4
 8005280:	4629      	mov	r1, r5
 8005282:	f000 fff7 	bl	8006274 <__aeabi_dcmpun>
 8005286:	bb88      	cbnz	r0, 80052ec <asinh+0x84>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:729

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8005288:	4629      	mov	r1, r5
 800528a:	4620      	mov	r0, r4
 800528c:	f001 f830 	bl	80062f0 <__aeabi_d2f>
 8005290:	2100      	movs	r1, #0
 8005292:	4606      	mov	r6, r0
 8005294:	f001 fc22 	bl	8006adc <qfp_fcmp>
 8005298:	b328      	cbz	r0, 80052e6 <asinh+0x7e>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:732

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 800529a:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800529e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a2:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <asinh+0x90>)
 80052a4:	4620      	mov	r0, r4
 80052a6:	4639      	mov	r1, r7
 80052a8:	f000 ffe4 	bl	8006274 <__aeabi_dcmpun>
 80052ac:	b938      	cbnz	r0, 80052be <asinh+0x56>
 80052ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <asinh+0x90>)
 80052b4:	4620      	mov	r0, r4
 80052b6:	4639      	mov	r1, r7
 80052b8:	f000 ffbe 	bl	8006238 <__aeabi_dcmple>
 80052bc:	b198      	cbz	r0, 80052e6 <asinh+0x7e>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:734

    return qfp_fln(
 80052be:	4631      	mov	r1, r6
 80052c0:	4630      	mov	r0, r6
 80052c2:	f001 fc19 	bl	8006af8 <qfp_fmul>
 80052c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80052ca:	f001 fbe6 	bl	8006a9a <qfp_fadd>
 80052ce:	f001 fc64 	bl	8006b9a <qfp_fsqrt_fast>
 80052d2:	4601      	mov	r1, r0
 80052d4:	4630      	mov	r0, r6
 80052d6:	f001 fbe0 	bl	8006a9a <qfp_fadd>
 80052da:	f001 fd6d 	bl	8006db8 <qfp_fln>
 80052de:	f000 fcd7 	bl	8005c90 <__aeabi_f2d>
 80052e2:	4604      	mov	r4, r0
 80052e4:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:745
                    1.0f
                )
            )
        )
    );
}
 80052e6:	4620      	mov	r0, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:726
    if (isnan(x)) { return NAN; }
 80052ec:	2400      	movs	r4, #0
 80052ee:	4d03      	ldr	r5, [pc, #12]	; (80052fc <asinh+0x94>)
 80052f0:	e7f9      	b.n	80052e6 <asinh+0x7e>
 80052f2:	bf00      	nop
 80052f4:	2000024a 	.word	0x2000024a
 80052f8:	7fefffff 	.word	0x7fefffff
 80052fc:	7ff80000 	.word	0x7ff80000

08005300 <acosh>:
acosh():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:754
// asinh(+0) = 0.000000
// asinh(-0) = -0.000000

//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	4604      	mov	r4, r0
 8005304:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:755
    float_usage[USAGE_ACOSH]++;
 8005306:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <acosh+0xa4>)
 8005308:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
 800530c:	3301      	adds	r3, #1
 800530e:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:757
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f000 ffab 	bl	8006274 <__aeabi_dcmpun>
 800531e:	b120      	cbz	r0, 800532a <acosh+0x2a>
 8005320:	2400      	movs	r4, #0
 8005322:	4d21      	ldr	r5, [pc, #132]	; (80053a8 <acosh+0xa8>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:779
                    1.0f
                )
            )
        )
    );
}
 8005324:	4620      	mov	r0, r4
 8005326:	4629      	mov	r1, r5
 8005328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:760
    if (qfp_fcmp(x, 1) < 0) { return NAN; }
 800532a:	4629      	mov	r1, r5
 800532c:	4620      	mov	r0, r4
 800532e:	f000 ffdf 	bl	80062f0 <__aeabi_d2f>
 8005332:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005336:	4606      	mov	r6, r0
 8005338:	f001 fbd0 	bl	8006adc <qfp_fcmp>
 800533c:	2800      	cmp	r0, #0
 800533e:	dbef      	blt.n	8005320 <acosh+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:763
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8005340:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005344:	4630      	mov	r0, r6
 8005346:	f001 fbc9 	bl	8006adc <qfp_fcmp>
 800534a:	b338      	cbz	r0, 800539c <acosh+0x9c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:766
    if (isinf(x)) { return x; }
 800534c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8005350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005354:	4b15      	ldr	r3, [pc, #84]	; (80053ac <acosh+0xac>)
 8005356:	4620      	mov	r0, r4
 8005358:	4639      	mov	r1, r7
 800535a:	f000 ff8b 	bl	8006274 <__aeabi_dcmpun>
 800535e:	b940      	cbnz	r0, 8005372 <acosh+0x72>
 8005360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005364:	4b11      	ldr	r3, [pc, #68]	; (80053ac <acosh+0xac>)
 8005366:	4620      	mov	r0, r4
 8005368:	4639      	mov	r1, r7
 800536a:	f000 ff65 	bl	8006238 <__aeabi_dcmple>
 800536e:	2800      	cmp	r0, #0
 8005370:	d0d8      	beq.n	8005324 <acosh+0x24>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:768
    return qfp_fln(
 8005372:	4631      	mov	r1, r6
 8005374:	4630      	mov	r0, r6
 8005376:	f001 fbbf 	bl	8006af8 <qfp_fmul>
 800537a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800537e:	f001 fb89 	bl	8006a94 <qfp_fsub>
 8005382:	f001 fc0a 	bl	8006b9a <qfp_fsqrt_fast>
 8005386:	4601      	mov	r1, r0
 8005388:	4630      	mov	r0, r6
 800538a:	f001 fb86 	bl	8006a9a <qfp_fadd>
 800538e:	f001 fd13 	bl	8006db8 <qfp_fln>
 8005392:	f000 fc7d 	bl	8005c90 <__aeabi_f2d>
 8005396:	4604      	mov	r4, r0
 8005398:	460d      	mov	r5, r1
 800539a:	e7c3      	b.n	8005324 <acosh+0x24>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:763
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 800539c:	4604      	mov	r4, r0
 800539e:	4605      	mov	r5, r0
 80053a0:	e7c0      	b.n	8005324 <acosh+0x24>
 80053a2:	bf00      	nop
 80053a4:	2000024a 	.word	0x2000024a
 80053a8:	7ff80000 	.word	0x7ff80000
 80053ac:	7fefffff 	.word	0x7fefffff

080053b0 <atanh>:
atanh():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:789
//// acosh(Inf) = inf
//// acosh(0.5) = -nan

//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
 80053b0:	b570      	push	{r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:790
    float_usage[USAGE_ATANH]++;
 80053b2:	4a2a      	ldr	r2, [pc, #168]	; (800545c <atanh+0xac>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:789
double atanh(double x) {
 80053b4:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:790
    float_usage[USAGE_ATANH]++;
 80053b6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:789
double atanh(double x) {
 80053ba:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:790
    float_usage[USAGE_ATANH]++;
 80053bc:	3301      	adds	r3, #1
 80053be:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:792
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	f000 ff55 	bl	8006274 <__aeabi_dcmpun>
 80053ca:	b120      	cbz	r0, 80053d6 <atanh+0x26>
 80053cc:	2400      	movs	r4, #0
 80053ce:	4d24      	ldr	r5, [pc, #144]	; (8005460 <atanh+0xb0>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:814
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:795
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80053d6:	4629      	mov	r1, r5
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 ff89 	bl	80062f0 <__aeabi_d2f>
 80053de:	2100      	movs	r1, #0
 80053e0:	4606      	mov	r6, r0
 80053e2:	f001 fb7b 	bl	8006adc <qfp_fcmp>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d0f2      	beq.n	80053d0 <atanh+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:798
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
 80053ea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80053ee:	4630      	mov	r0, r6
 80053f0:	f001 fb74 	bl	8006adc <qfp_fcmp>
 80053f4:	b360      	cbz	r0, 8005450 <atanh+0xa0>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:799
    if (qfp_fcmp(x, -1) == 0) { return -INFINITY; }
 80053f6:	491b      	ldr	r1, [pc, #108]	; (8005464 <atanh+0xb4>)
 80053f8:	4630      	mov	r0, r6
 80053fa:	f001 fb6f 	bl	8006adc <qfp_fcmp>
 80053fe:	b350      	cbz	r0, 8005456 <atanh+0xa6>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:802
    if (qfp_fcmp(x, 1) > 0) { return NAN; }
 8005400:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005404:	4630      	mov	r0, r6
 8005406:	f001 fb69 	bl	8006adc <qfp_fcmp>
 800540a:	2800      	cmp	r0, #0
 800540c:	dcde      	bgt.n	80053cc <atanh+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:803
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 800540e:	4915      	ldr	r1, [pc, #84]	; (8005464 <atanh+0xb4>)
 8005410:	4630      	mov	r0, r6
 8005412:	f001 fb63 	bl	8006adc <qfp_fcmp>
 8005416:	2800      	cmp	r0, #0
 8005418:	dbd8      	blt.n	80053cc <atanh+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:805
    return qfp_fmul(
 800541a:	4631      	mov	r1, r6
 800541c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005420:	f001 fb3b 	bl	8006a9a <qfp_fadd>
 8005424:	4631      	mov	r1, r6
 8005426:	4604      	mov	r4, r0
 8005428:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800542c:	f001 fb32 	bl	8006a94 <qfp_fsub>
 8005430:	4601      	mov	r1, r0
 8005432:	4620      	mov	r0, r4
 8005434:	f001 fb89 	bl	8006b4a <qfp_fdiv_fast>
 8005438:	f001 fcbe 	bl	8006db8 <qfp_fln>
 800543c:	4601      	mov	r1, r0
 800543e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8005442:	f001 fb59 	bl	8006af8 <qfp_fmul>
 8005446:	f000 fc23 	bl	8005c90 <__aeabi_f2d>
 800544a:	4604      	mov	r4, r0
 800544c:	460d      	mov	r5, r1
 800544e:	e7bf      	b.n	80053d0 <atanh+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:798
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
 8005450:	2400      	movs	r4, #0
 8005452:	4d05      	ldr	r5, [pc, #20]	; (8005468 <atanh+0xb8>)
 8005454:	e7bc      	b.n	80053d0 <atanh+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:799
    if (qfp_fcmp(x, -1) == 0) { return -INFINITY; }
 8005456:	2400      	movs	r4, #0
 8005458:	4d04      	ldr	r5, [pc, #16]	; (800546c <atanh+0xbc>)
 800545a:	e7b9      	b.n	80053d0 <atanh+0x20>
 800545c:	2000024a 	.word	0x2000024a
 8005460:	7ff80000 	.word	0x7ff80000
 8005464:	bf800000 	.word	0xbf800000
 8005468:	7ff00000 	.word	0x7ff00000
 800546c:	fff00000 	.word	0xfff00000

08005470 <trunc>:
trunc():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:826
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::trunc(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:934: undefined reference to `trunc'

//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
 8005470:	b570      	push	{r4, r5, r6, lr}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:827
    float_usage[USAGE_TRUNC]++;
 8005472:	4a1c      	ldr	r2, [pc, #112]	; (80054e4 <trunc+0x74>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:826
double trunc(double x) { 
 8005474:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:827
    float_usage[USAGE_TRUNC]++;
 8005476:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:826
double trunc(double x) { 
 800547a:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:827
    float_usage[USAGE_TRUNC]++;
 800547c:	3301      	adds	r3, #1
 800547e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:829
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	f000 fef5 	bl	8006274 <__aeabi_dcmpun>
 800548a:	bb38      	cbnz	r0, 80054dc <trunc+0x6c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:832

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 800548c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <trunc+0x78>)
 8005496:	4620      	mov	r0, r4
 8005498:	4631      	mov	r1, r6
 800549a:	f000 feeb 	bl	8006274 <__aeabi_dcmpun>
 800549e:	b938      	cbnz	r0, 80054b0 <trunc+0x40>
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <trunc+0x78>)
 80054a6:	4620      	mov	r0, r4
 80054a8:	4631      	mov	r1, r6
 80054aa:	f000 fec5 	bl	8006238 <__aeabi_dcmple>
 80054ae:	b190      	cbz	r0, 80054d6 <trunc+0x66>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:835

    //  If arg is ±0, it is returned, unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80054b0:	4629      	mov	r1, r5
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 ff1c 	bl	80062f0 <__aeabi_d2f>
 80054b8:	2100      	movs	r1, #0
 80054ba:	4606      	mov	r6, r0
 80054bc:	f001 fb0e 	bl	8006adc <qfp_fcmp>
 80054c0:	b148      	cbz	r0, 80054d6 <trunc+0x66>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:838

    //  qfp_float2int() behaves like floor().  If negative, add one.
    int floored = qfp_float2int(x);
 80054c2:	4630      	mov	r0, r6
 80054c4:	f001 fba4 	bl	8006c10 <qfp_float2int>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:839
    if (floored < 0) { return floored + 1; }
 80054c8:	1e03      	subs	r3, r0, #0
 80054ca:	bfb8      	it	lt
 80054cc:	1c58      	addlt	r0, r3, #1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:840
    return floored;
 80054ce:	f000 fbcd 	bl	8005c6c <__aeabi_i2d>
 80054d2:	4604      	mov	r4, r0
 80054d4:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:841
}
 80054d6:	4620      	mov	r0, r4
 80054d8:	4629      	mov	r1, r5
 80054da:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:829
    if (isnan(x)) { return NAN; }
 80054dc:	2400      	movs	r4, #0
 80054de:	4d03      	ldr	r5, [pc, #12]	; (80054ec <trunc+0x7c>)
 80054e0:	e7f9      	b.n	80054d6 <trunc+0x66>
 80054e2:	bf00      	nop
 80054e4:	2000024a 	.word	0x2000024a
 80054e8:	7fefffff 	.word	0x7fefffff
 80054ec:	7ff80000 	.word	0x7ff80000

080054f0 <floor>:
floor():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:854
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::floor(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:928: undefined reference to `floor'

//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4604      	mov	r4, r0
 80054f4:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:855
    float_usage[USAGE_FLOOR]++;
 80054f6:	4a1a      	ldr	r2, [pc, #104]	; (8005560 <floor+0x70>)
 80054f8:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80054fc:	3301      	adds	r3, #1
 80054fe:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:857
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f000 feb3 	bl	8006274 <__aeabi_dcmpun>
 800550e:	bb20      	cbnz	r0, 800555a <floor+0x6a>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:860

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 8005510:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <floor+0x74>)
 800551a:	4620      	mov	r0, r4
 800551c:	4631      	mov	r1, r6
 800551e:	f000 fea9 	bl	8006274 <__aeabi_dcmpun>
 8005522:	b938      	cbnz	r0, 8005534 <floor+0x44>
 8005524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005528:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <floor+0x74>)
 800552a:	4620      	mov	r0, r4
 800552c:	4631      	mov	r1, r6
 800552e:	f000 fe83 	bl	8006238 <__aeabi_dcmple>
 8005532:	b178      	cbz	r0, 8005554 <floor+0x64>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:863

    //  If arg is ±0, it is returned, unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8005534:	4629      	mov	r1, r5
 8005536:	4620      	mov	r0, r4
 8005538:	f000 feda 	bl	80062f0 <__aeabi_d2f>
 800553c:	2100      	movs	r1, #0
 800553e:	4606      	mov	r6, r0
 8005540:	f001 facc 	bl	8006adc <qfp_fcmp>
 8005544:	b130      	cbz	r0, 8005554 <floor+0x64>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:866

    //  qfp_float2int() behaves like floor().
    int floored = qfp_float2int(x);
 8005546:	4630      	mov	r0, r6
 8005548:	f001 fb62 	bl	8006c10 <qfp_float2int>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:867
    return floored;
 800554c:	f000 fb8e 	bl	8005c6c <__aeabi_i2d>
 8005550:	4604      	mov	r4, r0
 8005552:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:868
}
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:857
    if (isnan(x)) { return NAN; }
 800555a:	2400      	movs	r4, #0
 800555c:	4d02      	ldr	r5, [pc, #8]	; (8005568 <floor+0x78>)
 800555e:	e7f9      	b.n	8005554 <floor+0x64>
 8005560:	2000024a 	.word	0x2000024a
 8005564:	7fefffff 	.word	0x7fefffff
 8005568:	7ff80000 	.word	0x7ff80000

0800556c <ceil>:
ceil():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:881
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::ceil(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:931: undefined reference to `ceil'

//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:882
    float_usage[USAGE_CEIL]++;
 8005572:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <ceil+0x74>)
 8005574:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8005578:	3301      	adds	r3, #1
 800557a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:884
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4620      	mov	r0, r4
 8005584:	4629      	mov	r1, r5
 8005586:	f000 fe75 	bl	8006274 <__aeabi_dcmpun>
 800558a:	bb28      	cbnz	r0, 80055d8 <ceil+0x6c>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:887

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 800558c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005594:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <ceil+0x78>)
 8005596:	4620      	mov	r0, r4
 8005598:	4631      	mov	r1, r6
 800559a:	f000 fe6b 	bl	8006274 <__aeabi_dcmpun>
 800559e:	b938      	cbnz	r0, 80055b0 <ceil+0x44>
 80055a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <ceil+0x78>)
 80055a6:	4620      	mov	r0, r4
 80055a8:	4631      	mov	r1, r6
 80055aa:	f000 fe45 	bl	8006238 <__aeabi_dcmple>
 80055ae:	b180      	cbz	r0, 80055d2 <ceil+0x66>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:890

    //  If arg is ±0, it is returned, unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80055b0:	4629      	mov	r1, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 fe9c 	bl	80062f0 <__aeabi_d2f>
 80055b8:	2100      	movs	r1, #0
 80055ba:	4606      	mov	r6, r0
 80055bc:	f001 fa8e 	bl	8006adc <qfp_fcmp>
 80055c0:	b138      	cbz	r0, 80055d2 <ceil+0x66>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:893

    //  qfp_float2int() behaves like floor().  Always add one.
    int floored = qfp_float2int(x);
 80055c2:	4630      	mov	r0, r6
 80055c4:	f001 fb24 	bl	8006c10 <qfp_float2int>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:894
    return floored + 1;
 80055c8:	3001      	adds	r0, #1
 80055ca:	f000 fb4f 	bl	8005c6c <__aeabi_i2d>
 80055ce:	4604      	mov	r4, r0
 80055d0:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:895
}
 80055d2:	4620      	mov	r0, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:884
    if (isnan(x)) { return NAN; }
 80055d8:	2400      	movs	r4, #0
 80055da:	4d03      	ldr	r5, [pc, #12]	; (80055e8 <ceil+0x7c>)
 80055dc:	e7f9      	b.n	80055d2 <ceil+0x66>
 80055de:	bf00      	nop
 80055e0:	2000024a 	.word	0x2000024a
 80055e4:	7fefffff 	.word	0x7fefffff
 80055e8:	7ff80000 	.word	0x7ff80000

080055ec <fmod>:
fmod():
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:905
// ceil(2205.1969) = 2206.000000
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
 80055ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	4617      	mov	r7, r2
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:906
    float_usage[USAGE_FMOD]++;
 80055f6:	4a4b      	ldr	r2, [pc, #300]	; (8005724 <fmod+0x138>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:905
double fmod(double x, double y) { 
 80055f8:	461e      	mov	r6, r3
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:906
    float_usage[USAGE_FMOD]++;
 80055fa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80055fe:	3301      	adds	r3, #1
 8005600:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:908
    // If either argument is NaN, NaN is returned
    if (isnan(x) || isnan(y)) { return NAN; }
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4620      	mov	r0, r4
 800560a:	4629      	mov	r1, r5
 800560c:	f000 fe32 	bl	8006274 <__aeabi_dcmpun>
 8005610:	b128      	cbz	r0, 800561e <fmod+0x32>
 8005612:	2400      	movs	r4, #0
 8005614:	4d44      	ldr	r5, [pc, #272]	; (8005728 <fmod+0x13c>)
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:935
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }

    // Composes a floating point value with the magnitude of result and the sign of x.
    // Was: return copysign(result, x);
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
}
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:908 (discriminator 2)
    if (isnan(x) || isnan(y)) { return NAN; }
 800561e:	463a      	mov	r2, r7
 8005620:	4633      	mov	r3, r6
 8005622:	4638      	mov	r0, r7
 8005624:	4631      	mov	r1, r6
 8005626:	f000 fe25 	bl	8006274 <__aeabi_dcmpun>
 800562a:	2800      	cmp	r0, #0
 800562c:	d1f1      	bne.n	8005612 <fmod+0x26>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:911
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 800562e:	4629      	mov	r1, r5
 8005630:	4620      	mov	r0, r4
 8005632:	f000 fe5d 	bl	80062f0 <__aeabi_d2f>
 8005636:	2100      	movs	r1, #0
 8005638:	4680      	mov	r8, r0
 800563a:	f001 fa4f 	bl	8006adc <qfp_fcmp>
 800563e:	4681      	mov	r9, r0
 8005640:	2800      	cmp	r0, #0
 8005642:	d062      	beq.n	800570a <fmod+0x11e>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:914
    if (isinf(x) && !isnan(y)) { return NAN; }
 8005644:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8005648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800564c:	4b37      	ldr	r3, [pc, #220]	; (800572c <fmod+0x140>)
 800564e:	4620      	mov	r0, r4
 8005650:	4649      	mov	r1, r9
 8005652:	f000 fe0f 	bl	8006274 <__aeabi_dcmpun>
 8005656:	b940      	cbnz	r0, 800566a <fmod+0x7e>
 8005658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800565c:	4b33      	ldr	r3, [pc, #204]	; (800572c <fmod+0x140>)
 800565e:	4620      	mov	r0, r4
 8005660:	4649      	mov	r1, r9
 8005662:	f000 fde9 	bl	8006238 <__aeabi_dcmple>
 8005666:	2800      	cmp	r0, #0
 8005668:	d0d3      	beq.n	8005612 <fmod+0x26>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:917
    if (qfp_fcmp(y, 0) == 0 && !isnan(x)) { return NAN; }
 800566a:	4631      	mov	r1, r6
 800566c:	4638      	mov	r0, r7
 800566e:	f000 fe3f 	bl	80062f0 <__aeabi_d2f>
 8005672:	2100      	movs	r1, #0
 8005674:	f001 fa32 	bl	8006adc <qfp_fcmp>
 8005678:	2800      	cmp	r0, #0
 800567a:	d0ca      	beq.n	8005612 <fmod+0x26>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:920
    if (isinf(y) && !isinf(x)) { return x; }
 800567c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8005680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005684:	4b29      	ldr	r3, [pc, #164]	; (800572c <fmod+0x140>)
 8005686:	4638      	mov	r0, r7
 8005688:	4631      	mov	r1, r6
 800568a:	f000 fdf3 	bl	8006274 <__aeabi_dcmpun>
 800568e:	b940      	cbnz	r0, 80056a2 <fmod+0xb6>
 8005690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005694:	4b25      	ldr	r3, [pc, #148]	; (800572c <fmod+0x140>)
 8005696:	4638      	mov	r0, r7
 8005698:	4631      	mov	r1, r6
 800569a:	f000 fdcd 	bl	8006238 <__aeabi_dcmple>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d0b9      	beq.n	8005616 <fmod+0x2a>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:926
    double n = trunc(qfp_fdiv_fast(xabs, yabs));
 80056a2:	4620      	mov	r0, r4
 80056a4:	4649      	mov	r1, r9
 80056a6:	f000 fe23 	bl	80062f0 <__aeabi_d2f>
 80056aa:	4631      	mov	r1, r6
 80056ac:	4604      	mov	r4, r0
 80056ae:	4638      	mov	r0, r7
 80056b0:	f000 fe1e 	bl	80062f0 <__aeabi_d2f>
 80056b4:	4605      	mov	r5, r0
 80056b6:	4601      	mov	r1, r0
 80056b8:	4620      	mov	r0, r4
 80056ba:	f001 fa46 	bl	8006b4a <qfp_fdiv_fast>
 80056be:	f000 fae7 	bl	8005c90 <__aeabi_f2d>
 80056c2:	f7ff fed5 	bl	8005470 <trunc>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:927
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 80056c6:	f000 fe13 	bl	80062f0 <__aeabi_d2f>
 80056ca:	4629      	mov	r1, r5
 80056cc:	f001 fa14 	bl	8006af8 <qfp_fmul>
 80056d0:	4601      	mov	r1, r0
 80056d2:	4620      	mov	r0, r4
 80056d4:	f001 f9de 	bl	8006a94 <qfp_fsub>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:930
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 80056d8:	2100      	movs	r1, #0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:927
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 80056da:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:930
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 80056dc:	f001 f9fe 	bl	8006adc <qfp_fcmp>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	da04      	bge.n	80056ee <fmod+0x102>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:930 (discriminator 1)
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	f001 f9d7 	bl	8006a9a <qfp_fadd>
 80056ec:	4604      	mov	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:934
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
 80056ee:	2100      	movs	r1, #0
 80056f0:	4640      	mov	r0, r8
 80056f2:	f001 f9f3 	bl	8006adc <qfp_fcmp>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	bfb8      	it	lt
 80056fa:	f104 4400 	addlt.w	r4, r4, #2147483648	; 0x80000000
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 fac6 	bl	8005c90 <__aeabi_f2d>
 8005704:	4604      	mov	r4, r0
 8005706:	460d      	mov	r5, r1
 8005708:	e785      	b.n	8005616 <fmod+0x2a>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:911 (discriminator 1)
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 800570a:	4631      	mov	r1, r6
 800570c:	4638      	mov	r0, r7
 800570e:	f000 fdef 	bl	80062f0 <__aeabi_d2f>
 8005712:	2100      	movs	r1, #0
 8005714:	f001 f9e2 	bl	8006adc <qfp_fcmp>
 8005718:	2800      	cmp	r0, #0
 800571a:	d093      	beq.n	8005644 <fmod+0x58>
/Users/Luppy/stm32bluepill-unittest/lib/nano-float/src/functions.c:911
 800571c:	464c      	mov	r4, r9
 800571e:	464d      	mov	r5, r9
 8005720:	e779      	b.n	8005616 <fmod+0x2a>
 8005722:	bf00      	nop
 8005724:	2000024a 	.word	0x2000024a
 8005728:	7ff80000 	.word	0x7ff80000
 800572c:	7fefffff 	.word	0x7fefffff

08005730 <memcpy>:
memcpy():
 8005730:	4684      	mov	ip, r0
 8005732:	ea41 0300 	orr.w	r3, r1, r0
 8005736:	f013 0303 	ands.w	r3, r3, #3
 800573a:	d149      	bne.n	80057d0 <memcpy+0xa0>
 800573c:	3a40      	subs	r2, #64	; 0x40
 800573e:	d323      	bcc.n	8005788 <memcpy+0x58>
 8005740:	680b      	ldr	r3, [r1, #0]
 8005742:	6003      	str	r3, [r0, #0]
 8005744:	684b      	ldr	r3, [r1, #4]
 8005746:	6043      	str	r3, [r0, #4]
 8005748:	688b      	ldr	r3, [r1, #8]
 800574a:	6083      	str	r3, [r0, #8]
 800574c:	68cb      	ldr	r3, [r1, #12]
 800574e:	60c3      	str	r3, [r0, #12]
 8005750:	690b      	ldr	r3, [r1, #16]
 8005752:	6103      	str	r3, [r0, #16]
 8005754:	694b      	ldr	r3, [r1, #20]
 8005756:	6143      	str	r3, [r0, #20]
 8005758:	698b      	ldr	r3, [r1, #24]
 800575a:	6183      	str	r3, [r0, #24]
 800575c:	69cb      	ldr	r3, [r1, #28]
 800575e:	61c3      	str	r3, [r0, #28]
 8005760:	6a0b      	ldr	r3, [r1, #32]
 8005762:	6203      	str	r3, [r0, #32]
 8005764:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005766:	6243      	str	r3, [r0, #36]	; 0x24
 8005768:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800576a:	6283      	str	r3, [r0, #40]	; 0x28
 800576c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800576e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005770:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005772:	6303      	str	r3, [r0, #48]	; 0x30
 8005774:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005776:	6343      	str	r3, [r0, #52]	; 0x34
 8005778:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800577a:	6383      	str	r3, [r0, #56]	; 0x38
 800577c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800577e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005780:	3040      	adds	r0, #64	; 0x40
 8005782:	3140      	adds	r1, #64	; 0x40
 8005784:	3a40      	subs	r2, #64	; 0x40
 8005786:	d2db      	bcs.n	8005740 <memcpy+0x10>
 8005788:	3230      	adds	r2, #48	; 0x30
 800578a:	d30b      	bcc.n	80057a4 <memcpy+0x74>
 800578c:	680b      	ldr	r3, [r1, #0]
 800578e:	6003      	str	r3, [r0, #0]
 8005790:	684b      	ldr	r3, [r1, #4]
 8005792:	6043      	str	r3, [r0, #4]
 8005794:	688b      	ldr	r3, [r1, #8]
 8005796:	6083      	str	r3, [r0, #8]
 8005798:	68cb      	ldr	r3, [r1, #12]
 800579a:	60c3      	str	r3, [r0, #12]
 800579c:	3010      	adds	r0, #16
 800579e:	3110      	adds	r1, #16
 80057a0:	3a10      	subs	r2, #16
 80057a2:	d2f3      	bcs.n	800578c <memcpy+0x5c>
 80057a4:	320c      	adds	r2, #12
 80057a6:	d305      	bcc.n	80057b4 <memcpy+0x84>
 80057a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80057ac:	f840 3b04 	str.w	r3, [r0], #4
 80057b0:	3a04      	subs	r2, #4
 80057b2:	d2f9      	bcs.n	80057a8 <memcpy+0x78>
 80057b4:	3204      	adds	r2, #4
 80057b6:	d008      	beq.n	80057ca <memcpy+0x9a>
 80057b8:	07d2      	lsls	r2, r2, #31
 80057ba:	bf1c      	itt	ne
 80057bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80057c0:	f800 3b01 	strbne.w	r3, [r0], #1
 80057c4:	d301      	bcc.n	80057ca <memcpy+0x9a>
 80057c6:	880b      	ldrh	r3, [r1, #0]
 80057c8:	8003      	strh	r3, [r0, #0]
 80057ca:	4660      	mov	r0, ip
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	2a08      	cmp	r2, #8
 80057d2:	d313      	bcc.n	80057fc <memcpy+0xcc>
 80057d4:	078b      	lsls	r3, r1, #30
 80057d6:	d0b1      	beq.n	800573c <memcpy+0xc>
 80057d8:	f010 0303 	ands.w	r3, r0, #3
 80057dc:	d0ae      	beq.n	800573c <memcpy+0xc>
 80057de:	f1c3 0304 	rsb	r3, r3, #4
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	07db      	lsls	r3, r3, #31
 80057e6:	bf1c      	itt	ne
 80057e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80057ec:	f800 3b01 	strbne.w	r3, [r0], #1
 80057f0:	d3a4      	bcc.n	800573c <memcpy+0xc>
 80057f2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80057f6:	f820 3b02 	strh.w	r3, [r0], #2
 80057fa:	e79f      	b.n	800573c <memcpy+0xc>
 80057fc:	3a04      	subs	r2, #4
 80057fe:	d3d9      	bcc.n	80057b4 <memcpy+0x84>
 8005800:	3a01      	subs	r2, #1
 8005802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005806:	f800 3b01 	strb.w	r3, [r0], #1
 800580a:	d2f9      	bcs.n	8005800 <memcpy+0xd0>
 800580c:	780b      	ldrb	r3, [r1, #0]
 800580e:	7003      	strb	r3, [r0, #0]
 8005810:	784b      	ldrb	r3, [r1, #1]
 8005812:	7043      	strb	r3, [r0, #1]
 8005814:	788b      	ldrb	r3, [r1, #2]
 8005816:	7083      	strb	r3, [r0, #2]
 8005818:	4660      	mov	r0, ip
 800581a:	4770      	bx	lr

0800581c <memset>:
memset():
 800581c:	b4f0      	push	{r4, r5, r6, r7}
 800581e:	0786      	lsls	r6, r0, #30
 8005820:	d043      	beq.n	80058aa <memset+0x8e>
 8005822:	1e54      	subs	r4, r2, #1
 8005824:	2a00      	cmp	r2, #0
 8005826:	d03e      	beq.n	80058a6 <memset+0x8a>
 8005828:	b2ca      	uxtb	r2, r1
 800582a:	4603      	mov	r3, r0
 800582c:	e002      	b.n	8005834 <memset+0x18>
 800582e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8005832:	d338      	bcc.n	80058a6 <memset+0x8a>
 8005834:	f803 2b01 	strb.w	r2, [r3], #1
 8005838:	079d      	lsls	r5, r3, #30
 800583a:	d1f8      	bne.n	800582e <memset+0x12>
 800583c:	2c03      	cmp	r4, #3
 800583e:	d92b      	bls.n	8005898 <memset+0x7c>
 8005840:	b2cd      	uxtb	r5, r1
 8005842:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005846:	2c0f      	cmp	r4, #15
 8005848:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800584c:	d916      	bls.n	800587c <memset+0x60>
 800584e:	f1a4 0710 	sub.w	r7, r4, #16
 8005852:	093f      	lsrs	r7, r7, #4
 8005854:	f103 0620 	add.w	r6, r3, #32
 8005858:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800585c:	f103 0210 	add.w	r2, r3, #16
 8005860:	e942 5504 	strd	r5, r5, [r2, #-16]
 8005864:	e942 5502 	strd	r5, r5, [r2, #-8]
 8005868:	3210      	adds	r2, #16
 800586a:	42b2      	cmp	r2, r6
 800586c:	d1f8      	bne.n	8005860 <memset+0x44>
 800586e:	f004 040f 	and.w	r4, r4, #15
 8005872:	3701      	adds	r7, #1
 8005874:	2c03      	cmp	r4, #3
 8005876:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800587a:	d90d      	bls.n	8005898 <memset+0x7c>
 800587c:	461e      	mov	r6, r3
 800587e:	4622      	mov	r2, r4
 8005880:	3a04      	subs	r2, #4
 8005882:	2a03      	cmp	r2, #3
 8005884:	f846 5b04 	str.w	r5, [r6], #4
 8005888:	d8fa      	bhi.n	8005880 <memset+0x64>
 800588a:	1f22      	subs	r2, r4, #4
 800588c:	f022 0203 	bic.w	r2, r2, #3
 8005890:	3204      	adds	r2, #4
 8005892:	4413      	add	r3, r2
 8005894:	f004 0403 	and.w	r4, r4, #3
 8005898:	b12c      	cbz	r4, 80058a6 <memset+0x8a>
 800589a:	b2c9      	uxtb	r1, r1
 800589c:	441c      	add	r4, r3
 800589e:	f803 1b01 	strb.w	r1, [r3], #1
 80058a2:	429c      	cmp	r4, r3
 80058a4:	d1fb      	bne.n	800589e <memset+0x82>
 80058a6:	bcf0      	pop	{r4, r5, r6, r7}
 80058a8:	4770      	bx	lr
 80058aa:	4614      	mov	r4, r2
 80058ac:	4603      	mov	r3, r0
 80058ae:	e7c5      	b.n	800583c <memset+0x20>

080058b0 <strcpy>:
strcpy():
 80058b0:	ea80 0201 	eor.w	r2, r0, r1
 80058b4:	4684      	mov	ip, r0
 80058b6:	f012 0f03 	tst.w	r2, #3
 80058ba:	d14f      	bne.n	800595c <strcpy+0xac>
 80058bc:	f011 0f03 	tst.w	r1, #3
 80058c0:	d132      	bne.n	8005928 <strcpy+0x78>
 80058c2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80058c6:	f011 0f04 	tst.w	r1, #4
 80058ca:	f851 3b04 	ldr.w	r3, [r1], #4
 80058ce:	d00b      	beq.n	80058e8 <strcpy+0x38>
 80058d0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80058d4:	439a      	bics	r2, r3
 80058d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80058da:	bf04      	itt	eq
 80058dc:	f84c 3b04 	streq.w	r3, [ip], #4
 80058e0:	f851 3b04 	ldreq.w	r3, [r1], #4
 80058e4:	d116      	bne.n	8005914 <strcpy+0x64>
 80058e6:	bf00      	nop
 80058e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80058ec:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80058f0:	439a      	bics	r2, r3
 80058f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80058f6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80058fa:	d10b      	bne.n	8005914 <strcpy+0x64>
 80058fc:	f84c 3b04 	str.w	r3, [ip], #4
 8005900:	43a2      	bics	r2, r4
 8005902:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005906:	bf04      	itt	eq
 8005908:	f851 3b04 	ldreq.w	r3, [r1], #4
 800590c:	f84c 4b04 	streq.w	r4, [ip], #4
 8005910:	d0ea      	beq.n	80058e8 <strcpy+0x38>
 8005912:	4623      	mov	r3, r4
 8005914:	f80c 3b01 	strb.w	r3, [ip], #1
 8005918:	f013 0fff 	tst.w	r3, #255	; 0xff
 800591c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8005920:	d1f8      	bne.n	8005914 <strcpy+0x64>
 8005922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	f011 0f01 	tst.w	r1, #1
 800592c:	d006      	beq.n	800593c <strcpy+0x8c>
 800592e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005932:	f80c 2b01 	strb.w	r2, [ip], #1
 8005936:	2a00      	cmp	r2, #0
 8005938:	bf08      	it	eq
 800593a:	4770      	bxeq	lr
 800593c:	f011 0f02 	tst.w	r1, #2
 8005940:	d0bf      	beq.n	80058c2 <strcpy+0x12>
 8005942:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005946:	f012 0fff 	tst.w	r2, #255	; 0xff
 800594a:	bf16      	itet	ne
 800594c:	f82c 2b02 	strhne.w	r2, [ip], #2
 8005950:	f88c 2000 	strbeq.w	r2, [ip]
 8005954:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8005958:	d1b3      	bne.n	80058c2 <strcpy+0x12>
 800595a:	4770      	bx	lr
 800595c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005960:	f80c 2b01 	strb.w	r2, [ip], #1
 8005964:	2a00      	cmp	r2, #0
 8005966:	d1f9      	bne.n	800595c <strcpy+0xac>
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop

0800596c <strlen>:
strlen():
 800596c:	f020 0103 	bic.w	r1, r0, #3
 8005970:	f010 0003 	ands.w	r0, r0, #3
 8005974:	f1c0 0000 	rsb	r0, r0, #0
 8005978:	f851 3b04 	ldr.w	r3, [r1], #4
 800597c:	f100 0c04 	add.w	ip, r0, #4
 8005980:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005984:	f06f 0200 	mvn.w	r2, #0
 8005988:	bf1c      	itt	ne
 800598a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800598e:	4313      	orrne	r3, r2
 8005990:	f04f 0c01 	mov.w	ip, #1
 8005994:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8005998:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800599c:	eba3 020c 	sub.w	r2, r3, ip
 80059a0:	ea22 0203 	bic.w	r2, r2, r3
 80059a4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80059a8:	bf04      	itt	eq
 80059aa:	f851 3b04 	ldreq.w	r3, [r1], #4
 80059ae:	3004      	addeq	r0, #4
 80059b0:	d0f4      	beq.n	800599c <strlen+0x30>
 80059b2:	f1c2 0100 	rsb	r1, r2, #0
 80059b6:	ea02 0201 	and.w	r2, r2, r1
 80059ba:	fab2 f282 	clz	r2, r2
 80059be:	f1c2 021f 	rsb	r2, r2, #31
 80059c2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80059c6:	4770      	bx	lr

080059c8 <__aeabi_drsub>:
__aeabi_drsub():
 80059c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80059cc:	e002      	b.n	80059d4 <__adddf3>
 80059ce:	bf00      	nop

080059d0 <__aeabi_dsub>:
__subdf3():
 80059d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080059d4 <__adddf3>:
__aeabi_dadd():
 80059d4:	b530      	push	{r4, r5, lr}
 80059d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80059da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80059de:	ea94 0f05 	teq	r4, r5
 80059e2:	bf08      	it	eq
 80059e4:	ea90 0f02 	teqeq	r0, r2
 80059e8:	bf1f      	itttt	ne
 80059ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80059ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80059f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80059f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80059fa:	f000 80e2 	beq.w	8005bc2 <__adddf3+0x1ee>
 80059fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005a02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005a06:	bfb8      	it	lt
 8005a08:	426d      	neglt	r5, r5
 8005a0a:	dd0c      	ble.n	8005a26 <__adddf3+0x52>
 8005a0c:	442c      	add	r4, r5
 8005a0e:	ea80 0202 	eor.w	r2, r0, r2
 8005a12:	ea81 0303 	eor.w	r3, r1, r3
 8005a16:	ea82 0000 	eor.w	r0, r2, r0
 8005a1a:	ea83 0101 	eor.w	r1, r3, r1
 8005a1e:	ea80 0202 	eor.w	r2, r0, r2
 8005a22:	ea81 0303 	eor.w	r3, r1, r3
 8005a26:	2d36      	cmp	r5, #54	; 0x36
 8005a28:	bf88      	it	hi
 8005a2a:	bd30      	pophi	{r4, r5, pc}
 8005a2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005a30:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005a34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005a38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005a3c:	d002      	beq.n	8005a44 <__adddf3+0x70>
 8005a3e:	4240      	negs	r0, r0
 8005a40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005a44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005a48:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005a4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005a50:	d002      	beq.n	8005a58 <__adddf3+0x84>
 8005a52:	4252      	negs	r2, r2
 8005a54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005a58:	ea94 0f05 	teq	r4, r5
 8005a5c:	f000 80a7 	beq.w	8005bae <__adddf3+0x1da>
 8005a60:	f1a4 0401 	sub.w	r4, r4, #1
 8005a64:	f1d5 0e20 	rsbs	lr, r5, #32
 8005a68:	db0d      	blt.n	8005a86 <__adddf3+0xb2>
 8005a6a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005a6e:	fa22 f205 	lsr.w	r2, r2, r5
 8005a72:	1880      	adds	r0, r0, r2
 8005a74:	f141 0100 	adc.w	r1, r1, #0
 8005a78:	fa03 f20e 	lsl.w	r2, r3, lr
 8005a7c:	1880      	adds	r0, r0, r2
 8005a7e:	fa43 f305 	asr.w	r3, r3, r5
 8005a82:	4159      	adcs	r1, r3
 8005a84:	e00e      	b.n	8005aa4 <__adddf3+0xd0>
 8005a86:	f1a5 0520 	sub.w	r5, r5, #32
 8005a8a:	f10e 0e20 	add.w	lr, lr, #32
 8005a8e:	2a01      	cmp	r2, #1
 8005a90:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005a94:	bf28      	it	cs
 8005a96:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005a9a:	fa43 f305 	asr.w	r3, r3, r5
 8005a9e:	18c0      	adds	r0, r0, r3
 8005aa0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005aa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005aa8:	d507      	bpl.n	8005aba <__adddf3+0xe6>
 8005aaa:	f04f 0e00 	mov.w	lr, #0
 8005aae:	f1dc 0c00 	rsbs	ip, ip, #0
 8005ab2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005ab6:	eb6e 0101 	sbc.w	r1, lr, r1
 8005aba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005abe:	d31b      	bcc.n	8005af8 <__adddf3+0x124>
 8005ac0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005ac4:	d30c      	bcc.n	8005ae0 <__adddf3+0x10c>
 8005ac6:	0849      	lsrs	r1, r1, #1
 8005ac8:	ea5f 0030 	movs.w	r0, r0, rrx
 8005acc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005ad0:	f104 0401 	add.w	r4, r4, #1
 8005ad4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ad8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005adc:	f080 809a 	bcs.w	8005c14 <__adddf3+0x240>
 8005ae0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005ae4:	bf08      	it	eq
 8005ae6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005aea:	f150 0000 	adcs.w	r0, r0, #0
 8005aee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005af2:	ea41 0105 	orr.w	r1, r1, r5
 8005af6:	bd30      	pop	{r4, r5, pc}
 8005af8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005afc:	4140      	adcs	r0, r0
 8005afe:	eb41 0101 	adc.w	r1, r1, r1
 8005b02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005b06:	f1a4 0401 	sub.w	r4, r4, #1
 8005b0a:	d1e9      	bne.n	8005ae0 <__adddf3+0x10c>
 8005b0c:	f091 0f00 	teq	r1, #0
 8005b10:	bf04      	itt	eq
 8005b12:	4601      	moveq	r1, r0
 8005b14:	2000      	moveq	r0, #0
 8005b16:	fab1 f381 	clz	r3, r1
 8005b1a:	bf08      	it	eq
 8005b1c:	3320      	addeq	r3, #32
 8005b1e:	f1a3 030b 	sub.w	r3, r3, #11
 8005b22:	f1b3 0220 	subs.w	r2, r3, #32
 8005b26:	da0c      	bge.n	8005b42 <__adddf3+0x16e>
 8005b28:	320c      	adds	r2, #12
 8005b2a:	dd08      	ble.n	8005b3e <__adddf3+0x16a>
 8005b2c:	f102 0c14 	add.w	ip, r2, #20
 8005b30:	f1c2 020c 	rsb	r2, r2, #12
 8005b34:	fa01 f00c 	lsl.w	r0, r1, ip
 8005b38:	fa21 f102 	lsr.w	r1, r1, r2
 8005b3c:	e00c      	b.n	8005b58 <__adddf3+0x184>
 8005b3e:	f102 0214 	add.w	r2, r2, #20
 8005b42:	bfd8      	it	le
 8005b44:	f1c2 0c20 	rsble	ip, r2, #32
 8005b48:	fa01 f102 	lsl.w	r1, r1, r2
 8005b4c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005b50:	bfdc      	itt	le
 8005b52:	ea41 010c 	orrle.w	r1, r1, ip
 8005b56:	4090      	lslle	r0, r2
 8005b58:	1ae4      	subs	r4, r4, r3
 8005b5a:	bfa2      	ittt	ge
 8005b5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005b60:	4329      	orrge	r1, r5
 8005b62:	bd30      	popge	{r4, r5, pc}
 8005b64:	ea6f 0404 	mvn.w	r4, r4
 8005b68:	3c1f      	subs	r4, #31
 8005b6a:	da1c      	bge.n	8005ba6 <__adddf3+0x1d2>
 8005b6c:	340c      	adds	r4, #12
 8005b6e:	dc0e      	bgt.n	8005b8e <__adddf3+0x1ba>
 8005b70:	f104 0414 	add.w	r4, r4, #20
 8005b74:	f1c4 0220 	rsb	r2, r4, #32
 8005b78:	fa20 f004 	lsr.w	r0, r0, r4
 8005b7c:	fa01 f302 	lsl.w	r3, r1, r2
 8005b80:	ea40 0003 	orr.w	r0, r0, r3
 8005b84:	fa21 f304 	lsr.w	r3, r1, r4
 8005b88:	ea45 0103 	orr.w	r1, r5, r3
 8005b8c:	bd30      	pop	{r4, r5, pc}
 8005b8e:	f1c4 040c 	rsb	r4, r4, #12
 8005b92:	f1c4 0220 	rsb	r2, r4, #32
 8005b96:	fa20 f002 	lsr.w	r0, r0, r2
 8005b9a:	fa01 f304 	lsl.w	r3, r1, r4
 8005b9e:	ea40 0003 	orr.w	r0, r0, r3
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	bd30      	pop	{r4, r5, pc}
 8005ba6:	fa21 f004 	lsr.w	r0, r1, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	bd30      	pop	{r4, r5, pc}
 8005bae:	f094 0f00 	teq	r4, #0
 8005bb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005bb6:	bf06      	itte	eq
 8005bb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005bbc:	3401      	addeq	r4, #1
 8005bbe:	3d01      	subne	r5, #1
 8005bc0:	e74e      	b.n	8005a60 <__adddf3+0x8c>
 8005bc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005bc6:	bf18      	it	ne
 8005bc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005bcc:	d029      	beq.n	8005c22 <__adddf3+0x24e>
 8005bce:	ea94 0f05 	teq	r4, r5
 8005bd2:	bf08      	it	eq
 8005bd4:	ea90 0f02 	teqeq	r0, r2
 8005bd8:	d005      	beq.n	8005be6 <__adddf3+0x212>
 8005bda:	ea54 0c00 	orrs.w	ip, r4, r0
 8005bde:	bf04      	itt	eq
 8005be0:	4619      	moveq	r1, r3
 8005be2:	4610      	moveq	r0, r2
 8005be4:	bd30      	pop	{r4, r5, pc}
 8005be6:	ea91 0f03 	teq	r1, r3
 8005bea:	bf1e      	ittt	ne
 8005bec:	2100      	movne	r1, #0
 8005bee:	2000      	movne	r0, #0
 8005bf0:	bd30      	popne	{r4, r5, pc}
 8005bf2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005bf6:	d105      	bne.n	8005c04 <__adddf3+0x230>
 8005bf8:	0040      	lsls	r0, r0, #1
 8005bfa:	4149      	adcs	r1, r1
 8005bfc:	bf28      	it	cs
 8005bfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005c02:	bd30      	pop	{r4, r5, pc}
 8005c04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005c08:	bf3c      	itt	cc
 8005c0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005c0e:	bd30      	popcc	{r4, r5, pc}
 8005c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005c14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005c18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c1c:	f04f 0000 	mov.w	r0, #0
 8005c20:	bd30      	pop	{r4, r5, pc}
 8005c22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005c26:	bf1a      	itte	ne
 8005c28:	4619      	movne	r1, r3
 8005c2a:	4610      	movne	r0, r2
 8005c2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005c30:	bf1c      	itt	ne
 8005c32:	460b      	movne	r3, r1
 8005c34:	4602      	movne	r2, r0
 8005c36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005c3a:	bf06      	itte	eq
 8005c3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005c40:	ea91 0f03 	teqeq	r1, r3
 8005c44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005c48:	bd30      	pop	{r4, r5, pc}
 8005c4a:	bf00      	nop

08005c4c <__aeabi_ui2d>:
__floatunsidf():
 8005c4c:	f090 0f00 	teq	r0, #0
 8005c50:	bf04      	itt	eq
 8005c52:	2100      	moveq	r1, #0
 8005c54:	4770      	bxeq	lr
 8005c56:	b530      	push	{r4, r5, lr}
 8005c58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005c5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005c60:	f04f 0500 	mov.w	r5, #0
 8005c64:	f04f 0100 	mov.w	r1, #0
 8005c68:	e750      	b.n	8005b0c <__adddf3+0x138>
 8005c6a:	bf00      	nop

08005c6c <__aeabi_i2d>:
__aeabi_i2d():
 8005c6c:	f090 0f00 	teq	r0, #0
 8005c70:	bf04      	itt	eq
 8005c72:	2100      	moveq	r1, #0
 8005c74:	4770      	bxeq	lr
 8005c76:	b530      	push	{r4, r5, lr}
 8005c78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005c7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005c80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005c84:	bf48      	it	mi
 8005c86:	4240      	negmi	r0, r0
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	e73e      	b.n	8005b0c <__adddf3+0x138>
 8005c8e:	bf00      	nop

08005c90 <__aeabi_f2d>:
__aeabi_f2d():
 8005c90:	0042      	lsls	r2, r0, #1
 8005c92:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005c96:	ea4f 0131 	mov.w	r1, r1, rrx
 8005c9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005c9e:	bf1f      	itttt	ne
 8005ca0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005ca4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005ca8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005cac:	4770      	bxne	lr
 8005cae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005cb2:	bf08      	it	eq
 8005cb4:	4770      	bxeq	lr
 8005cb6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005cba:	bf04      	itt	eq
 8005cbc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005cc0:	4770      	bxeq	lr
 8005cc2:	b530      	push	{r4, r5, lr}
 8005cc4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005cc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ccc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005cd0:	e71c      	b.n	8005b0c <__adddf3+0x138>
 8005cd2:	bf00      	nop

08005cd4 <__aeabi_ul2d>:
__floatundidf():
 8005cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8005cd8:	bf08      	it	eq
 8005cda:	4770      	bxeq	lr
 8005cdc:	b530      	push	{r4, r5, lr}
 8005cde:	f04f 0500 	mov.w	r5, #0
 8005ce2:	e00a      	b.n	8005cfa <__aeabi_l2d+0x16>

08005ce4 <__aeabi_l2d>:
__aeabi_l2d():
 8005ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8005ce8:	bf08      	it	eq
 8005cea:	4770      	bxeq	lr
 8005cec:	b530      	push	{r4, r5, lr}
 8005cee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005cf2:	d502      	bpl.n	8005cfa <__aeabi_l2d+0x16>
 8005cf4:	4240      	negs	r0, r0
 8005cf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005cfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005cfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005d02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005d06:	f43f aed8 	beq.w	8005aba <__adddf3+0xe6>
 8005d0a:	f04f 0203 	mov.w	r2, #3
 8005d0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005d12:	bf18      	it	ne
 8005d14:	3203      	addne	r2, #3
 8005d16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005d1a:	bf18      	it	ne
 8005d1c:	3203      	addne	r2, #3
 8005d1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005d22:	f1c2 0320 	rsb	r3, r2, #32
 8005d26:	fa00 fc03 	lsl.w	ip, r0, r3
 8005d2a:	fa20 f002 	lsr.w	r0, r0, r2
 8005d2e:	fa01 fe03 	lsl.w	lr, r1, r3
 8005d32:	ea40 000e 	orr.w	r0, r0, lr
 8005d36:	fa21 f102 	lsr.w	r1, r1, r2
 8005d3a:	4414      	add	r4, r2
 8005d3c:	e6bd      	b.n	8005aba <__adddf3+0xe6>
 8005d3e:	bf00      	nop

08005d40 <__aeabi_dmul>:
__muldf3():
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005d46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005d4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005d4e:	bf1d      	ittte	ne
 8005d50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005d54:	ea94 0f0c 	teqne	r4, ip
 8005d58:	ea95 0f0c 	teqne	r5, ip
 8005d5c:	f000 f8de 	bleq	8005f1c <__aeabi_dmul+0x1dc>
 8005d60:	442c      	add	r4, r5
 8005d62:	ea81 0603 	eor.w	r6, r1, r3
 8005d66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005d6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005d6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005d72:	bf18      	it	ne
 8005d74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d80:	d038      	beq.n	8005df4 <__aeabi_dmul+0xb4>
 8005d82:	fba0 ce02 	umull	ip, lr, r0, r2
 8005d86:	f04f 0500 	mov.w	r5, #0
 8005d8a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005d8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005d92:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005d96:	f04f 0600 	mov.w	r6, #0
 8005d9a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005d9e:	f09c 0f00 	teq	ip, #0
 8005da2:	bf18      	it	ne
 8005da4:	f04e 0e01 	orrne.w	lr, lr, #1
 8005da8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005dac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005db0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005db4:	d204      	bcs.n	8005dc0 <__aeabi_dmul+0x80>
 8005db6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005dba:	416d      	adcs	r5, r5
 8005dbc:	eb46 0606 	adc.w	r6, r6, r6
 8005dc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005dc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005dc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005dcc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005dd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005dd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005dd8:	bf88      	it	hi
 8005dda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005dde:	d81e      	bhi.n	8005e1e <__aeabi_dmul+0xde>
 8005de0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005de4:	bf08      	it	eq
 8005de6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005dea:	f150 0000 	adcs.w	r0, r0, #0
 8005dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005df2:	bd70      	pop	{r4, r5, r6, pc}
 8005df4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005df8:	ea46 0101 	orr.w	r1, r6, r1
 8005dfc:	ea40 0002 	orr.w	r0, r0, r2
 8005e00:	ea81 0103 	eor.w	r1, r1, r3
 8005e04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005e08:	bfc2      	ittt	gt
 8005e0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005e0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005e12:	bd70      	popgt	{r4, r5, r6, pc}
 8005e14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005e18:	f04f 0e00 	mov.w	lr, #0
 8005e1c:	3c01      	subs	r4, #1
 8005e1e:	f300 80ab 	bgt.w	8005f78 <__aeabi_dmul+0x238>
 8005e22:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005e26:	bfde      	ittt	le
 8005e28:	2000      	movle	r0, #0
 8005e2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005e2e:	bd70      	pople	{r4, r5, r6, pc}
 8005e30:	f1c4 0400 	rsb	r4, r4, #0
 8005e34:	3c20      	subs	r4, #32
 8005e36:	da35      	bge.n	8005ea4 <__aeabi_dmul+0x164>
 8005e38:	340c      	adds	r4, #12
 8005e3a:	dc1b      	bgt.n	8005e74 <__aeabi_dmul+0x134>
 8005e3c:	f104 0414 	add.w	r4, r4, #20
 8005e40:	f1c4 0520 	rsb	r5, r4, #32
 8005e44:	fa00 f305 	lsl.w	r3, r0, r5
 8005e48:	fa20 f004 	lsr.w	r0, r0, r4
 8005e4c:	fa01 f205 	lsl.w	r2, r1, r5
 8005e50:	ea40 0002 	orr.w	r0, r0, r2
 8005e54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005e58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005e60:	fa21 f604 	lsr.w	r6, r1, r4
 8005e64:	eb42 0106 	adc.w	r1, r2, r6
 8005e68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005e6c:	bf08      	it	eq
 8005e6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	f1c4 040c 	rsb	r4, r4, #12
 8005e78:	f1c4 0520 	rsb	r5, r4, #32
 8005e7c:	fa00 f304 	lsl.w	r3, r0, r4
 8005e80:	fa20 f005 	lsr.w	r0, r0, r5
 8005e84:	fa01 f204 	lsl.w	r2, r1, r4
 8005e88:	ea40 0002 	orr.w	r0, r0, r2
 8005e8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005e90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005e94:	f141 0100 	adc.w	r1, r1, #0
 8005e98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005e9c:	bf08      	it	eq
 8005e9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	f1c4 0520 	rsb	r5, r4, #32
 8005ea8:	fa00 f205 	lsl.w	r2, r0, r5
 8005eac:	ea4e 0e02 	orr.w	lr, lr, r2
 8005eb0:	fa20 f304 	lsr.w	r3, r0, r4
 8005eb4:	fa01 f205 	lsl.w	r2, r1, r5
 8005eb8:	ea43 0302 	orr.w	r3, r3, r2
 8005ebc:	fa21 f004 	lsr.w	r0, r1, r4
 8005ec0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005ec4:	fa21 f204 	lsr.w	r2, r1, r4
 8005ec8:	ea20 0002 	bic.w	r0, r0, r2
 8005ecc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005ed0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005ed4:	bf08      	it	eq
 8005ed6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	f094 0f00 	teq	r4, #0
 8005ee0:	d10f      	bne.n	8005f02 <__aeabi_dmul+0x1c2>
 8005ee2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005ee6:	0040      	lsls	r0, r0, #1
 8005ee8:	eb41 0101 	adc.w	r1, r1, r1
 8005eec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005ef0:	bf08      	it	eq
 8005ef2:	3c01      	subeq	r4, #1
 8005ef4:	d0f7      	beq.n	8005ee6 <__aeabi_dmul+0x1a6>
 8005ef6:	ea41 0106 	orr.w	r1, r1, r6
 8005efa:	f095 0f00 	teq	r5, #0
 8005efe:	bf18      	it	ne
 8005f00:	4770      	bxne	lr
 8005f02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005f06:	0052      	lsls	r2, r2, #1
 8005f08:	eb43 0303 	adc.w	r3, r3, r3
 8005f0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005f10:	bf08      	it	eq
 8005f12:	3d01      	subeq	r5, #1
 8005f14:	d0f7      	beq.n	8005f06 <__aeabi_dmul+0x1c6>
 8005f16:	ea43 0306 	orr.w	r3, r3, r6
 8005f1a:	4770      	bx	lr
 8005f1c:	ea94 0f0c 	teq	r4, ip
 8005f20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005f24:	bf18      	it	ne
 8005f26:	ea95 0f0c 	teqne	r5, ip
 8005f2a:	d00c      	beq.n	8005f46 <__aeabi_dmul+0x206>
 8005f2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005f30:	bf18      	it	ne
 8005f32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005f36:	d1d1      	bne.n	8005edc <__aeabi_dmul+0x19c>
 8005f38:	ea81 0103 	eor.w	r1, r1, r3
 8005f3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005f40:	f04f 0000 	mov.w	r0, #0
 8005f44:	bd70      	pop	{r4, r5, r6, pc}
 8005f46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005f4a:	bf06      	itte	eq
 8005f4c:	4610      	moveq	r0, r2
 8005f4e:	4619      	moveq	r1, r3
 8005f50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005f54:	d019      	beq.n	8005f8a <__aeabi_dmul+0x24a>
 8005f56:	ea94 0f0c 	teq	r4, ip
 8005f5a:	d102      	bne.n	8005f62 <__aeabi_dmul+0x222>
 8005f5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005f60:	d113      	bne.n	8005f8a <__aeabi_dmul+0x24a>
 8005f62:	ea95 0f0c 	teq	r5, ip
 8005f66:	d105      	bne.n	8005f74 <__aeabi_dmul+0x234>
 8005f68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005f6c:	bf1c      	itt	ne
 8005f6e:	4610      	movne	r0, r2
 8005f70:	4619      	movne	r1, r3
 8005f72:	d10a      	bne.n	8005f8a <__aeabi_dmul+0x24a>
 8005f74:	ea81 0103 	eor.w	r1, r1, r3
 8005f78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005f7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005f80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005f8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005f92:	bd70      	pop	{r4, r5, r6, pc}

08005f94 <__aeabi_ddiv>:
__divdf3():
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005f9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005fa2:	bf1d      	ittte	ne
 8005fa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005fa8:	ea94 0f0c 	teqne	r4, ip
 8005fac:	ea95 0f0c 	teqne	r5, ip
 8005fb0:	f000 f8a7 	bleq	8006102 <__aeabi_ddiv+0x16e>
 8005fb4:	eba4 0405 	sub.w	r4, r4, r5
 8005fb8:	ea81 0e03 	eor.w	lr, r1, r3
 8005fbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005fc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005fc4:	f000 8088 	beq.w	80060d8 <__aeabi_ddiv+0x144>
 8005fc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005fcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005fd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005fd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005fd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005fdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005fe0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005fe4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005fe8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005fec:	429d      	cmp	r5, r3
 8005fee:	bf08      	it	eq
 8005ff0:	4296      	cmpeq	r6, r2
 8005ff2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005ff6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005ffa:	d202      	bcs.n	8006002 <__aeabi_ddiv+0x6e>
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	ea4f 0232 	mov.w	r2, r2, rrx
 8006002:	1ab6      	subs	r6, r6, r2
 8006004:	eb65 0503 	sbc.w	r5, r5, r3
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	ea4f 0232 	mov.w	r2, r2, rrx
 800600e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006012:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006016:	ebb6 0e02 	subs.w	lr, r6, r2
 800601a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800601e:	bf22      	ittt	cs
 8006020:	1ab6      	subcs	r6, r6, r2
 8006022:	4675      	movcs	r5, lr
 8006024:	ea40 000c 	orrcs.w	r0, r0, ip
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	ea4f 0232 	mov.w	r2, r2, rrx
 800602e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006032:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006036:	bf22      	ittt	cs
 8006038:	1ab6      	subcs	r6, r6, r2
 800603a:	4675      	movcs	r5, lr
 800603c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	ea4f 0232 	mov.w	r2, r2, rrx
 8006046:	ebb6 0e02 	subs.w	lr, r6, r2
 800604a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800604e:	bf22      	ittt	cs
 8006050:	1ab6      	subcs	r6, r6, r2
 8006052:	4675      	movcs	r5, lr
 8006054:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	ea4f 0232 	mov.w	r2, r2, rrx
 800605e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006062:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006066:	bf22      	ittt	cs
 8006068:	1ab6      	subcs	r6, r6, r2
 800606a:	4675      	movcs	r5, lr
 800606c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006070:	ea55 0e06 	orrs.w	lr, r5, r6
 8006074:	d018      	beq.n	80060a8 <__aeabi_ddiv+0x114>
 8006076:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800607a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800607e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006082:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006086:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800608a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800608e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006092:	d1c0      	bne.n	8006016 <__aeabi_ddiv+0x82>
 8006094:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006098:	d10b      	bne.n	80060b2 <__aeabi_ddiv+0x11e>
 800609a:	ea41 0100 	orr.w	r1, r1, r0
 800609e:	f04f 0000 	mov.w	r0, #0
 80060a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80060a6:	e7b6      	b.n	8006016 <__aeabi_ddiv+0x82>
 80060a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80060ac:	bf04      	itt	eq
 80060ae:	4301      	orreq	r1, r0
 80060b0:	2000      	moveq	r0, #0
 80060b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80060b6:	bf88      	it	hi
 80060b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80060bc:	f63f aeaf 	bhi.w	8005e1e <__aeabi_dmul+0xde>
 80060c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80060c4:	bf04      	itt	eq
 80060c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80060ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80060ce:	f150 0000 	adcs.w	r0, r0, #0
 80060d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80060dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80060e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80060e4:	bfc2      	ittt	gt
 80060e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80060ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80060ee:	bd70      	popgt	{r4, r5, r6, pc}
 80060f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80060f4:	f04f 0e00 	mov.w	lr, #0
 80060f8:	3c01      	subs	r4, #1
 80060fa:	e690      	b.n	8005e1e <__aeabi_dmul+0xde>
 80060fc:	ea45 0e06 	orr.w	lr, r5, r6
 8006100:	e68d      	b.n	8005e1e <__aeabi_dmul+0xde>
 8006102:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006106:	ea94 0f0c 	teq	r4, ip
 800610a:	bf08      	it	eq
 800610c:	ea95 0f0c 	teqeq	r5, ip
 8006110:	f43f af3b 	beq.w	8005f8a <__aeabi_dmul+0x24a>
 8006114:	ea94 0f0c 	teq	r4, ip
 8006118:	d10a      	bne.n	8006130 <__aeabi_ddiv+0x19c>
 800611a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800611e:	f47f af34 	bne.w	8005f8a <__aeabi_dmul+0x24a>
 8006122:	ea95 0f0c 	teq	r5, ip
 8006126:	f47f af25 	bne.w	8005f74 <__aeabi_dmul+0x234>
 800612a:	4610      	mov	r0, r2
 800612c:	4619      	mov	r1, r3
 800612e:	e72c      	b.n	8005f8a <__aeabi_dmul+0x24a>
 8006130:	ea95 0f0c 	teq	r5, ip
 8006134:	d106      	bne.n	8006144 <__aeabi_ddiv+0x1b0>
 8006136:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800613a:	f43f aefd 	beq.w	8005f38 <__aeabi_dmul+0x1f8>
 800613e:	4610      	mov	r0, r2
 8006140:	4619      	mov	r1, r3
 8006142:	e722      	b.n	8005f8a <__aeabi_dmul+0x24a>
 8006144:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006148:	bf18      	it	ne
 800614a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800614e:	f47f aec5 	bne.w	8005edc <__aeabi_dmul+0x19c>
 8006152:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006156:	f47f af0d 	bne.w	8005f74 <__aeabi_dmul+0x234>
 800615a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800615e:	f47f aeeb 	bne.w	8005f38 <__aeabi_dmul+0x1f8>
 8006162:	e712      	b.n	8005f8a <__aeabi_dmul+0x24a>

08006164 <__gedf2>:
__gedf2():
 8006164:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006168:	e006      	b.n	8006178 <__cmpdf2+0x4>
 800616a:	bf00      	nop

0800616c <__ledf2>:
__ledf2():
 800616c:	f04f 0c01 	mov.w	ip, #1
 8006170:	e002      	b.n	8006178 <__cmpdf2+0x4>
 8006172:	bf00      	nop

08006174 <__cmpdf2>:
__nedf2():
 8006174:	f04f 0c01 	mov.w	ip, #1
 8006178:	f84d cd04 	str.w	ip, [sp, #-4]!
 800617c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006184:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006188:	bf18      	it	ne
 800618a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800618e:	d01b      	beq.n	80061c8 <__cmpdf2+0x54>
 8006190:	b001      	add	sp, #4
 8006192:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006196:	bf0c      	ite	eq
 8006198:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800619c:	ea91 0f03 	teqne	r1, r3
 80061a0:	bf02      	ittt	eq
 80061a2:	ea90 0f02 	teqeq	r0, r2
 80061a6:	2000      	moveq	r0, #0
 80061a8:	4770      	bxeq	lr
 80061aa:	f110 0f00 	cmn.w	r0, #0
 80061ae:	ea91 0f03 	teq	r1, r3
 80061b2:	bf58      	it	pl
 80061b4:	4299      	cmppl	r1, r3
 80061b6:	bf08      	it	eq
 80061b8:	4290      	cmpeq	r0, r2
 80061ba:	bf2c      	ite	cs
 80061bc:	17d8      	asrcs	r0, r3, #31
 80061be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80061c2:	f040 0001 	orr.w	r0, r0, #1
 80061c6:	4770      	bx	lr
 80061c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80061cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80061d0:	d102      	bne.n	80061d8 <__cmpdf2+0x64>
 80061d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80061d6:	d107      	bne.n	80061e8 <__cmpdf2+0x74>
 80061d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80061dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80061e0:	d1d6      	bne.n	8006190 <__cmpdf2+0x1c>
 80061e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80061e6:	d0d3      	beq.n	8006190 <__cmpdf2+0x1c>
 80061e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop

080061f0 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
 80061f0:	4684      	mov	ip, r0
 80061f2:	4610      	mov	r0, r2
 80061f4:	4662      	mov	r2, ip
 80061f6:	468c      	mov	ip, r1
 80061f8:	4619      	mov	r1, r3
 80061fa:	4663      	mov	r3, ip
 80061fc:	e000      	b.n	8006200 <__aeabi_cdcmpeq>
 80061fe:	bf00      	nop

08006200 <__aeabi_cdcmpeq>:
__aeabi_cdcmpeq():
 8006200:	b501      	push	{r0, lr}
 8006202:	f7ff ffb7 	bl	8006174 <__cmpdf2>
 8006206:	2800      	cmp	r0, #0
 8006208:	bf48      	it	mi
 800620a:	f110 0f00 	cmnmi.w	r0, #0
 800620e:	bd01      	pop	{r0, pc}

08006210 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
 8006210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006214:	f7ff fff4 	bl	8006200 <__aeabi_cdcmpeq>
 8006218:	bf0c      	ite	eq
 800621a:	2001      	moveq	r0, #1
 800621c:	2000      	movne	r0, #0
 800621e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006222:	bf00      	nop

08006224 <__aeabi_dcmplt>:
__aeabi_dcmplt():
 8006224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006228:	f7ff ffea 	bl	8006200 <__aeabi_cdcmpeq>
 800622c:	bf34      	ite	cc
 800622e:	2001      	movcc	r0, #1
 8006230:	2000      	movcs	r0, #0
 8006232:	f85d fb08 	ldr.w	pc, [sp], #8
 8006236:	bf00      	nop

08006238 <__aeabi_dcmple>:
__aeabi_dcmple():
 8006238:	f84d ed08 	str.w	lr, [sp, #-8]!
 800623c:	f7ff ffe0 	bl	8006200 <__aeabi_cdcmpeq>
 8006240:	bf94      	ite	ls
 8006242:	2001      	movls	r0, #1
 8006244:	2000      	movhi	r0, #0
 8006246:	f85d fb08 	ldr.w	pc, [sp], #8
 800624a:	bf00      	nop

0800624c <__aeabi_dcmpge>:
__aeabi_dcmpge():
 800624c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006250:	f7ff ffce 	bl	80061f0 <__aeabi_cdrcmple>
 8006254:	bf94      	ite	ls
 8006256:	2001      	movls	r0, #1
 8006258:	2000      	movhi	r0, #0
 800625a:	f85d fb08 	ldr.w	pc, [sp], #8
 800625e:	bf00      	nop

08006260 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
 8006260:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006264:	f7ff ffc4 	bl	80061f0 <__aeabi_cdrcmple>
 8006268:	bf34      	ite	cc
 800626a:	2001      	movcc	r0, #1
 800626c:	2000      	movcs	r0, #0
 800626e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006272:	bf00      	nop

08006274 <__aeabi_dcmpun>:
__unorddf2():
 8006274:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006278:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800627c:	d102      	bne.n	8006284 <__aeabi_dcmpun+0x10>
 800627e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006282:	d10a      	bne.n	800629a <__aeabi_dcmpun+0x26>
 8006284:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006288:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800628c:	d102      	bne.n	8006294 <__aeabi_dcmpun+0x20>
 800628e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006292:	d102      	bne.n	800629a <__aeabi_dcmpun+0x26>
 8006294:	f04f 0000 	mov.w	r0, #0
 8006298:	4770      	bx	lr
 800629a:	f04f 0001 	mov.w	r0, #1
 800629e:	4770      	bx	lr

080062a0 <__aeabi_d2iz>:
__aeabi_d2iz():
 80062a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80062a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80062a8:	d215      	bcs.n	80062d6 <__aeabi_d2iz+0x36>
 80062aa:	d511      	bpl.n	80062d0 <__aeabi_d2iz+0x30>
 80062ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80062b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80062b4:	d912      	bls.n	80062dc <__aeabi_d2iz+0x3c>
 80062b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80062ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80062c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80062c6:	fa23 f002 	lsr.w	r0, r3, r2
 80062ca:	bf18      	it	ne
 80062cc:	4240      	negne	r0, r0
 80062ce:	4770      	bx	lr
 80062d0:	f04f 0000 	mov.w	r0, #0
 80062d4:	4770      	bx	lr
 80062d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80062da:	d105      	bne.n	80062e8 <__aeabi_d2iz+0x48>
 80062dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80062e0:	bf08      	it	eq
 80062e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80062e6:	4770      	bx	lr
 80062e8:	f04f 0000 	mov.w	r0, #0
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop

080062f0 <__aeabi_d2f>:
__truncdfsf2():
 80062f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80062f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80062f8:	bf24      	itt	cs
 80062fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80062fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006302:	d90d      	bls.n	8006320 <__aeabi_d2f+0x30>
 8006304:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006308:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800630c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006310:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006314:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006318:	bf08      	it	eq
 800631a:	f020 0001 	biceq.w	r0, r0, #1
 800631e:	4770      	bx	lr
 8006320:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006324:	d121      	bne.n	800636a <__aeabi_d2f+0x7a>
 8006326:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800632a:	bfbc      	itt	lt
 800632c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006330:	4770      	bxlt	lr
 8006332:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006336:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800633a:	f1c2 0218 	rsb	r2, r2, #24
 800633e:	f1c2 0c20 	rsb	ip, r2, #32
 8006342:	fa10 f30c 	lsls.w	r3, r0, ip
 8006346:	fa20 f002 	lsr.w	r0, r0, r2
 800634a:	bf18      	it	ne
 800634c:	f040 0001 	orrne.w	r0, r0, #1
 8006350:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006354:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006358:	fa03 fc0c 	lsl.w	ip, r3, ip
 800635c:	ea40 000c 	orr.w	r0, r0, ip
 8006360:	fa23 f302 	lsr.w	r3, r3, r2
 8006364:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006368:	e7cc      	b.n	8006304 <__aeabi_d2f+0x14>
 800636a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800636e:	d107      	bne.n	8006380 <__aeabi_d2f+0x90>
 8006370:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006374:	bf1e      	ittt	ne
 8006376:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800637a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800637e:	4770      	bxne	lr
 8006380:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop

08006390 <__aeabi_frsub>:
__aeabi_frsub():
 8006390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8006394:	e002      	b.n	800639c <__addsf3>
 8006396:	bf00      	nop

08006398 <__aeabi_fsub>:
__aeabi_fsub():
 8006398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800639c <__addsf3>:
__addsf3():
 800639c:	0042      	lsls	r2, r0, #1
 800639e:	bf1f      	itttt	ne
 80063a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80063a4:	ea92 0f03 	teqne	r2, r3
 80063a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80063ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80063b0:	d06a      	beq.n	8006488 <__addsf3+0xec>
 80063b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80063b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80063ba:	bfc1      	itttt	gt
 80063bc:	18d2      	addgt	r2, r2, r3
 80063be:	4041      	eorgt	r1, r0
 80063c0:	4048      	eorgt	r0, r1
 80063c2:	4041      	eorgt	r1, r0
 80063c4:	bfb8      	it	lt
 80063c6:	425b      	neglt	r3, r3
 80063c8:	2b19      	cmp	r3, #25
 80063ca:	bf88      	it	hi
 80063cc:	4770      	bxhi	lr
 80063ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80063d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80063d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80063da:	bf18      	it	ne
 80063dc:	4240      	negne	r0, r0
 80063de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80063e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80063e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80063ea:	bf18      	it	ne
 80063ec:	4249      	negne	r1, r1
 80063ee:	ea92 0f03 	teq	r2, r3
 80063f2:	d03f      	beq.n	8006474 <__addsf3+0xd8>
 80063f4:	f1a2 0201 	sub.w	r2, r2, #1
 80063f8:	fa41 fc03 	asr.w	ip, r1, r3
 80063fc:	eb10 000c 	adds.w	r0, r0, ip
 8006400:	f1c3 0320 	rsb	r3, r3, #32
 8006404:	fa01 f103 	lsl.w	r1, r1, r3
 8006408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800640c:	d502      	bpl.n	8006414 <__addsf3+0x78>
 800640e:	4249      	negs	r1, r1
 8006410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8006414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006418:	d313      	bcc.n	8006442 <__addsf3+0xa6>
 800641a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800641e:	d306      	bcc.n	800642e <__addsf3+0x92>
 8006420:	0840      	lsrs	r0, r0, #1
 8006422:	ea4f 0131 	mov.w	r1, r1, rrx
 8006426:	f102 0201 	add.w	r2, r2, #1
 800642a:	2afe      	cmp	r2, #254	; 0xfe
 800642c:	d251      	bcs.n	80064d2 <__addsf3+0x136>
 800642e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8006432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006436:	bf08      	it	eq
 8006438:	f020 0001 	biceq.w	r0, r0, #1
 800643c:	ea40 0003 	orr.w	r0, r0, r3
 8006440:	4770      	bx	lr
 8006442:	0049      	lsls	r1, r1, #1
 8006444:	eb40 0000 	adc.w	r0, r0, r0
 8006448:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800644c:	f1a2 0201 	sub.w	r2, r2, #1
 8006450:	d1ed      	bne.n	800642e <__addsf3+0x92>
 8006452:	fab0 fc80 	clz	ip, r0
 8006456:	f1ac 0c08 	sub.w	ip, ip, #8
 800645a:	ebb2 020c 	subs.w	r2, r2, ip
 800645e:	fa00 f00c 	lsl.w	r0, r0, ip
 8006462:	bfaa      	itet	ge
 8006464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8006468:	4252      	neglt	r2, r2
 800646a:	4318      	orrge	r0, r3
 800646c:	bfbc      	itt	lt
 800646e:	40d0      	lsrlt	r0, r2
 8006470:	4318      	orrlt	r0, r3
 8006472:	4770      	bx	lr
 8006474:	f092 0f00 	teq	r2, #0
 8006478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800647c:	bf06      	itte	eq
 800647e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8006482:	3201      	addeq	r2, #1
 8006484:	3b01      	subne	r3, #1
 8006486:	e7b5      	b.n	80063f4 <__addsf3+0x58>
 8006488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800648c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006490:	bf18      	it	ne
 8006492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006496:	d021      	beq.n	80064dc <__addsf3+0x140>
 8006498:	ea92 0f03 	teq	r2, r3
 800649c:	d004      	beq.n	80064a8 <__addsf3+0x10c>
 800649e:	f092 0f00 	teq	r2, #0
 80064a2:	bf08      	it	eq
 80064a4:	4608      	moveq	r0, r1
 80064a6:	4770      	bx	lr
 80064a8:	ea90 0f01 	teq	r0, r1
 80064ac:	bf1c      	itt	ne
 80064ae:	2000      	movne	r0, #0
 80064b0:	4770      	bxne	lr
 80064b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80064b6:	d104      	bne.n	80064c2 <__addsf3+0x126>
 80064b8:	0040      	lsls	r0, r0, #1
 80064ba:	bf28      	it	cs
 80064bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80064c0:	4770      	bx	lr
 80064c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80064c6:	bf3c      	itt	cc
 80064c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80064cc:	4770      	bxcc	lr
 80064ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80064d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80064d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80064da:	4770      	bx	lr
 80064dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80064e0:	bf16      	itet	ne
 80064e2:	4608      	movne	r0, r1
 80064e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80064e8:	4601      	movne	r1, r0
 80064ea:	0242      	lsls	r2, r0, #9
 80064ec:	bf06      	itte	eq
 80064ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80064f2:	ea90 0f01 	teqeq	r0, r1
 80064f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80064fa:	4770      	bx	lr

080064fc <__aeabi_ui2f>:
__floatunsisf():
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e004      	b.n	800650c <__aeabi_i2f+0x8>
 8006502:	bf00      	nop

08006504 <__aeabi_i2f>:
__floatsisf():
 8006504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006508:	bf48      	it	mi
 800650a:	4240      	negmi	r0, r0
 800650c:	ea5f 0c00 	movs.w	ip, r0
 8006510:	bf08      	it	eq
 8006512:	4770      	bxeq	lr
 8006514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006518:	4601      	mov	r1, r0
 800651a:	f04f 0000 	mov.w	r0, #0
 800651e:	e01c      	b.n	800655a <__aeabi_l2f+0x2a>

08006520 <__aeabi_ul2f>:
__aeabi_ul2f():
 8006520:	ea50 0201 	orrs.w	r2, r0, r1
 8006524:	bf08      	it	eq
 8006526:	4770      	bxeq	lr
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e00a      	b.n	8006544 <__aeabi_l2f+0x14>
 800652e:	bf00      	nop

08006530 <__aeabi_l2f>:
__aeabi_l2f():
 8006530:	ea50 0201 	orrs.w	r2, r0, r1
 8006534:	bf08      	it	eq
 8006536:	4770      	bxeq	lr
 8006538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800653c:	d502      	bpl.n	8006544 <__aeabi_l2f+0x14>
 800653e:	4240      	negs	r0, r0
 8006540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006544:	ea5f 0c01 	movs.w	ip, r1
 8006548:	bf02      	ittt	eq
 800654a:	4684      	moveq	ip, r0
 800654c:	4601      	moveq	r1, r0
 800654e:	2000      	moveq	r0, #0
 8006550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8006554:	bf08      	it	eq
 8006556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800655a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800655e:	fabc f28c 	clz	r2, ip
 8006562:	3a08      	subs	r2, #8
 8006564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8006568:	db10      	blt.n	800658c <__aeabi_l2f+0x5c>
 800656a:	fa01 fc02 	lsl.w	ip, r1, r2
 800656e:	4463      	add	r3, ip
 8006570:	fa00 fc02 	lsl.w	ip, r0, r2
 8006574:	f1c2 0220 	rsb	r2, r2, #32
 8006578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800657c:	fa20 f202 	lsr.w	r2, r0, r2
 8006580:	eb43 0002 	adc.w	r0, r3, r2
 8006584:	bf08      	it	eq
 8006586:	f020 0001 	biceq.w	r0, r0, #1
 800658a:	4770      	bx	lr
 800658c:	f102 0220 	add.w	r2, r2, #32
 8006590:	fa01 fc02 	lsl.w	ip, r1, r2
 8006594:	f1c2 0220 	rsb	r2, r2, #32
 8006598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800659c:	fa21 f202 	lsr.w	r2, r1, r2
 80065a0:	eb43 0002 	adc.w	r0, r3, r2
 80065a4:	bf08      	it	eq
 80065a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80065aa:	4770      	bx	lr

080065ac <__aeabi_fmul>:
__aeabi_fmul():
 80065ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80065b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80065b4:	bf1e      	ittt	ne
 80065b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80065ba:	ea92 0f0c 	teqne	r2, ip
 80065be:	ea93 0f0c 	teqne	r3, ip
 80065c2:	d06f      	beq.n	80066a4 <__aeabi_fmul+0xf8>
 80065c4:	441a      	add	r2, r3
 80065c6:	ea80 0c01 	eor.w	ip, r0, r1
 80065ca:	0240      	lsls	r0, r0, #9
 80065cc:	bf18      	it	ne
 80065ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80065d2:	d01e      	beq.n	8006612 <__aeabi_fmul+0x66>
 80065d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80065dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80065e0:	fba0 3101 	umull	r3, r1, r0, r1
 80065e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80065e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80065ec:	bf3e      	ittt	cc
 80065ee:	0049      	lslcc	r1, r1, #1
 80065f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80065f4:	005b      	lslcc	r3, r3, #1
 80065f6:	ea40 0001 	orr.w	r0, r0, r1
 80065fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80065fe:	2afd      	cmp	r2, #253	; 0xfd
 8006600:	d81d      	bhi.n	800663e <__aeabi_fmul+0x92>
 8006602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006606:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800660a:	bf08      	it	eq
 800660c:	f020 0001 	biceq.w	r0, r0, #1
 8006610:	4770      	bx	lr
 8006612:	f090 0f00 	teq	r0, #0
 8006616:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800661a:	bf08      	it	eq
 800661c:	0249      	lsleq	r1, r1, #9
 800661e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8006622:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8006626:	3a7f      	subs	r2, #127	; 0x7f
 8006628:	bfc2      	ittt	gt
 800662a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800662e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006632:	4770      	bxgt	lr
 8006634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	3a01      	subs	r2, #1
 800663e:	dc5d      	bgt.n	80066fc <__aeabi_fmul+0x150>
 8006640:	f112 0f19 	cmn.w	r2, #25
 8006644:	bfdc      	itt	le
 8006646:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800664a:	4770      	bxle	lr
 800664c:	f1c2 0200 	rsb	r2, r2, #0
 8006650:	0041      	lsls	r1, r0, #1
 8006652:	fa21 f102 	lsr.w	r1, r1, r2
 8006656:	f1c2 0220 	rsb	r2, r2, #32
 800665a:	fa00 fc02 	lsl.w	ip, r0, r2
 800665e:	ea5f 0031 	movs.w	r0, r1, rrx
 8006662:	f140 0000 	adc.w	r0, r0, #0
 8006666:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800666a:	bf08      	it	eq
 800666c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006670:	4770      	bx	lr
 8006672:	f092 0f00 	teq	r2, #0
 8006676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800667a:	bf02      	ittt	eq
 800667c:	0040      	lsleq	r0, r0, #1
 800667e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006682:	3a01      	subeq	r2, #1
 8006684:	d0f9      	beq.n	800667a <__aeabi_fmul+0xce>
 8006686:	ea40 000c 	orr.w	r0, r0, ip
 800668a:	f093 0f00 	teq	r3, #0
 800668e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006692:	bf02      	ittt	eq
 8006694:	0049      	lsleq	r1, r1, #1
 8006696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800669a:	3b01      	subeq	r3, #1
 800669c:	d0f9      	beq.n	8006692 <__aeabi_fmul+0xe6>
 800669e:	ea41 010c 	orr.w	r1, r1, ip
 80066a2:	e78f      	b.n	80065c4 <__aeabi_fmul+0x18>
 80066a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80066a8:	ea92 0f0c 	teq	r2, ip
 80066ac:	bf18      	it	ne
 80066ae:	ea93 0f0c 	teqne	r3, ip
 80066b2:	d00a      	beq.n	80066ca <__aeabi_fmul+0x11e>
 80066b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80066b8:	bf18      	it	ne
 80066ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80066be:	d1d8      	bne.n	8006672 <__aeabi_fmul+0xc6>
 80066c0:	ea80 0001 	eor.w	r0, r0, r1
 80066c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80066c8:	4770      	bx	lr
 80066ca:	f090 0f00 	teq	r0, #0
 80066ce:	bf17      	itett	ne
 80066d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80066d4:	4608      	moveq	r0, r1
 80066d6:	f091 0f00 	teqne	r1, #0
 80066da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80066de:	d014      	beq.n	800670a <__aeabi_fmul+0x15e>
 80066e0:	ea92 0f0c 	teq	r2, ip
 80066e4:	d101      	bne.n	80066ea <__aeabi_fmul+0x13e>
 80066e6:	0242      	lsls	r2, r0, #9
 80066e8:	d10f      	bne.n	800670a <__aeabi_fmul+0x15e>
 80066ea:	ea93 0f0c 	teq	r3, ip
 80066ee:	d103      	bne.n	80066f8 <__aeabi_fmul+0x14c>
 80066f0:	024b      	lsls	r3, r1, #9
 80066f2:	bf18      	it	ne
 80066f4:	4608      	movne	r0, r1
 80066f6:	d108      	bne.n	800670a <__aeabi_fmul+0x15e>
 80066f8:	ea80 0001 	eor.w	r0, r0, r1
 80066fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006700:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006704:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006708:	4770      	bx	lr
 800670a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800670e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8006712:	4770      	bx	lr

08006714 <__aeabi_fdiv>:
__aeabi_fdiv():
 8006714:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006718:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800671c:	bf1e      	ittt	ne
 800671e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006722:	ea92 0f0c 	teqne	r2, ip
 8006726:	ea93 0f0c 	teqne	r3, ip
 800672a:	d069      	beq.n	8006800 <__aeabi_fdiv+0xec>
 800672c:	eba2 0203 	sub.w	r2, r2, r3
 8006730:	ea80 0c01 	eor.w	ip, r0, r1
 8006734:	0249      	lsls	r1, r1, #9
 8006736:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800673a:	d037      	beq.n	80067ac <__aeabi_fdiv+0x98>
 800673c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006740:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8006744:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8006748:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800674c:	428b      	cmp	r3, r1
 800674e:	bf38      	it	cc
 8006750:	005b      	lslcc	r3, r3, #1
 8006752:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8006756:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800675a:	428b      	cmp	r3, r1
 800675c:	bf24      	itt	cs
 800675e:	1a5b      	subcs	r3, r3, r1
 8006760:	ea40 000c 	orrcs.w	r0, r0, ip
 8006764:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8006768:	bf24      	itt	cs
 800676a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800676e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006772:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8006776:	bf24      	itt	cs
 8006778:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800677c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006780:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8006784:	bf24      	itt	cs
 8006786:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800678a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	bf18      	it	ne
 8006792:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8006796:	d1e0      	bne.n	800675a <__aeabi_fdiv+0x46>
 8006798:	2afd      	cmp	r2, #253	; 0xfd
 800679a:	f63f af50 	bhi.w	800663e <__aeabi_fmul+0x92>
 800679e:	428b      	cmp	r3, r1
 80067a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80067a4:	bf08      	it	eq
 80067a6:	f020 0001 	biceq.w	r0, r0, #1
 80067aa:	4770      	bx	lr
 80067ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80067b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80067b4:	327f      	adds	r2, #127	; 0x7f
 80067b6:	bfc2      	ittt	gt
 80067b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80067bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80067c0:	4770      	bxgt	lr
 80067c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	3a01      	subs	r2, #1
 80067cc:	e737      	b.n	800663e <__aeabi_fmul+0x92>
 80067ce:	f092 0f00 	teq	r2, #0
 80067d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80067d6:	bf02      	ittt	eq
 80067d8:	0040      	lsleq	r0, r0, #1
 80067da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80067de:	3a01      	subeq	r2, #1
 80067e0:	d0f9      	beq.n	80067d6 <__aeabi_fdiv+0xc2>
 80067e2:	ea40 000c 	orr.w	r0, r0, ip
 80067e6:	f093 0f00 	teq	r3, #0
 80067ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80067ee:	bf02      	ittt	eq
 80067f0:	0049      	lsleq	r1, r1, #1
 80067f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80067f6:	3b01      	subeq	r3, #1
 80067f8:	d0f9      	beq.n	80067ee <__aeabi_fdiv+0xda>
 80067fa:	ea41 010c 	orr.w	r1, r1, ip
 80067fe:	e795      	b.n	800672c <__aeabi_fdiv+0x18>
 8006800:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006804:	ea92 0f0c 	teq	r2, ip
 8006808:	d108      	bne.n	800681c <__aeabi_fdiv+0x108>
 800680a:	0242      	lsls	r2, r0, #9
 800680c:	f47f af7d 	bne.w	800670a <__aeabi_fmul+0x15e>
 8006810:	ea93 0f0c 	teq	r3, ip
 8006814:	f47f af70 	bne.w	80066f8 <__aeabi_fmul+0x14c>
 8006818:	4608      	mov	r0, r1
 800681a:	e776      	b.n	800670a <__aeabi_fmul+0x15e>
 800681c:	ea93 0f0c 	teq	r3, ip
 8006820:	d104      	bne.n	800682c <__aeabi_fdiv+0x118>
 8006822:	024b      	lsls	r3, r1, #9
 8006824:	f43f af4c 	beq.w	80066c0 <__aeabi_fmul+0x114>
 8006828:	4608      	mov	r0, r1
 800682a:	e76e      	b.n	800670a <__aeabi_fmul+0x15e>
 800682c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006830:	bf18      	it	ne
 8006832:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006836:	d1ca      	bne.n	80067ce <__aeabi_fdiv+0xba>
 8006838:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800683c:	f47f af5c 	bne.w	80066f8 <__aeabi_fmul+0x14c>
 8006840:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8006844:	f47f af3c 	bne.w	80066c0 <__aeabi_fmul+0x114>
 8006848:	e75f      	b.n	800670a <__aeabi_fmul+0x15e>
 800684a:	bf00      	nop

0800684c <__gesf2>:
__gesf2():
 800684c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006850:	e006      	b.n	8006860 <__cmpsf2+0x4>
 8006852:	bf00      	nop

08006854 <__lesf2>:
__ltsf2():
 8006854:	f04f 0c01 	mov.w	ip, #1
 8006858:	e002      	b.n	8006860 <__cmpsf2+0x4>
 800685a:	bf00      	nop

0800685c <__cmpsf2>:
__cmpsf2():
 800685c:	f04f 0c01 	mov.w	ip, #1
 8006860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006864:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8006868:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800686c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006870:	bf18      	it	ne
 8006872:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006876:	d011      	beq.n	800689c <__cmpsf2+0x40>
 8006878:	b001      	add	sp, #4
 800687a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800687e:	bf18      	it	ne
 8006880:	ea90 0f01 	teqne	r0, r1
 8006884:	bf58      	it	pl
 8006886:	ebb2 0003 	subspl.w	r0, r2, r3
 800688a:	bf88      	it	hi
 800688c:	17c8      	asrhi	r0, r1, #31
 800688e:	bf38      	it	cc
 8006890:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8006894:	bf18      	it	ne
 8006896:	f040 0001 	orrne.w	r0, r0, #1
 800689a:	4770      	bx	lr
 800689c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80068a0:	d102      	bne.n	80068a8 <__cmpsf2+0x4c>
 80068a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80068a6:	d105      	bne.n	80068b4 <__cmpsf2+0x58>
 80068a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80068ac:	d1e4      	bne.n	8006878 <__cmpsf2+0x1c>
 80068ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80068b2:	d0e1      	beq.n	8006878 <__cmpsf2+0x1c>
 80068b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop

080068bc <__aeabi_cfrcmple>:
__aeabi_cfrcmple():
 80068bc:	4684      	mov	ip, r0
 80068be:	4608      	mov	r0, r1
 80068c0:	4661      	mov	r1, ip
 80068c2:	e7ff      	b.n	80068c4 <__aeabi_cfcmpeq>

080068c4 <__aeabi_cfcmpeq>:
__aeabi_cfcmpeq():
 80068c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80068c6:	f7ff ffc9 	bl	800685c <__cmpsf2>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	bf48      	it	mi
 80068ce:	f110 0f00 	cmnmi.w	r0, #0
 80068d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080068d4 <__aeabi_fcmpeq>:
__aeabi_fcmpeq():
 80068d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068d8:	f7ff fff4 	bl	80068c4 <__aeabi_cfcmpeq>
 80068dc:	bf0c      	ite	eq
 80068de:	2001      	moveq	r0, #1
 80068e0:	2000      	movne	r0, #0
 80068e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80068e6:	bf00      	nop

080068e8 <__aeabi_fcmplt>:
__aeabi_fcmplt():
 80068e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068ec:	f7ff ffea 	bl	80068c4 <__aeabi_cfcmpeq>
 80068f0:	bf34      	ite	cc
 80068f2:	2001      	movcc	r0, #1
 80068f4:	2000      	movcs	r0, #0
 80068f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80068fa:	bf00      	nop

080068fc <__aeabi_fcmple>:
__aeabi_fcmple():
 80068fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006900:	f7ff ffe0 	bl	80068c4 <__aeabi_cfcmpeq>
 8006904:	bf94      	ite	ls
 8006906:	2001      	movls	r0, #1
 8006908:	2000      	movhi	r0, #0
 800690a:	f85d fb08 	ldr.w	pc, [sp], #8
 800690e:	bf00      	nop

08006910 <__aeabi_fcmpge>:
__aeabi_fcmpge():
 8006910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006914:	f7ff ffd2 	bl	80068bc <__aeabi_cfrcmple>
 8006918:	bf94      	ite	ls
 800691a:	2001      	movls	r0, #1
 800691c:	2000      	movhi	r0, #0
 800691e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006922:	bf00      	nop

08006924 <__aeabi_fcmpgt>:
__aeabi_fcmpgt():
 8006924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006928:	f7ff ffc8 	bl	80068bc <__aeabi_cfrcmple>
 800692c:	bf34      	ite	cc
 800692e:	2001      	movcc	r0, #1
 8006930:	2000      	movcs	r0, #0
 8006932:	f85d fb08 	ldr.w	pc, [sp], #8
 8006936:	bf00      	nop

08006938 <blocking_handler>:
blocking_handler():
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:104
	}

}

void blocking_handler(void)
{
 8006938:	e7fe      	b.n	8006938 <blocking_handler>

0800693a <null_handler>:
null_handler():
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:111
}

void null_handler(void)
{
	/* Do nothing. */
}
 800693a:	4770      	bx	lr

0800693c <reset_handler>:
reset_handler():
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:68
	for (src = &_data_loadaddr, dest = &_data;
 800693c:	2200      	movs	r2, #0
 800693e:	4c18      	ldr	r4, [pc, #96]	; (80069a0 <reset_handler+0x64>)
 8006940:	4918      	ldr	r1, [pc, #96]	; (80069a4 <reset_handler+0x68>)
 8006942:	4819      	ldr	r0, [pc, #100]	; (80069a8 <reset_handler+0x6c>)
 8006944:	1853      	adds	r3, r2, r1
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:68 (discriminator 1)
 8006946:	4283      	cmp	r3, r0
 8006948:	d316      	bcc.n	8006978 <reset_handler+0x3c>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:75
		*dest++ = 0;
 800694a:	2100      	movs	r1, #0
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:74
	while (dest < &_ebss) {
 800694c:	4a17      	ldr	r2, [pc, #92]	; (80069ac <reset_handler+0x70>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d316      	bcc.n	8006980 <reset_handler+0x44>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:80
	SCB_CCR |= SCB_CCR_STKALIGN;
 8006952:	4a17      	ldr	r2, [pc, #92]	; (80069b0 <reset_handler+0x74>)
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:86
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006954:	4c17      	ldr	r4, [pc, #92]	; (80069b4 <reset_handler+0x78>)
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:80
	SCB_CCR |= SCB_CCR_STKALIGN;
 8006956:	6813      	ldr	r3, [r2, #0]
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:86
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006958:	4d17      	ldr	r5, [pc, #92]	; (80069b8 <reset_handler+0x7c>)
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:80
	SCB_CCR |= SCB_CCR_STKALIGN;
 800695a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800695e:	6013      	str	r3, [r2, #0]
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:86 (discriminator 1)
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006960:	42ac      	cmp	r4, r5
 8006962:	d310      	bcc.n	8006986 <reset_handler+0x4a>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:89
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8006964:	4c15      	ldr	r4, [pc, #84]	; (80069bc <reset_handler+0x80>)
 8006966:	4d16      	ldr	r5, [pc, #88]	; (80069c0 <reset_handler+0x84>)
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:89 (discriminator 1)
 8006968:	42ac      	cmp	r4, r5
 800696a:	d310      	bcc.n	800698e <reset_handler+0x52>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:94
	main();
 800696c:	f7fd fa88 	bl	8003e80 <main>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:97
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8006970:	4c14      	ldr	r4, [pc, #80]	; (80069c4 <reset_handler+0x88>)
 8006972:	4d15      	ldr	r5, [pc, #84]	; (80069c8 <reset_handler+0x8c>)
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:97 (discriminator 1)
 8006974:	42ac      	cmp	r4, r5
 8006976:	d30e      	bcc.n	8006996 <reset_handler+0x5a>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:71
		*dest = *src;
 8006978:	5913      	ldr	r3, [r2, r4]
 800697a:	5053      	str	r3, [r2, r1]
 800697c:	3204      	adds	r2, #4
 800697e:	e7e1      	b.n	8006944 <reset_handler+0x8>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:75
		*dest++ = 0;
 8006980:	6019      	str	r1, [r3, #0]
 8006982:	3304      	adds	r3, #4
 8006984:	e7e3      	b.n	800694e <reset_handler+0x12>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:87 (discriminator 3)
		(*fp)();
 8006986:	f854 3b04 	ldr.w	r3, [r4], #4
 800698a:	4798      	blx	r3
 800698c:	e7e8      	b.n	8006960 <reset_handler+0x24>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:90 (discriminator 3)
		(*fp)();
 800698e:	f854 3b04 	ldr.w	r3, [r4], #4
 8006992:	4798      	blx	r3
 8006994:	e7e8      	b.n	8006968 <reset_handler+0x2c>
/Users/Luppy/.platformio/packages/framework-libopencm3/lib/cm3/vector.c:98 (discriminator 3)
		(*fp)();
 8006996:	f854 3b04 	ldr.w	r3, [r4], #4
 800699a:	4798      	blx	r3
 800699c:	e7ea      	b.n	8006974 <reset_handler+0x38>
 800699e:	bf00      	nop
 80069a0:	080071c4 	.word	0x080071c4
 80069a4:	20000000 	.word	0x20000000
 80069a8:	20000000 	.word	0x20000000
 80069ac:	200002a0 	.word	0x200002a0
 80069b0:	e000ed14 	.word	0xe000ed14
 80069b4:	080071c4 	.word	0x080071c4
 80069b8:	080071c4 	.word	0x080071c4
 80069bc:	080071c4 	.word	0x080071c4
 80069c0:	080071c4 	.word	0x080071c4
 80069c4:	080071c4 	.word	0x080071c4
 80069c8:	080071c4 	.word	0x080071c4

080069cc <xchxy>:
xchxy():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:77
.global qfp_fsqrt_fast
.endif

@ exchange r0<->r1, r2<->r3
xchxy:
 push {r0,r2,r14}
 80069cc:	b505      	push	{r0, r2, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:78
 mov r0,r1
 80069ce:	4608      	mov	r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:79
 mov r2,r3
 80069d0:	461a      	mov	r2, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:80
 pop {r1,r3,r15}
 80069d2:	bd0a      	pop	{r1, r3, pc}

080069d4 <unpackxy>:
unpackxy():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:85

@ IEEE single precision floats in r0,r1-> mantissae in r1,r0 exponents in r3,r2 *respectively*
@ trashes r4
unpackxy:
 push {r14}
 80069d4:	b500      	push	{lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:86
 bl unpackx
 80069d6:	f000 f804 	bl	80069e2 <unpackx>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:87
 bl xchxy
 80069da:	f7ff fff7 	bl	80069cc <xchxy>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:88
 pop {r4}
 80069de:	bc10      	pop	{r4}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:89
 mov r14,r4
 80069e0:	46a6      	mov	lr, r4

080069e2 <unpackx>:
unpackx():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:94

@ IEEE single in r0-> signed (two's complemennt) mantissa in r0 9Q23 (24 significant bits), signed exponent (bias removed) in r2
@ trashes r4; zero, denormal -> mantissa=+/-1, exponent=-380; Inf, NaN -> mantissa=+/-1, exponent=+640
unpackx:
 lsrs r2,r0,#23 @ save exponent and sign
 80069e2:	0dc2      	lsrs	r2, r0, #23
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:95
 lsls r0,#9     @ extract mantissa
 80069e4:	0240      	lsls	r0, r0, #9
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:96
 lsrs r0,#9
 80069e6:	0a40      	lsrs	r0, r0, #9
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:97
 movs r4,#1
 80069e8:	2401      	movs	r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:98
 lsls r4,#23
 80069ea:	05e4      	lsls	r4, r4, #23
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:99
 orrs r0,r4     @ reinstate implied leading 1
 80069ec:	4320      	orrs	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:100
 cmp r2,#255    @ test sign bit
 80069ee:	2aff      	cmp	r2, #255	; 0xff
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:101
 uxtb r2,r2     @ clear it
 80069f0:	b2d2      	uxtb	r2, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:102
 bls 1f         @ branch on positive
 80069f2:	d900      	bls.n	80069f6 <unpackx+0x14>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:103
 rsbs r0,#0     @ negate mantissa
 80069f4:	4240      	negs	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:105
1:
 subs r2,#1
 80069f6:	3a01      	subs	r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:106
 cmp r2,#254    @ zero/denormal/Inf/NaN?
 80069f8:	2afe      	cmp	r2, #254	; 0xfe
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:107
 bhs 2f
 80069fa:	d201      	bcs.n	8006a00 <unpackx+0x1e>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:108
 subs r2,#126   @ remove exponent bias: can now be -126..+127
 80069fc:	3a7e      	subs	r2, #126	; 0x7e
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:109
 bx r14
 80069fe:	4770      	bx	lr
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:112

2:              @ here with special-case values
 cmp r0,#0
 8006a00:	2800      	cmp	r0, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:113
 mov r0,r4      @ set mantissa to +1
 8006a02:	4620      	mov	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:114
 bpl 3f
 8006a04:	d500      	bpl.n	8006a08 <unpackx+0x26>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:115
 rsbs r0,#0     @ zero/denormal/Inf/NaN: mantissa=+/-1
 8006a06:	4240      	negs	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:117
3:
 subs r2,#126   @ zero/denormal: exponent -> -127; Inf, NaN: exponent -> 128
 8006a08:	3a7e      	subs	r2, #126	; 0x7e
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:118
 lsls r2,#2     @ zero/denormal: exponent -> -508; Inf, NaN: exponent -> 512
 8006a0a:	0092      	lsls	r2, r2, #2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:119
 adds r2,#128   @ zero/denormal: exponent -> -380; Inf, NaN: exponent -> 640
 8006a0c:	3280      	adds	r2, #128	; 0x80
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:120
 bx r14
 8006a0e:	4770      	bx	lr

08006a10 <packx>:
packx():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:126

@ normalise and pack signed mantissa in r0 nominally 3Q29, signed exponent in r2-> IEEE single in r0
@ trashes r4, preserves r1,r3
@ r5: "sticky bits", must be zero iff all result bits below r0 are zero for correct rounding
packx:
 lsrs r4,r0,#31 @ save sign bit
 8006a10:	0fc4      	lsrs	r4, r0, #31
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:127
 lsls r4,r4,#31 @ sign now in b31
 8006a12:	07e4      	lsls	r4, r4, #31
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:128
 bpl 2f         @ skip if positive
 8006a14:	d504      	bpl.n	8006a20 <packx0+0x2>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:129
 cmp r5,#0
 8006a16:	2d00      	cmp	r5, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:130
 beq 11f
 8006a18:	d000      	beq.n	8006a1c <packx+0xc>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:131
 adds r0,#1     @ fiddle carry in to following rsb if sticky bits are non-zero
 8006a1a:	3001      	adds	r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:133
11:
 rsbs r0,#0     @ can now treat r0 as unsigned
 8006a1c:	4240      	negs	r0, r0

08006a1e <packx0>:
packx0():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:135
packx0:
 bmi 3f         @ catch r0=0x80000000 case
 8006a1e:	d403      	bmi.n	8006a28 <packx0+0xa>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:137
2:
 subs r2,#1     @ normalisation loop
 8006a20:	3a01      	subs	r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:138
 adds r0,r0
 8006a22:	1800      	adds	r0, r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:139
 beq 1f         @ zero? special case
 8006a24:	d012      	beq.n	8006a4c <packx0+0x2e>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:140
 bpl 2b         @ normalise so leading "1" in bit 31
 8006a26:	d5fb      	bpl.n	8006a20 <packx0+0x2>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:142
3:
 adds r2,#129   @ (mis-)offset exponent
 8006a28:	3281      	adds	r2, #129	; 0x81
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:143
 bne 12f        @ special case: highest denormal can round to lowest normal
 8006a2a:	d101      	bne.n	8006a30 <packx0+0x12>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:144
 adds r0,#0x80  @ in special case, need to add 256 to r0 for rounding
 8006a2c:	3080      	adds	r0, #128	; 0x80
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:145
 bcs 4f         @ tripped carry? then have leading 1 in C as required
 8006a2e:	d205      	bcs.n	8006a3c <packx0+0x1e>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:147
12:
 adds r0,#0x80  @ rounding
 8006a30:	3080      	adds	r0, #128	; 0x80
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:148
 bcs 4f         @ tripped carry? then have leading 1 in C as required (and result is even so can ignore sticky bits)
 8006a32:	d203      	bcs.n	8006a3c <packx0+0x1e>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:149
 cmp r5,#0
 8006a34:	2d00      	cmp	r5, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:150
 beq 7f         @ sticky bits zero?
 8006a36:	d00f      	beq.n	8006a58 <packx0+0x3a>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:152
8:
 lsls r0,#1     @ remove leading 1
 8006a38:	0040      	lsls	r0, r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:154
9:
 subs r2,#1     @ compensate exponent on this path
 8006a3a:	3a01      	subs	r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:156
4:
 cmp r2,#254
 8006a3c:	2afe      	cmp	r2, #254	; 0xfe
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:157
 bge 5f         @ overflow?
 8006a3e:	da06      	bge.n	8006a4e <packx0+0x30>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:158
 adds r2,#1     @ correct exponent offset
 8006a40:	3201      	adds	r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:159
 ble 10f        @ denormal/underflow?
 8006a42:	dd07      	ble.n	8006a54 <packx0+0x36>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:160
 lsrs r0,#9     @ align mantissa
 8006a44:	0a40      	lsrs	r0, r0, #9
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:161
 lsls r2,#23    @ align exponent
 8006a46:	05d2      	lsls	r2, r2, #23
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:162
 orrs r0,r2     @ assemble exponent and mantissa
 8006a48:	4310      	orrs	r0, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:164
6:
 orrs r0,r4     @ apply sign
 8006a4a:	4320      	orrs	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:166
1:
 bx r14
 8006a4c:	4770      	bx	lr
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:169

5:
 movs r0,#0xff  @ create infinity
 8006a4e:	20ff      	movs	r0, #255	; 0xff
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:170
 lsls r0,#23
 8006a50:	05c0      	lsls	r0, r0, #23
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:171
 b 6b
 8006a52:	e7fa      	b.n	8006a4a <packx0+0x2c>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:174

10:
 movs r0,#0     @ create zero
 8006a54:	2000      	movs	r0, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:175
 bx r14
 8006a56:	4770      	bx	lr
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:178

7:              @ sticky bit rounding case
 lsls r5,r0,#24 @ check bottom 8 bits of r0
 8006a58:	0605      	lsls	r5, r0, #24
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:179
 bne 8b         @ in rounding-tie case?
 8006a5a:	d1ed      	bne.n	8006a38 <packx0+0x1a>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:180
 lsrs r0,#9     @ ensure even result
 8006a5c:	0a40      	lsrs	r0, r0, #9
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:181
 lsls r0,#10
 8006a5e:	0280      	lsls	r0, r0, #10
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:182
 b 9b
 8006a60:	e7eb      	b.n	8006a3a <packx0+0x1c>

08006a62 <unpackxyalign>:
unpackxyalign():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:188

@ unpack two arguments (r0,r1) and shift one down to have common exponent, returned in r2; note that arguments are exchanged
@ sticky bits shifted off bottom of smaller argument in r5
@ following code is unnecessarily general for fadd, but is shared with atan2
unpackxyalign:
 push {r14}
 8006a62:	b500      	push	{lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:189
 bl unpackxy
 8006a64:	f7ff ffb6 	bl	80069d4 <unpackxy>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:190
 lsls r0,r0,#6  @ Q29
 8006a68:	0180      	lsls	r0, r0, #6
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:191
 lsls r1,r1,#6  @ Q29
 8006a6a:	0189      	lsls	r1, r1, #6
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:192
 subs r4,r2,r3  @ calculate shift
 8006a6c:	1ad4      	subs	r4, r2, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:193
 bge 1f         @ x>=y?
 8006a6e:	da07      	bge.n	8006a80 <unpackxyalign+0x1e>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:194
 mov r2,r3      @ no: take common exponent from y
 8006a70:	461a      	mov	r2, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:195
 mov r5,r0      @ potential sticky bits from x
 8006a72:	4605      	mov	r5, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:196
 rsbs r4,#0     @ make shift positive
 8006a74:	4264      	negs	r4, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:197
 asrs r0,r4
 8006a76:	4120      	asrs	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:198
 cmp r4,#32
 8006a78:	2c20      	cmp	r4, #32
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:199
 blo 2f
 8006a7a:	d307      	bcc.n	8006a8c <unpackxyalign+0x2a>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:200
 movs r0,#0    @ large shift, so all bits are sticky and result is zero
 8006a7c:	2000      	movs	r0, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:201
 pop {r15}
 8006a7e:	bd00      	pop	{pc}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:203
1:
 mov r5,r1     @ common exponent from x; potential sticky bits from y
 8006a80:	460d      	mov	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:204
 asrs r1,r4
 8006a82:	4121      	asrs	r1, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:205
 cmp r4,#32
 8006a84:	2c20      	cmp	r4, #32
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:206
 blo 2f
 8006a86:	d301      	bcc.n	8006a8c <unpackxyalign+0x2a>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:207
 movs r1,#0    @ large shift, so all bits are sticky and result is zero
 8006a88:	2100      	movs	r1, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:208
 pop {r15}
 8006a8a:	bd00      	pop	{pc}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:210
2:
 rsbs r4,#0
 8006a8c:	4264      	negs	r4, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:211
 adds r4,#32
 8006a8e:	3420      	adds	r4, #32
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:212
 lsls r5,r4    @ extract sticky bits
 8006a90:	40a5      	lsls	r5, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:213
 pop {r15}
 8006a92:	bd00      	pop	{pc}

08006a94 <qfp_fsub>:
qfp_fsub():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:217

.thumb_func
qfp_fsub:
 movs r2,#1    @ subtract: flip sign bit of second argument and fall through to fadd
 8006a94:	2201      	movs	r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:218
 lsls r2,#31
 8006a96:	07d2      	lsls	r2, r2, #31
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:219
 eors r1,r2
 8006a98:	4051      	eors	r1, r2

08006a9a <qfp_fadd>:
qfp_fadd():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:222
.thumb_func
qfp_fadd:
 push {r4,r5,r14}
 8006a9a:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:223
 bl unpackxyalign
 8006a9c:	f7ff ffe1 	bl	8006a62 <unpackxyalign>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:224
 adds r0,r1    @ do addition
 8006aa0:	1840      	adds	r0, r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:225
 bne 2f        @ not in Inf-Inf case?
 8006aa2:	d103      	bne.n	8006aac <packret>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:226
 cmp r2,#200
 8006aa4:	2ac8      	cmp	r2, #200	; 0xc8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:227
 blt 2f
 8006aa6:	db01      	blt.n	8006aac <packret>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:228
 movs r0,#1
 8006aa8:	2001      	movs	r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:229
 lsls r0,#29   @ for Inf-Inf, set mantissa to +1 to prevent zero result
 8006aaa:	0740      	lsls	r0, r0, #29

08006aac <packret>:
packret():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:232
2:
packret:       @ common return point: "pack and return"
 bl packx
 8006aac:	f7ff ffb0 	bl	8006a10 <packx>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:233
 pop {r4,r5,r15}
 8006ab0:	bd30      	pop	{r4, r5, pc}

08006ab2 <mul0>:
mul0():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:238

@ signed multiply r0 1Q23 by r1 4Q23, result in r0 7Q25, sticky bits in r5
@ trashes r3,r4
mul0:
 uxth r3,r0      @ Q23
 8006ab2:	b283      	uxth	r3, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:239
 asrs r4,r1,#16  @ Q7
 8006ab4:	140c      	asrs	r4, r1, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:240
 muls r3,r4      @ L*H, Q30 signed
 8006ab6:	4363      	muls	r3, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:241
 asrs r4,r0,#16  @ Q7
 8006ab8:	1404      	asrs	r4, r0, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:242
 uxth r5,r1      @ Q23
 8006aba:	b28d      	uxth	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:243
 muls r4,r5      @ H*L, Q30 signed
 8006abc:	436c      	muls	r4, r5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:244
 adds r3,r4      @ sum of middle partial products
 8006abe:	191b      	adds	r3, r3, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:245
 uxth r4,r0
 8006ac0:	b284      	uxth	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:246
 muls r4,r5      @ L*L, Q46 unsigned
 8006ac2:	436c      	muls	r4, r5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:247
 lsls r5,r4,#16  @ initialise sticky bits from low half of low partial product
 8006ac4:	0425      	lsls	r5, r4, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:248
 lsrs r4,#16     @ Q25
 8006ac6:	0c24      	lsrs	r4, r4, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:249
 adds r3,r4      @ add high half of low partial product to sum of middle partial products
 8006ac8:	191b      	adds	r3, r3, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:251
                 @ (cannot generate carry by limits on input arguments)
 asrs r0,#16     @ Q7
 8006aca:	1400      	asrs	r0, r0, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:252
 asrs r1,#16     @ Q7
 8006acc:	1409      	asrs	r1, r1, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:253
 muls r0,r1      @ H*H, Q14 signed
 8006ace:	4348      	muls	r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:254
 lsls r0,#11     @ high partial product Q25
 8006ad0:	02c0      	lsls	r0, r0, #11
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:255
 lsls r1,r3,#27  @ sticky
 8006ad2:	06d9      	lsls	r1, r3, #27
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:256
 orrs r5,r1      @ collect further sticky bits
 8006ad4:	430d      	orrs	r5, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:257
 asrs r1,r3,#5   @ middle partial products Q25
 8006ad6:	1159      	asrs	r1, r3, #5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:258
 adds r0,r1      @ final result
 8006ad8:	1840      	adds	r0, r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:259
 bx r14
 8006ada:	4770      	bx	lr

08006adc <qfp_fcmp>:
qfp_fcmp():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:263

.thumb_func
qfp_fcmp:
 movs r2,#1      @ initialise result
 8006adc:	2201      	movs	r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:264
 lsls r3,r2,#31  @ r3=0x80000000
 8006ade:	07d3      	lsls	r3, r2, #31
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:265
 tst r0,r3       @ check sign of first argument
 8006ae0:	4218      	tst	r0, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:266
 beq 1f
 8006ae2:	d000      	beq.n	8006ae6 <qfp_fcmp+0xa>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:267
 subs r0,r3,r0   @ convert to 2's complement form for direct comparison
 8006ae4:	1a18      	subs	r0, r3, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:269
1:
 tst r1,r3       @ repeat for second argument
 8006ae6:	4219      	tst	r1, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:270
 beq 2f
 8006ae8:	d000      	beq.n	8006aec <qfp_fcmp+0x10>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:271
 subs r1,r3,r1
 8006aea:	1a59      	subs	r1, r3, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:273
2:
 subs r0,r1     @ perform comparison
 8006aec:	1a40      	subs	r0, r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:274
 beq 4f         @ equal? return 0
 8006aee:	d002      	beq.n	8006af6 <qfp_fcmp+0x1a>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:275
 bgt 3f         @ r0>r1? return +1
 8006af0:	dc00      	bgt.n	8006af4 <qfp_fcmp+0x18>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:276
 rsbs r2,#0     @ r0<r1: return -1
 8006af2:	4252      	negs	r2, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:278
3:
 mov r0,r2
 8006af4:	4610      	mov	r0, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:280
4:
 bx r14
 8006af6:	4770      	bx	lr

08006af8 <qfp_fmul>:
qfp_fmul():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:284

.thumb_func
qfp_fmul:
 push {r4,r5,r14}
 8006af8:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:285
 bl unpackxy
 8006afa:	f7ff ff6b 	bl	80069d4 <unpackxy>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:286
 add r2,r3      @ sum exponents
 8006afe:	441a      	add	r2, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:287
 adds r2,#4     @ adjust exponent for pack which expects Q29
 8006b00:	3204      	adds	r2, #4

08006b02 <fmul0>:
fmul0():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:289
fmul0:
 bl mul0
 8006b02:	f7ff ffd6 	bl	8006ab2 <mul0>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:290
 b packret
 8006b06:	e7d1      	b.n	8006aac <packret>

08006b08 <qfp_fdiv>:
qfp_fdiv():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:294

.thumb_func
qfp_fdiv:
 push {r4,r5,r14}
 8006b08:	b530      	push	{r4, r5, lr}

08006b0a <fdiv_n>:
fdiv_n():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:296
fdiv_n:
 bl unpackxy
 8006b0a:	f7ff ff63 	bl	80069d4 <unpackxy>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:297
 movs r5,#1      @ result cannot fall exactly half-way between two representable numbers (exercise for reader - note that
 8006b0e:	2501      	movs	r5, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:299
                 @ we do not handle denormals) so there will always be sticky bits
 cmp r0,#0       @ check divisor sign
 8006b10:	2800      	cmp	r0, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:300
 bpl 1f
 8006b12:	d501      	bpl.n	8006b18 <fdiv_n+0xe>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:301
 rsbs r0,#0      @ ensure divisor positive
 8006b14:	4240      	negs	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:302
 rsbs r1,#0      @ preserve sign of result
 8006b16:	4249      	negs	r1, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:304
1:
 movs r4,#0
 8006b18:	2400      	movs	r4, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:305
 cmp r1,#0       @ check sign of dividend
 8006b1a:	2900      	cmp	r1, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:306
 bpl 2f
 8006b1c:	d501      	bpl.n	8006b22 <fdiv_n+0x18>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:307
 rsbs r1,#0      @ result will be negative
 8006b1e:	4249      	negs	r1, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:308
 mvns r4,r4      @ save sign as 0x00000000 or 0xffffffff
 8006b20:	43e4      	mvns	r4, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:310
2:               @ now do unsigned division on unpacked values {r1,r3}/{r0,r2}
 cmp r3,#200     @ dividend is an infinity? return it
 8006b22:	2bc8      	cmp	r3, #200	; 0xc8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:311
 bge 3f
 8006b24:	da0e      	bge.n	8006b44 <infret+0x2>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:312
 rsbs r2,#0
 8006b26:	4252      	negs	r2, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:313
 cmp r2,#200     @ divisor is zero? return infinity
 8006b28:	2ac8      	cmp	r2, #200	; 0xc8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:314
 bge 3f
 8006b2a:	da0b      	bge.n	8006b44 <infret+0x2>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:315
 adds r2,r3      @ difference of exponents
 8006b2c:	18d2      	adds	r2, r2, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:316
 movs r3,#0x40   @ termination marker (calculate enough bits to do rounding correctly)
 8006b2e:	2340      	movs	r3, #64	; 0x40
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:318
2:               @ division loop
 subs r1,r0      @ trial subtraction
 8006b30:	1a09      	subs	r1, r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:319
 bcs 1f
 8006b32:	d200      	bcs.n	8006b36 <fdiv_n+0x2c>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:320
 add r1,r0       @ restore if failed
 8006b34:	4401      	add	r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:322
1:
 adcs r3,r3      @ shift in result bit
 8006b36:	415b      	adcs	r3, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:323
 add r1,r1       @ shift up dividend
 8006b38:	4409      	add	r1, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:324
 bcc 2b          @ loop until marker appears in carry
 8006b3a:	d3f9      	bcc.n	8006b30 <fdiv_n+0x26>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:325
 lsls r0,r3,#4   @ align for packing
 8006b3c:	0118      	lsls	r0, r3, #4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:327
4:
 eors r0,r4      @ apply sign
 8006b3e:	4060      	eors	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:328
 b packret
 8006b40:	e7b4      	b.n	8006aac <packret>

08006b42 <infret>:
infret():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:330
infret:
 movs r4,#0
 8006b42:	2400      	movs	r4, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:332
3:
 mov r0,r1
 8006b44:	4608      	mov	r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:333
 movs r2,#255    @ return infinity
 8006b46:	22ff      	movs	r2, #255	; 0xff
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:334
 b 4b
 8006b48:	e7f9      	b.n	8006b3e <fdiv_n+0x34>

08006b4a <qfp_fdiv_fast>:
qfp_fdiv_fast():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:349
@ cases the value is known to be very close to an integer (usually 1) and so the bits of greater significance do not need
@ to be stored.
@ The reciprocal calculation has been tested for all possible input mantissa values.
.thumb_func
qfp_fdiv_fast:
 push {r4,r5,r14}
 8006b4a:	b530      	push	{r4, r5, lr}

08006b4c <fdiv_fast_n>:
fdiv_fast_n():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:351
fdiv_fast_n:
 bl unpackxy
 8006b4c:	f7ff ff42 	bl	80069d4 <unpackxy>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:352
 cmp r0,#0
 8006b50:	2800      	cmp	r0, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:353
 bpl 1f
 8006b52:	d501      	bpl.n	8006b58 <fdiv_fast_n+0xc>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:354
 rsbs r0,#0
 8006b54:	4240      	negs	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:355
 rsbs r1,#0      @ ensure divisor positive
 8006b56:	4249      	negs	r1, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:357
1:
 cmp r3,#200
 8006b58:	2bc8      	cmp	r3, #200	; 0xc8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:358
 bge infret      @ dividend is an infinity? return it
 8006b5a:	daf2      	bge.n	8006b42 <infret>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:359
 rsbs r2,#0
 8006b5c:	4252      	negs	r2, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:360
 cmp r2,#200     @ divisor is zero?
 8006b5e:	2ac8      	cmp	r2, #200	; 0xc8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:361
 bge infret      @ return infinity
 8006b60:	daef      	bge.n	8006b42 <infret>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:362
 adds r2,r3      @ difference of exponents
 8006b62:	18d2      	adds	r2, r2, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:363
 adr r4,rcpapp-8 @ the first 8 elements of the table are never accessed because of the mantissa's leading 1
 8006b64:	a423      	add	r4, pc, #140	; (adr r4, 8006bf4 <qfp_fsqrt_fast+0x5a>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:364
 lsrs r3,r0,#20  @ y Q23; y>>20 Q7
 8006b66:	0d03      	lsrs	r3, r0, #20
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:365
 ldrb r4,[r4,r3] @ m=rcpapp[(y>>20)&7]; // Q8, .5<m<1
 8006b68:	5ce4      	ldrb	r4, [r4, r3]
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:367

 lsls r3,r4,#2   @ m<<2         // Q10  first Newton-Raphson iteration
 8006b6a:	00a3      	lsls	r3, r4, #2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:368
 muls r3,r0      @ s=y*(m<<2);  // Q33
 8006b6c:	4343      	muls	r3, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:369
 lsls r4,#8      @ m<<=8;       // Q16
 8006b6e:	0224      	lsls	r4, r4, #8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:370
 asrs r3,#21     @ s>>=21;      // Q12
 8006b70:	155b      	asrs	r3, r3, #21
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:371
 muls r3,r4      @ s*=m;        // Q28
 8006b72:	4363      	muls	r3, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:372
 asrs r3,#12     @ s>>=12;      // Q16
 8006b74:	131b      	asrs	r3, r3, #12
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:373
 subs r4,r3      @ m=m-s;       // Q16
 8006b76:	1ae4      	subs	r4, r4, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:375

 mov r3,r4       @ s=y*m        // Q39 second Newton-Raphson iteration
 8006b78:	4623      	mov	r3, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:376
 muls r4,r0      @ ...
 8006b7a:	4344      	muls	r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:377
 asrs r4,#16     @ s>>=16;      // Q23
 8006b7c:	1424      	asrs	r4, r4, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:378
 muls r4,r3      @ s*=m;        // Q39
 8006b7e:	435c      	muls	r4, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:379
 lsls r3,#8      @ m<<=8;       // Q24
 8006b80:	021b      	lsls	r3, r3, #8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:380
 asrs r4,#15     @ s>>=15;      // Q24
 8006b82:	13e4      	asrs	r4, r4, #15
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:381
 subs r3,r4      @ m=m-s;       // Q24
 8006b84:	1b1b      	subs	r3, r3, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:383

 lsls r4,r3,#7   @ \/ s=y*m;    // Q47 third Newton-Raphson iteration
 8006b86:	01dc      	lsls	r4, r3, #7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:384
 muls r3,r0      @ /\ m<<=7;    // Q31
 8006b88:	4343      	muls	r3, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:385
 asrs r3,#15     @ s>>=15;      // Q32
 8006b8a:	13db      	asrs	r3, r3, #15
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:386
 lsrs r0,r4,#16  @ s*=(m>>16);  // Q47
 8006b8c:	0c20      	lsrs	r0, r4, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:387
 muls r3,r0      @ ...
 8006b8e:	4343      	muls	r3, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:388
 asrs r3,#16     @ s>>=16;      // Q31
 8006b90:	141b      	asrs	r3, r3, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:389
 subs r0,r4,r3   @ m=m-s;       // Q31
 8006b92:	1ae0      	subs	r0, r4, r3

08006b94 <div0>:
div0():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:391
div0:
 adds r0,#7      @ rounding; reduce systematic error
 8006b94:	3007      	adds	r0, #7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:392
 lsrs r0,#4      @ Q27
 8006b96:	0900      	lsrs	r0, r0, #4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:393
 b fmul0         @ drop into multiplication code to calculate result
 8006b98:	e7b3      	b.n	8006b02 <fmul0>

08006b9a <qfp_fsqrt_fast>:
qfp_fsqrt_fast():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:404
@ Again, the fixed-point calculation is carefully implemented to preserve accuracy, and similar comments to those
@ made above on the fast division routine apply.
@ The reciprocal square root calculation has been tested for all possible (possibly shifted) input mantissa values.
.thumb_func
qfp_fsqrt_fast:
 push {r4,r5,r14}
 8006b9a:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:405
 bl unpackx
 8006b9c:	f7ff ff21 	bl	80069e2 <unpackx>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:406
 movs r1,r0
 8006ba0:	0001      	movs	r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:407
 bmi infret       @ negative? return -Inf
 8006ba2:	d4ce      	bmi.n	8006b42 <infret>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:408
 asrs r0,r2,#1    @ check LSB of exponent
 8006ba4:	1050      	asrs	r0, r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:409
 bcc 1f
 8006ba6:	d300      	bcc.n	8006baa <qfp_fsqrt_fast+0x10>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:410
 lsls r1,#1       @ was odd: double mantissa; mantissa y now 1..4 Q23
 8006ba8:	0049      	lsls	r1, r1, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:412
1:
 adds r2,#4       @ correction for packing
 8006baa:	3204      	adds	r2, #4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:413
 adr r4,rsqrtapp-4@ first four table entries are never accessed because of the mantissa's leading 1
 8006bac:	a414      	add	r4, pc, #80	; (adr r4, 8006c00 <rcpapp+0x4>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:414
 lsrs r3,r1,#21   @ y>>21 Q2
 8006bae:	0d4b      	lsrs	r3, r1, #21
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:415
 ldrb r4,[r4,r3]  @ initial approximation to reciprocal square root m Q8
 8006bb0:	5ce4      	ldrb	r4, [r4, r3]
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:417

 lsrs r0,r1,#7    @ y>>7             // Q16 first Newton-Raphson iteration
 8006bb2:	09c8      	lsrs	r0, r1, #7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:418
 muls r0,r4       @ m*y
 8006bb4:	4360      	muls	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:419
 muls r0,r4       @ s=m*y*y          // Q32
 8006bb6:	4360      	muls	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:420
 asrs r0,#12      @ s>>12
 8006bb8:	1300      	asrs	r0, r0, #12
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:421
 muls r0,r4       @ m*s              // Q28
 8006bba:	4360      	muls	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:422
 asrs r0,#13      @ m*s              // Q15
 8006bbc:	1340      	asrs	r0, r0, #13
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:423
 lsls r4,#8       @ m                // Q16
 8006bbe:	0224      	lsls	r4, r4, #8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:424
 subs r4,r0       @ m=(m<<8)-(s>>13) // Q16-Q15/2 -> Q16
 8006bc0:	1a24      	subs	r4, r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:426

 mov r0,r4        @                  // second Newton-Raphson iteration
 8006bc2:	4620      	mov	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:427
 muls r0,r0       @ u=m*m            // Q32
 8006bc4:	4340      	muls	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:428
 lsrs r0,#16      @ u>>16            // Q16
 8006bc6:	0c00      	lsrs	r0, r0, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:429
 lsrs r3,r1,#7    @ y>>7             // Q16
 8006bc8:	09cb      	lsrs	r3, r1, #7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:430
 muls r0,r3       @ s=u*(y>>7)       // Q32
 8006bca:	4358      	muls	r0, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:431
 asrs r0,#12      @ s>>12            // Q20
 8006bcc:	1300      	asrs	r0, r0, #12
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:432
 muls r0,r4       @ s*m              // Q36
 8006bce:	4360      	muls	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:433
 asrs r0,#21      @ s*m              // Q15
 8006bd0:	1540      	asrs	r0, r0, #21
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:434
 subs r4,r0       @ m=m-s            // Q16-Q15/2
 8006bd2:	1a24      	subs	r4, r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:436

 mov r0,r4        @                  // third Newton-Raphson iteration
 8006bd4:	4620      	mov	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:437
 muls r0,r0       @ u=m*m            // Q32
 8006bd6:	4340      	muls	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:438
 lsrs r3,r0,#12   @ now multiply u and y in two parts: u>>12
 8006bd8:	0b03      	lsrs	r3, r0, #12
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:439
 muls r3,r1       @ first partial product (u>>12)*y Q43
 8006bda:	434b      	muls	r3, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:440
 lsls r0,#20
 8006bdc:	0500      	lsls	r0, r0, #20
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:441
 lsrs r0,#20      @ u&0xfff
 8006bde:	0d00      	lsrs	r0, r0, #20
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:442
 lsrs r5,r1,#12   @ y>>12
 8006be0:	0b0d      	lsrs	r5, r1, #12
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:443
 muls r0,r5       @ second partial product (u&0xfff)*(y>>12) Q43
 8006be2:	4368      	muls	r0, r5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:444
 add r0,r3        @ s=u*y            // Q43
 8006be4:	4418      	add	r0, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:445
 asrs r0,#15      @ s>>15            // Q28
 8006be6:	13c0      	asrs	r0, r0, #15
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:446
 muls r0,r4       @ (s>>15)*m        // Q44
 8006be8:	4360      	muls	r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:447
 lsls r4,#13      @ m<<13            // Q29
 8006bea:	0364      	lsls	r4, r4, #13
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:448
 asrs r0,#16      @ s>>16            // Q28
 8006bec:	1400      	asrs	r0, r0, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:449
 subs r0,r4,r0    @                  // Q29-Q28/2
 8006bee:	1a20      	subs	r0, r4, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:451

 asrs r2,#1       @ halve exponent
 8006bf0:	1052      	asrs	r2, r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:452
 bcc div0         @ was y shifted?
 8006bf2:	d3cf      	bcc.n	8006b94 <div0>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:453
 lsrs r0,#1
 8006bf4:	0840      	lsrs	r0, r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:454
 lsls r1,#1       @ shift y back
 8006bf6:	0049      	lsls	r1, r1, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:455
 b div0           @ round and complete with multiplication
 8006bf8:	e7cc      	b.n	8006b94 <div0>
 8006bfa:	46c0      	nop			; (mov r8, r8)

08006bfc <rcpapp>:
rcpapp():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:455
 8006bfc:	b2c3d8f1 	.word	0xb2c3d8f1
 8006c00:	848d98a4 	.word	0x848d98a4

08006c04 <rsqrtapp>:
rsqrtapp():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:455
 8006c04:	bbc9daf1 	.word	0xbbc9daf1
 8006c08:	979ea6b0 	.word	0x979ea6b0
 8006c0c:	82868b91 	.word	0x82868b91

08006c10 <qfp_float2int>:
qfp_float2int():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:474
.if include_conversions

@ convert float to signed int, rounding towards -Inf, clamping
.thumb_func
qfp_float2int:
 movs r1,#0      @ fall through
 8006c10:	2100      	movs	r1, #0

08006c12 <qfp_float2fix>:
qfp_float2fix():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:479

@ convert float in r0 to signed fixed point in r0, clamping
.thumb_func
qfp_float2fix:
 push {r4,r14}
 8006c12:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:480
 bl unpackx
 8006c14:	f7ff fee5 	bl	80069e2 <unpackx>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:481
 add r2,r1       @ incorporate binary point position into exponent
 8006c18:	440a      	add	r2, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:482
 subs r2,#23     @ r2 is now amount of left shift required
 8006c1a:	3a17      	subs	r2, #23
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:483
 blt 1f          @ requires right shift?
 8006c1c:	db07      	blt.n	8006c2e <qfp_float2fix+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:484
 cmp r2,#7       @ overflow?
 8006c1e:	2a07      	cmp	r2, #7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:485
 ble 4f
 8006c20:	dd17      	ble.n	8006c52 <qfp_float2ufix+0x16>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:487
3:               @ overflow
 asrs r1,r0,#31  @ +ve:0 -ve:0xffffffff
 8006c22:	17c1      	asrs	r1, r0, #31
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:488
 mvns r1,r1      @ +ve:0xffffffff -ve:0
 8006c24:	43c9      	mvns	r1, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:489
 movs r0,#1
 8006c26:	2001      	movs	r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:490
 lsls r0,#31
 8006c28:	07c0      	lsls	r0, r0, #31
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:492
5:
 eors r0,r1      @ +ve:0x7fffffff -ve:0x80000000 (unsigned path: 0xffffffff)
 8006c2a:	4048      	eors	r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:493
 pop {r4,r15}
 8006c2c:	bd10      	pop	{r4, pc}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:495
1:
 rsbs r2,#0      @ right shift for r0, >0
 8006c2e:	4252      	negs	r2, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:496
 cmp r2,#32
 8006c30:	2a20      	cmp	r2, #32
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:497
 blt 2f          @ more than 32 bits of right shift?
 8006c32:	db00      	blt.n	8006c36 <qfp_float2fix+0x24>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:498
 movs r2,#32
 8006c34:	2220      	movs	r2, #32
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:500
2:
 asrs r0,r0,r2
 8006c36:	4110      	asrs	r0, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:501
 pop {r4,r15}
 8006c38:	bd10      	pop	{r4, pc}

08006c3a <qfp_float2uint>:
qfp_float2uint():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:506

@ unsigned version
.thumb_func
qfp_float2uint:
 movs r1,#0      @ fall through
 8006c3a:	2100      	movs	r1, #0

08006c3c <qfp_float2ufix>:
qfp_float2ufix():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:509
.thumb_func
qfp_float2ufix:
 push {r4,r14}
 8006c3c:	b510      	push	{r4, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:510
 bl unpackx
 8006c3e:	f7ff fed0 	bl	80069e2 <unpackx>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:511
 add r2,r1       @ incorporate binary point position into exponent
 8006c42:	440a      	add	r2, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:512
 movs r1,r0
 8006c44:	0001      	movs	r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:513
 bmi 5b          @ negative? return zero
 8006c46:	d4f0      	bmi.n	8006c2a <qfp_float2fix+0x18>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:514
 subs r2,#23     @ r2 is now amount of left shift required
 8006c48:	3a17      	subs	r2, #23
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:515
 blt 1b          @ requires right shift?
 8006c4a:	dbf0      	blt.n	8006c2e <qfp_float2fix+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:516
 mvns r1,r0      @ ready to return 0xffffffff
 8006c4c:	43c1      	mvns	r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:517
 cmp r2,#8       @ overflow?
 8006c4e:	2a08      	cmp	r2, #8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:518
 bgt 5b
 8006c50:	dceb      	bgt.n	8006c2a <qfp_float2fix+0x18>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:520
4:
 lsls r0,r0,r2   @ result fits, left shifted
 8006c52:	4090      	lsls	r0, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:521
 pop {r4,r15}
 8006c54:	bd10      	pop	{r4, pc}

08006c56 <qfp_int2float>:
qfp_int2float():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:526

@ convert signed int to float, rounding
.thumb_func
qfp_int2float:
 movs r1,#0      @ fall through
 8006c56:	2100      	movs	r1, #0

08006c58 <qfp_fix2float>:
qfp_fix2float():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:531

@ convert signed fix to float, rounding; number of r0 bits after point in r1
.thumb_func
qfp_fix2float:
 push {r4,r5,r14}
 8006c58:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:533
1:
 movs r2,#29
 8006c5a:	221d      	movs	r2, #29
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:534
 subs r2,r1      @ fix exponent
 8006c5c:	1a52      	subs	r2, r2, r1

08006c5e <packretns>:
packretns():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:536
packretns:       @ pack and return, sticky bits=0
 movs r5,#0
 8006c5e:	2500      	movs	r5, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:537
 b packret
 8006c60:	e724      	b.n	8006aac <packret>

08006c62 <qfp_uint2float>:
qfp_uint2float():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:542

@ unsigned version
.thumb_func
qfp_uint2float:
 movs r1,#0      @ fall through
 8006c62:	2100      	movs	r1, #0

08006c64 <qfp_ufix2float>:
qfp_ufix2float():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:545
.thumb_func
qfp_ufix2float:
 push {r4,r5,r14}
 8006c64:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:546
 cmp r0,#0
 8006c66:	2800      	cmp	r0, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:547
 bge 1b          @ treat <2^31 as signed
 8006c68:	daf7      	bge.n	8006c5a <qfp_fix2float+0x2>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:548
 movs r2,#30
 8006c6a:	221e      	movs	r2, #30
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:549
 subs r2,r1      @ fix exponent
 8006c6c:	1a52      	subs	r2, r2, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:550
 lsls r5,r0,#31  @ one sticky bit
 8006c6e:	07c5      	lsls	r5, r0, #31
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:551
 lsrs r0,#1
 8006c70:	0840      	lsrs	r0, r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:552
 b packret
 8006c72:	e71b      	b.n	8006aac <packret>

08006c74 <cordic_start>:
cordic_start():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:572
@ r3: coefficient pointer
@ r4,r8: m
@ r5: i (shift)

cordic_start: @ initialisation
 mov r7,r8
 8006c74:	4647      	mov	r7, r8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:573
 push {r7}
 8006c76:	b480      	push	{r7}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:574
 movs r5,#0   @ initial shift=0
 8006c78:	2500      	movs	r5, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:575
 mov r8,r4
 8006c7a:	46a0      	mov	r8, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:576
 b 5f
 8006c7c:	e00d      	b.n	8006c9a <cordic_rstep+0x16>

08006c7e <cordic_vstep>:
cordic_vstep():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:579

cordic_vstep: @ one step of algorithm in vector mode
 cmp r1,#0    @ check sign of y
 8006c7e:	2900      	cmp	r1, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:580
 bgt 4f
 8006c80:	dc02      	bgt.n	8006c88 <cordic_rstep+0x4>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:581
 b 1f
 8006c82:	e005      	b.n	8006c90 <cordic_rstep+0xc>

08006c84 <cordic_rstep>:
cordic_rstep():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:583
cordic_rstep: @ one step of algorithm in rotation mode
 cmp r2,#0    @ check sign of angle
 8006c84:	2a00      	cmp	r2, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:584
 bge 1f
 8006c86:	da03      	bge.n	8006c90 <cordic_rstep+0xc>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:586
4:
 subs r1,r6   @ negative rotation: y=y-(x>>i)
 8006c88:	1b89      	subs	r1, r1, r6
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:587
 rsbs r7,#0
 8006c8a:	427f      	negs	r7, r7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:588
 adds r2,r4   @ accumulate angle
 8006c8c:	1912      	adds	r2, r2, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:589
 b 2f
 8006c8e:	e001      	b.n	8006c94 <cordic_rstep+0x10>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:591
1:
 adds r1,r6   @ positive rotation: y=y+(x>>i)
 8006c90:	1989      	adds	r1, r1, r6
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:592
 subs r2,r4   @ accumulate angle
 8006c92:	1b12      	subs	r2, r2, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:594
2:
 mov r4,r8
 8006c94:	4644      	mov	r4, r8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:595
 muls r7,r4   @ apply sign from m
 8006c96:	4367      	muls	r7, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:596
 subs r0,r7   @ finish rotation: x=x{+/-}(y>>i)
 8006c98:	1bc0      	subs	r0, r0, r7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:598
5:
 ldr r4,[r3]  @ fetch next angle from table
 8006c9a:	681c      	ldr	r4, [r3, #0]
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:599
 adds r3,#4   @ bump pointer
 8006c9c:	3304      	adds	r3, #4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:600
 lsrs r4,#1   @ repeated angle?
 8006c9e:	0864      	lsrs	r4, r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:601
 bcs 3f
 8006ca0:	d200      	bcs.n	8006ca4 <cordic_rstep+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:602
 adds r5,#1   @ adjust shift if not
 8006ca2:	3501      	adds	r5, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:604
3:
 mov r6,r0
 8006ca4:	4606      	mov	r6, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:605
 asrs r6,r5   @ x>>i
 8006ca6:	412e      	asrs	r6, r5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:606
 mov r7,r1
 8006ca8:	460f      	mov	r7, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:607
 asrs r7,r5   @ y>>i
 8006caa:	412f      	asrs	r7, r5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:608
 lsrs r4,#1   @ shift end flag into carry
 8006cac:	0864      	lsrs	r4, r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:609
 bx r14
 8006cae:	4770      	bx	lr

08006cb0 <cordic_rot>:
cordic_rot():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:613

@ CORDIC rotation mode
cordic_rot:
 push {r6,r7,r14}
 8006cb0:	b5c0      	push	{r6, r7, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:614
 bl cordic_start   @ initialise
 8006cb2:	f7ff ffdf 	bl	8006c74 <cordic_start>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:616
1:
 bl cordic_rstep
 8006cb6:	f7ff ffe5 	bl	8006c84 <cordic_rstep>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:617
 bcc 1b            @ step until table finished
 8006cba:	d3fc      	bcc.n	8006cb6 <cordic_rot+0x6>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:618
 asrs r6,r0,#14    @ remaining small rotations can be linearised: see IV.B of paper referenced above
 8006cbc:	1386      	asrs	r6, r0, #14
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:619
 asrs r7,r1,#14
 8006cbe:	138f      	asrs	r7, r1, #14
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:620
 asrs r2,#3
 8006cc0:	10d2      	asrs	r2, r2, #3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:621
 muls r6,r2        @ all remaining CORDIC steps in a multiplication
 8006cc2:	4356      	muls	r6, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:622
 muls r7,r2
 8006cc4:	4357      	muls	r7, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:623
 mov r4,r8
 8006cc6:	4644      	mov	r4, r8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:624
 muls r7,r4
 8006cc8:	4367      	muls	r7, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:625
 asrs r6,#12
 8006cca:	1336      	asrs	r6, r6, #12
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:626
 asrs r7,#12
 8006ccc:	133f      	asrs	r7, r7, #12
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:627
 subs r0,r7        @ x=x{+/-}(yz>>k)
 8006cce:	1bc0      	subs	r0, r0, r7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:628
 adds r1,r6        @ y=y+(xz>>k)
 8006cd0:	1989      	adds	r1, r1, r6

08006cd2 <cordic_exit>:
cordic_exit():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:630
cordic_exit:
 pop {r7}
 8006cd2:	bc80      	pop	{r7}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:631
 mov r8,r7
 8006cd4:	46b8      	mov	r8, r7
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:632
 pop {r6,r7,r15}
 8006cd6:	bdc0      	pop	{r6, r7, pc}

08006cd8 <cordic_vec>:
cordic_vec():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:636

@ CORDIC vector mode
cordic_vec:
 push {r6,r7,r14}
 8006cd8:	b5c0      	push	{r6, r7, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:637
 bl cordic_start   @ initialise
 8006cda:	f7ff ffcb 	bl	8006c74 <cordic_start>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:639
1:
 bl cordic_vstep
 8006cde:	f7ff ffce 	bl	8006c7e <cordic_vstep>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:640
 bcc 1b            @ step until table finished
 8006ce2:	d3fc      	bcc.n	8006cde <cordic_vec+0x6>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:642
4:
 cmp r1,#0         @ continue as in cordic_vstep but without using table; x is not affected as y is small
 8006ce4:	2900      	cmp	r1, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:643
 bgt 2f            @ check sign of y
 8006ce6:	dc02      	bgt.n	8006cee <cordic_vec+0x16>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:644
 adds r1,r6        @ positive rotation: y=y+(x>>i)
 8006ce8:	1989      	adds	r1, r1, r6
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:645
 subs r2,r4        @ accumulate angle
 8006cea:	1b12      	subs	r2, r2, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:646
 b 3f
 8006cec:	e001      	b.n	8006cf2 <cordic_vec+0x1a>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:648
2:
 subs r1,r6        @ negative rotation: y=y-(x>>i)
 8006cee:	1b89      	subs	r1, r1, r6
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:649
 adds r2,r4        @ accumulate angle
 8006cf0:	1912      	adds	r2, r2, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:651
3:
 asrs r6,#1
 8006cf2:	1076      	asrs	r6, r6, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:652
 asrs r4,#1        @ next "table entry"
 8006cf4:	1064      	asrs	r4, r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:653
 bne 4b
 8006cf6:	d1f5      	bne.n	8006ce4 <cordic_vec+0xc>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:654
 b cordic_exit
 8006cf8:	e7eb      	b.n	8006cd2 <cordic_exit>

08006cfa <qfp_fsin>:
qfp_fsin():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:658

.thumb_func
qfp_fsin:            @ calculate sin and cos using CORDIC rotation method
 push {r4,r5,r14}
 8006cfa:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:659
 movs r1,#24
 8006cfc:	2118      	movs	r1, #24
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:660
 bl qfp_float2fix    @ range reduction by repeated subtraction/addition in fixed point
 8006cfe:	f7ff ff88 	bl	8006c12 <qfp_float2fix>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:661
 ldr r4,pi_q29
 8006d02:	4c48      	ldr	r4, [pc, #288]	; (8006e24 <pi_q29>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:662
 lsrs r4,#4          @ 2pi Q24
 8006d04:	0924      	lsrs	r4, r4, #4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:664
1:
 subs r0,r4
 8006d06:	1b00      	subs	r0, r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:665
 bge 1b
 8006d08:	dafd      	bge.n	8006d06 <qfp_fsin+0xc>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:667
1:
 adds r0,r4
 8006d0a:	1900      	adds	r0, r0, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:668
 bmi 1b              @ now in range 0..2pi
 8006d0c:	d4fd      	bmi.n	8006d0a <qfp_fsin+0x10>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:669
 lsls r2,r0,#2       @ z Q26
 8006d0e:	0082      	lsls	r2, r0, #2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:670
 lsls r5,r4,#1       @ pi Q26 (r4=pi/2 Q26)
 8006d10:	0065      	lsls	r5, r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:671
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8006d12:	483e      	ldr	r0, [pc, #248]	; (8006e0c <qfp_fatan2+0x30>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:672
 movs r1,#0
 8006d14:	2100      	movs	r1, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:674
1:
 cmp r2,r4           @ >pi/2?
 8006d16:	42a2      	cmp	r2, r4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:675
 blt 2f
 8006d18:	db02      	blt.n	8006d20 <qfp_fsin+0x26>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:676
 subs r2,r5          @ reduce range to -pi/2..pi/2
 8006d1a:	1b52      	subs	r2, r2, r5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:677
 rsbs r0,#0          @ rotate vector by pi
 8006d1c:	4240      	negs	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:678
 b 1b
 8006d1e:	e7fa      	b.n	8006d16 <qfp_fsin+0x1c>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:680
2:
 lsls r2,#3          @ Q29
 8006d20:	00d2      	lsls	r2, r2, #3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:681
 adr r3,tab_cc       @ circular coefficients
 8006d22:	a340      	add	r3, pc, #256	; (adr r3, 8006e24 <pi_q29>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:682
 movs r4,#1          @ m=1
 8006d24:	2401      	movs	r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:683
 bl cordic_rot
 8006d26:	f7ff ffc3 	bl	8006cb0 <cordic_rot>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:684
 adds r1,#9          @ fiddle factor to make sin(0)==0
 8006d2a:	3109      	adds	r1, #9
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:685
 movs r2,#0          @ exponents to zero
 8006d2c:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:686
 movs r3,#0
 8006d2e:	2300      	movs	r3, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:687
 movs r5,#0          @ no sticky bits
 8006d30:	2500      	movs	r5, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:688
 bl packx            @ pack cosine
 8006d32:	f7ff fe6d 	bl	8006a10 <packx>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:689
 bl xchxy
 8006d36:	f7ff fe49 	bl	80069cc <xchxy>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:690
 b packretns         @ pack sine
 8006d3a:	e790      	b.n	8006c5e <packretns>

08006d3c <qfp_fcos>:
qfp_fcos():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:694

.thumb_func
qfp_fcos:
 push {r14}
 8006d3c:	b500      	push	{lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:695
 bl qfp_fsin
 8006d3e:	f7ff ffdc 	bl	8006cfa <qfp_fsin>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:696
 mov r0,r1           @ extract cosine result
 8006d42:	4608      	mov	r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:697
 pop {r15}
 8006d44:	bd00      	pop	{pc}

08006d46 <qfp_ftan>:
qfp_ftan():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:701

.thumb_func
qfp_ftan:
 push {r4,r5,r14}
 8006d46:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:702
 bl qfp_fsin         @ sine in r0/r2, cosine in r1/r3
 8006d48:	f7ff ffd7 	bl	8006cfa <qfp_fsin>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:704
.if include_faster
 b fdiv_fast_n       @ sin/cos
 8006d4c:	e6fe      	b.n	8006b4c <fdiv_fast_n>

08006d4e <qfp_fexp>:
qfp_fexp():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:712

.endif

.thumb_func
qfp_fexp:            @ calculate cosh and sinh using rotation method; add to obtain exp
 push {r4,r5,r14}
 8006d4e:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:713
 movs r1,#24
 8006d50:	2118      	movs	r1, #24
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:714
 bl qfp_float2fix    @ Q24: covers entire valid input range
 8006d52:	f7ff ff5e 	bl	8006c12 <qfp_float2fix>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:715
 asrs r1,r0,#16      @ Q8
 8006d56:	1401      	asrs	r1, r0, #16
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:716
 ldr r2,=#5909       @ log_2(e) Q12
 8006d58:	4a2d      	ldr	r2, [pc, #180]	; (8006e10 <qfp_fatan2+0x34>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:717
 muls r1,r2          @ estimate exponent of result Q20
 8006d5a:	4351      	muls	r1, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:718
 asrs r1,#19         @ Q1
 8006d5c:	14c9      	asrs	r1, r1, #19
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:719
 adds r1,#1          @ rounding
 8006d5e:	3101      	adds	r1, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:720
 asrs r1,#1          @ rounded estimate of exponent of result
 8006d60:	1049      	asrs	r1, r1, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:721
 push {r1}           @ save for later
 8006d62:	b402      	push	{r1}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:722
 lsls r2,r0,#5       @ Q29
 8006d64:	0142      	lsls	r2, r0, #5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:723
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8006d66:	482b      	ldr	r0, [pc, #172]	; (8006e14 <qfp_fatan2+0x38>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:724
 muls r1,r0          @ accurate contribution of estimated exponent
 8006d68:	4341      	muls	r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:725
 subs r2,r1          @ residual to be exponentiated, approximately -.5..+.5 Q29
 8006d6a:	1a52      	subs	r2, r2, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:726
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8006d6c:	482a      	ldr	r0, [pc, #168]	; (8006e18 <qfp_fatan2+0x3c>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:727
 movs r1,#0
 8006d6e:	2100      	movs	r1, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:728
 adr r3,tab_ch       @ hyperbolic coefficients
 8006d70:	a339      	add	r3, pc, #228	; (adr r3, 8006e58 <tab_ch>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:729
 mvns r4,r1          @ m=-1
 8006d72:	43cc      	mvns	r4, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:730
 bl cordic_rot       @ calculate cosh and sinh
 8006d74:	f7ff ff9c 	bl	8006cb0 <cordic_rot>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:731
 add r0,r1           @ exp=cosh+sinh
 8006d78:	4408      	add	r0, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:732
 pop {r2}            @ recover exponent
 8006d7a:	bc04      	pop	{r2}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:733
 b packretns         @ pack result
 8006d7c:	e76f      	b.n	8006c5e <packretns>

08006d7e <qfp_fsqrt>:
qfp_fsqrt():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:737

.thumb_func
qfp_fsqrt:           @ calculate sqrt and ln using vector method
 push {r4,r5,r14}
 8006d7e:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:738
 bl unpackx
 8006d80:	f7ff fe2f 	bl	80069e2 <unpackx>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:739
 movs r1,r0          @ -ve argument?
 8006d84:	0001      	movs	r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:740
 bmi 3f              @ return -Inf, -Inf
 8006d86:	d415      	bmi.n	8006db4 <qfp_fsqrt+0x36>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:741
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 8006d88:	4924      	ldr	r1, [pc, #144]	; (8006e1c <qfp_fatan2+0x40>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:742
 bl mul0             @ Q29
 8006d8a:	f7ff fe92 	bl	8006ab2 <mul0>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:743
 asrs r1,r2,#1       @ halve exponent
 8006d8e:	1051      	asrs	r1, r2, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:744
 bcc 1f
 8006d90:	d301      	bcc.n	8006d96 <qfp_fsqrt+0x18>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:745
 adds r1,#1          @ was odd: add 1 and shift mantissa
 8006d92:	3101      	adds	r1, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:746
 asrs r0,#1
 8006d94:	1040      	asrs	r0, r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:748
1:
 push {r1}           @ save exponent/2 for later
 8006d96:	b402      	push	{r1}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:749
 mov r1,r0
 8006d98:	4601      	mov	r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:750
 ldr r3,=#0x0593C2B9 @ re-use constant
 8006d9a:	4b20      	ldr	r3, [pc, #128]	; (8006e1c <qfp_fatan2+0x40>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:751
 lsls r3,#2
 8006d9c:	009b      	lsls	r3, r3, #2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:752
 adds r0,r3          @ "a+1"
 8006d9e:	18c0      	adds	r0, r0, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:753
 subs r1,r3          @ "a-1"
 8006da0:	1ac9      	subs	r1, r1, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:754
 movs r2,#0
 8006da2:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:755
 adr r3,tab_ch       @ hyperbolic coefficients
 8006da4:	a32c      	add	r3, pc, #176	; (adr r3, 8006e58 <tab_ch>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:756
 mvns r4,r2          @ m=-1
 8006da6:	43d4      	mvns	r4, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:757
 bl cordic_vec
 8006da8:	f7ff ff96 	bl	8006cd8 <cordic_vec>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:758
 mov r1,r2           @ keep ln result
 8006dac:	4611      	mov	r1, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:759
 pop {r2}            @ retrieve exponent/2
 8006dae:	bc04      	pop	{r2}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:761
2:
 movs r3,r2
 8006db0:	0013      	movs	r3, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:762
 b packretns         @ pack sqrt result
 8006db2:	e754      	b.n	8006c5e <packretns>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:765

3:
 movs r2,#255
 8006db4:	22ff      	movs	r2, #255	; 0xff
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:766
 b 2b
 8006db6:	e7fb      	b.n	8006db0 <qfp_fsqrt+0x32>

08006db8 <qfp_fln>:
qfp_fln():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:770

.thumb_func
qfp_fln:
 push {r4,r5,r14}
 8006db8:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:771
 bl qfp_fsqrt            @ get unpacked ln in r1/r3; exponent has been halved
 8006dba:	f7ff ffe0 	bl	8006d7e <qfp_fsqrt>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:772
 cmp r3,#70              @ ln(Inf)?
 8006dbe:	2b46      	cmp	r3, #70	; 0x46
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:773
 bgt 2f                  @ return Inf
 8006dc0:	dc0a      	bgt.n	8006dd8 <qfp_fln+0x20>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:774
 rsbs r3,#0
 8006dc2:	425b      	negs	r3, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:775
 cmp r3,#70
 8006dc4:	2b46      	cmp	r3, #70	; 0x46
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:776
 bgt 1f                  @ ln(0)? return -Inf
 8006dc6:	dc06      	bgt.n	8006dd6 <qfp_fln+0x1e>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:778
3:
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8006dc8:	4815      	ldr	r0, [pc, #84]	; (8006e20 <qfp_fatan2+0x44>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:779
 muls r0,r3              @ contribution from negated, halved exponent
 8006dca:	4358      	muls	r0, r3
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:780
 adds r1,#8              @ round result of ln
 8006dcc:	3108      	adds	r1, #8
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:781
 asrs r1,#4              @ Q24
 8006dce:	1109      	asrs	r1, r1, #4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:782
 subs r0,r1,r0           @ add in contribution from (negated) exponent
 8006dd0:	1a08      	subs	r0, r1, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:783
 movs r2,#5              @ pack expects Q29
 8006dd2:	2205      	movs	r2, #5
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:784
 b packretns
 8006dd4:	e743      	b.n	8006c5e <packretns>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:786
1:
 mvns r0,r0              @ make result -Inf
 8006dd6:	43c0      	mvns	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:788
2:
 movs r2,#255
 8006dd8:	22ff      	movs	r2, #255	; 0xff
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:789
 b packretns
 8006dda:	e740      	b.n	8006c5e <packretns>

08006ddc <qfp_fatan2>:
qfp_fatan2():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:793

.thumb_func
qfp_fatan2:
 push {r4,r5,r14}
 8006ddc:	b530      	push	{r4, r5, lr}
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:794
 bl unpackxyalign        @ convert to fixed point (ensure common exponent, which is discarded)
 8006dde:	f7ff fe40 	bl	8006a62 <unpackxyalign>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:795
 movs r2,#0              @ initial angle
 8006de2:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:796
 cmp r0,#0               @ x negative
 8006de4:	2800      	cmp	r0, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:797
 bge 5f
 8006de6:	da02      	bge.n	8006dee <qfp_fatan2+0x12>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:798
 rsbs r0,#0              @ rotate to 1st/4th quadrants
 8006de8:	4240      	negs	r0, r0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:799
 rsbs r1,#0
 8006dea:	4249      	negs	r1, r1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:800
 ldr r2,pi_q29           @ pi Q29
 8006dec:	4a0d      	ldr	r2, [pc, #52]	; (8006e24 <pi_q29>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:802
5:
 adr r3,tab_cc           @ circular coefficients
 8006dee:	a30d      	add	r3, pc, #52	; (adr r3, 8006e24 <pi_q29>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:803
 movs r4,#1              @ m=1
 8006df0:	2401      	movs	r4, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:804
 bl cordic_vec           @ also produces magnitude (with scaling factor 1.646760119), which is discarded
 8006df2:	f7ff ff71 	bl	8006cd8 <cordic_vec>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:805
 mov r0,r2               @ result here is -pi/2..3pi/2 Q29
 8006df6:	4610      	mov	r0, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:806
 ldr r2,pi_q29           @ pi Q29
 8006df8:	4a0a      	ldr	r2, [pc, #40]	; (8006e24 <pi_q29>)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:807
 adds r4,r0,r2           @ attempt to fix -3pi/2..-pi case
 8006dfa:	1884      	adds	r4, r0, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:808
 bcs 6f                  @ -pi/2..0? leave result as is
 8006dfc:	d202      	bcs.n	8006e04 <qfp_fatan2+0x28>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:809
 subs r4,r0,r2           @ <pi? leave as is
 8006dfe:	1a84      	subs	r4, r0, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:810
 bmi 6f
 8006e00:	d400      	bmi.n	8006e04 <qfp_fatan2+0x28>
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:811
 subs r0,r4,r2           @ >pi: take off 2pi
 8006e02:	1aa0      	subs	r0, r4, r2
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:813
6:
 subs r0,#1              @ fiddle factor so atan2(0,1)==0
 8006e04:	3801      	subs	r0, #1
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:814
 movs r2,#0              @ exponent for pack
 8006e06:	2200      	movs	r2, #0
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:815
 b packretns
 8006e08:	e729      	b.n	8006c5e <packretns>
 8006e0a:	46c0      	nop			; (mov r8, r8)
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:671
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8006e0c:	136e9db4 	.word	0x136e9db4
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:716
 ldr r2,=#5909       @ log_2(e) Q12
 8006e10:	00001715 	.word	0x00001715
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:723
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8006e14:	162e42ff 	.word	0x162e42ff
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:726
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8006e18:	2c9e15ca 	.word	0x2c9e15ca
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:741
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 8006e1c:	0593c2b9 	.word	0x0593c2b9
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:778
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8006e20:	0162e430 	.word	0x0162e430

08006e24 <pi_q29>:
tab_cc():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:778
 8006e24:	6487ed51 	.word	0x6487ed51
 8006e28:	3b58ce0c 	.word	0x3b58ce0c
 8006e2c:	1f5b75f8 	.word	0x1f5b75f8
 8006e30:	0feadd4c 	.word	0x0feadd4c
 8006e34:	07fd56ec 	.word	0x07fd56ec
 8006e38:	03ffaab8 	.word	0x03ffaab8
 8006e3c:	01fff554 	.word	0x01fff554
 8006e40:	00fffeac 	.word	0x00fffeac
 8006e44:	007fffd4 	.word	0x007fffd4
 8006e48:	003ffffc 	.word	0x003ffffc
 8006e4c:	001ffffc 	.word	0x001ffffc
 8006e50:	00100000 	.word	0x00100000
 8006e54:	00080002 	.word	0x00080002

08006e58 <tab_ch>:
tab_ch():
/Users/Luppy/stm32bluepill-unittest/lib/qfplib/qfplib.S:778
 8006e58:	464fa9ec 	.word	0x464fa9ec
 8006e5c:	464fa9ed 	.word	0x464fa9ed
 8006e60:	20b15df4 	.word	0x20b15df4
 8006e64:	1015891c 	.word	0x1015891c
 8006e68:	0802ac44 	.word	0x0802ac44
 8006e6c:	0802ac45 	.word	0x0802ac45
 8006e70:	04005564 	.word	0x04005564
 8006e74:	02000aac 	.word	0x02000aac
 8006e78:	01000154 	.word	0x01000154
 8006e7c:	0080002c 	.word	0x0080002c
 8006e80:	00400004 	.word	0x00400004
 8006e84:	00200004 	.word	0x00200004
 8006e88:	00100000 	.word	0x00100000
 8006e8c:	00080000 	.word	0x00080000
 8006e90:	00080003 	.word	0x00080003

08006e94 <qfp_lib_end>:
qfp_lib_end():
 8006e94:	72617453 	.word	0x72617453
 8006e98:	676e6974 	.word	0x676e6974
 8006e9c:	002e2e2e 	.word	0x002e2e2e
 8006ea0:	656e6f44 	.word	0x656e6f44
 8006ea4:	00          	.byte	0x00
 8006ea5:	73          	.byte	0x73
 8006ea6:	6372      	.short	0x6372
 8006ea8:	2f2e2e2f 	.word	0x2f2e2e2f
 8006eac:	2f62696c 	.word	0x2f62696c
 8006eb0:	6f6e616e 	.word	0x6f6e616e
 8006eb4:	6f6c662d 	.word	0x6f6c662d
 8006eb8:	742f7461 	.word	0x742f7461
 8006ebc:	2f747365 	.word	0x2f747365
 8006ec0:	74736574 	.word	0x74736574
 8006ec4:	7400632e 	.word	0x7400632e
 8006ec8:	5f747365 	.word	0x5f747365
 8006ecc:	62616561 	.word	0x62616561
 8006ed0:	64645f69 	.word	0x64645f69
 8006ed4:	74007669 	.word	0x74007669
 8006ed8:	5f747365 	.word	0x5f747365
 8006edc:	62616561 	.word	0x62616561
 8006ee0:	6d645f69 	.word	0x6d645f69
 8006ee4:	74006c75 	.word	0x74006c75
 8006ee8:	5f747365 	.word	0x5f747365
 8006eec:	62616561 	.word	0x62616561
 8006ef0:	61645f69 	.word	0x61645f69
 8006ef4:	74006464 	.word	0x74006464
 8006ef8:	5f747365 	.word	0x5f747365
 8006efc:	62616561 	.word	0x62616561
 8006f00:	73645f69 	.word	0x73645f69
 8006f04:	74006275 	.word	0x74006275
 8006f08:	5f747365 	.word	0x5f747365
 8006f0c:	62616561 	.word	0x62616561
 8006f10:	63645f69 	.word	0x63645f69
 8006f14:	7165706d 	.word	0x7165706d
 8006f18:	73657400 	.word	0x73657400
 8006f1c:	65615f74 	.word	0x65615f74
 8006f20:	5f696261 	.word	0x5f696261
 8006f24:	706d6364 	.word	0x706d6364
 8006f28:	7400746c 	.word	0x7400746c
 8006f2c:	5f747365 	.word	0x5f747365
 8006f30:	62616561 	.word	0x62616561
 8006f34:	63645f69 	.word	0x63645f69
 8006f38:	656c706d 	.word	0x656c706d
 8006f3c:	73657400 	.word	0x73657400
 8006f40:	65615f74 	.word	0x65615f74
 8006f44:	5f696261 	.word	0x5f696261
 8006f48:	706d6364 	.word	0x706d6364
 8006f4c:	74006567 	.word	0x74006567
 8006f50:	5f747365 	.word	0x5f747365
 8006f54:	62616561 	.word	0x62616561
 8006f58:	63645f69 	.word	0x63645f69
 8006f5c:	7467706d 	.word	0x7467706d
 8006f60:	73657400 	.word	0x73657400
 8006f64:	65615f74 	.word	0x65615f74
 8006f68:	5f696261 	.word	0x5f696261
 8006f6c:	706d6364 	.word	0x706d6364
 8006f70:	74006e75 	.word	0x74006e75
 8006f74:	5f747365 	.word	0x5f747365
 8006f78:	62616561 	.word	0x62616561
 8006f7c:	64665f69 	.word	0x64665f69
 8006f80:	74007669 	.word	0x74007669
 8006f84:	5f747365 	.word	0x5f747365
 8006f88:	62616561 	.word	0x62616561
 8006f8c:	6d665f69 	.word	0x6d665f69
 8006f90:	74006c75 	.word	0x74006c75
 8006f94:	5f747365 	.word	0x5f747365
 8006f98:	62616561 	.word	0x62616561
 8006f9c:	61665f69 	.word	0x61665f69
 8006fa0:	74006464 	.word	0x74006464
 8006fa4:	5f747365 	.word	0x5f747365
 8006fa8:	62616561 	.word	0x62616561
 8006fac:	73665f69 	.word	0x73665f69
 8006fb0:	74006275 	.word	0x74006275
 8006fb4:	5f747365 	.word	0x5f747365
 8006fb8:	62616561 	.word	0x62616561
 8006fbc:	32645f69 	.word	0x32645f69
 8006fc0:	74007a69 	.word	0x74007a69
 8006fc4:	5f747365 	.word	0x5f747365
 8006fc8:	62616561 	.word	0x62616561
 8006fcc:	32645f69 	.word	0x32645f69
 8006fd0:	007a6975 	.word	0x007a6975
 8006fd4:	74736574 	.word	0x74736574
 8006fd8:	6464615f 	.word	0x6464615f
 8006fdc:	00336673 	.word	0x00336673
 8006fe0:	74736574 	.word	0x74736574
 8006fe4:	6275735f 	.word	0x6275735f
 8006fe8:	00336673 	.word	0x00336673
 8006fec:	74736574 	.word	0x74736574
 8006ff0:	6c756d5f 	.word	0x6c756d5f
 8006ff4:	00336673 	.word	0x00336673
 8006ff8:	74736574 	.word	0x74736574
 8006ffc:	7669645f 	.word	0x7669645f
 8007000:	00336673 	.word	0x00336673
 8007004:	74736574 	.word	0x74736574
 8007008:	7271735f 	.word	0x7271735f
 800700c:	65740074 	.word	0x65740074
 8007010:	6c5f7473 	.word	0x6c5f7473
 8007014:	7400676f 	.word	0x7400676f
 8007018:	5f747365 	.word	0x5f747365
 800701c:	00707865 	.word	0x00707865
 8007020:	74736574 	.word	0x74736574
 8007024:	676f6c5f 	.word	0x676f6c5f
 8007028:	65740032 	.word	0x65740032
 800702c:	6c5f7473 	.word	0x6c5f7473
 8007030:	3031676f 	.word	0x3031676f
 8007034:	73657400 	.word	0x73657400
 8007038:	6f705f74 	.word	0x6f705f74
 800703c:	65740077 	.word	0x65740077
 8007040:	6c5f7473 	.word	0x6c5f7473
 8007044:	70786564 	.word	0x70786564
 8007048:	73657400 	.word	0x73657400
 800704c:	69735f74 	.word	0x69735f74
 8007050:	6574006e 	.word	0x6574006e
 8007054:	635f7473 	.word	0x635f7473
 8007058:	7400736f 	.word	0x7400736f
 800705c:	5f747365 	.word	0x5f747365
 8007060:	006e6174 	.word	0x006e6174
 8007064:	74736574 	.word	0x74736574
 8007068:	6174615f 	.word	0x6174615f
 800706c:	7400326e 	.word	0x7400326e
 8007070:	5f747365 	.word	0x5f747365
 8007074:	6e617461 	.word	0x6e617461
 8007078:	73657400 	.word	0x73657400
 800707c:	73615f74 	.word	0x73615f74
 8007080:	74006e69 	.word	0x74006e69
 8007084:	5f747365 	.word	0x5f747365
 8007088:	736f6361 	.word	0x736f6361
 800708c:	73657400 	.word	0x73657400
 8007090:	69735f74 	.word	0x69735f74
 8007094:	7400686e 	.word	0x7400686e
 8007098:	5f747365 	.word	0x5f747365
 800709c:	68736f63 	.word	0x68736f63
 80070a0:	73657400 	.word	0x73657400
 80070a4:	61745f74 	.word	0x61745f74
 80070a8:	7400686e 	.word	0x7400686e
 80070ac:	5f747365 	.word	0x5f747365
 80070b0:	6e697361 	.word	0x6e697361
 80070b4:	65740068 	.word	0x65740068
 80070b8:	615f7473 	.word	0x615f7473
 80070bc:	68736f63 	.word	0x68736f63
 80070c0:	73657400 	.word	0x73657400
 80070c4:	74615f74 	.word	0x74615f74
 80070c8:	00686e61 	.word	0x00686e61
 80070cc:	74736574 	.word	0x74736574
 80070d0:	7572745f 	.word	0x7572745f
 80070d4:	7400636e 	.word	0x7400636e
 80070d8:	5f747365 	.word	0x5f747365
 80070dc:	6f6f6c66 	.word	0x6f6f6c66
 80070e0:	65740072 	.word	0x65740072
 80070e4:	635f7473 	.word	0x635f7473
 80070e8:	006c6965 	.word	0x006c6965
 80070ec:	74736574 	.word	0x74736574
 80070f0:	6f6d665f 	.word	0x6f6d665f
 80070f4:	65740064 	.word	0x65740064
 80070f8:	665f7473 	.word	0x665f7473
 80070fc:	00736261 	.word	0x00736261
 8007100:	202a2a2a 	.word	0x202a2a2a
 8007104:	636e7546 	.word	0x636e7546
 8007108:	6e6f6974 	.word	0x6e6f6974
 800710c:	6f6e2073 	.word	0x6f6e2073
 8007110:	61632074 	.word	0x61632074
 8007114:	64656c6c 	.word	0x64656c6c
 8007118:	2c00203a 	.word	0x2c00203a
 800711c:	6c410020 	.word	0x6c410020
 8007120:	7566206c 	.word	0x7566206c
 8007124:	6974636e 	.word	0x6974636e
 8007128:	20736e6f 	.word	0x20736e6f
 800712c:	6c6c6163 	.word	0x6c6c6163
 8007130:	0a006465 	.word	0x0a006465
 8007134:	67617355 	.word	0x67617355
 8007138:	00203a65 	.word	0x00203a65
 800713c:	00203e20 	.word	0x00203e20
 8007140:	00202f20 	.word	0x00202f20
 8007144:	4f52445b 	.word	0x4f52445b
 8007148:	44455050 	.word	0x44455050
 800714c:	005d      	.short	0x005d
 800714e:	0a0d      	.short	0x0a0d
 8007150:	00          	.byte	0x00
 8007151:	6e          	.byte	0x6e
 8007152:	6e61      	.short	0x6e61
 8007154:	666e6900 	.word	0x666e6900
	...

08007159 <UnityStrBreaker>:
 8007159:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
 8007169:	2d2d2d2d 002d2d2d                       -------.

08007171 <UnityStrDetail1Name>:
 8007171:	636e7546 6e6f6974                        Function .

0800717b <UnityStrDetail2Name>:
 800717b:	67724120 6e656d75                         Argument .

08007186 <UnityStrExpected>:
 8007186:	70784520 65746365                         Expected .

08007191 <UnityStrFail>:
 8007191:	4c494146                                 FAIL.

08007196 <UnityStrOk>:
 8007196:	                                         OK.

08007199 <UnityStrPass>:
 8007199:	53534150                                 PASS.

0800719e <UnityStrResultsFailures>:
 800719e:	69614620 6572756c                         Failures .

080071a9 <UnityStrResultsIgnored>:
 80071a9:	6e674920 6465726f                         Ignored .

080071b3 <UnityStrResultsTests>:
 80071b3:	73655420 00207374                        Tests .

080071bb <UnityStrSpacer>:
 80071bb:	                                         . .

080071be <UnityStrWas>:
 80071be:	73615720                                  Was .
